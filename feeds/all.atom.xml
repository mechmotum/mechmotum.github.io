<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Bicycle Laboratorium</title><link href="https://mechmotum.github.io/" rel="alternate"></link><link href="https://mechmotum.github.io/feeds/all.atom.xml" rel="self"></link><id>https://mechmotum.github.io/</id><updated>2024-09-13T11:55:00-07:00</updated><subtitle>E pur si muove</subtitle><entry><title>My Research Software Development Setup</title><link href="https://mechmotum.github.io/blog/setup-development-environment.html" rel="alternate"></link><published>2024-09-13T11:55:00-07:00</published><updated>2024-09-13T11:55:00-07:00</updated><author><name>Jason K. Moore</name></author><id>tag:mechmotum.github.io,2024-09-13:/blog/setup-development-environment.html</id><summary type="html">&lt;div class="section" id="introduction"&gt;
&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;I have been teaching scientific Python for about 15 years now and helping
students install everything correctly on their own computer has not really
gotten simpler for them or me. I no longer have to coach students through
compiling NumPy and SciPy but that pain has now been replaced …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;div class="section" id="introduction"&gt;
&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;I have been teaching scientific Python for about 15 years now and helping
students install everything correctly on their own computer has not really
gotten simpler for them or me. I no longer have to coach students through
compiling NumPy and SciPy but that pain has now been replaced with navigating
them through the myriad of package managers that all tout themselves as &lt;em&gt;the&lt;/em&gt;
solution. These days, a new package manager option seems to be released about
every month.&lt;/p&gt;
&lt;p&gt;Back when I started in 2008, I would &lt;tt class="docutils literal"&gt;apt install&lt;/tt&gt; the Python scientific
computing stack for simple use on Debian Linux (which still works nicely
today!) and if I needed the latest package version or was contributing to the
packages I used, I would compile NumPy &amp;amp; SciPy from source in a Python virtual
environment and then install mostly pure Python packages with &lt;tt class="docutils literal"&gt;easy_install&lt;/tt&gt;
from &lt;a class="reference external" href="https://pypi.org"&gt;PyPI&lt;/a&gt; (we called it &amp;quot;The Cheeseshop&amp;quot; back then). The first release of &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Pip_%28package_manager%29"&gt;pip&lt;/a&gt;
was in 2008 and gained quick adoption over &lt;tt class="docutils literal"&gt;easy_install&lt;/tt&gt;, but it did not
(and still doesn't fully) solve the scientific Python installation needs. But
in 2012, Continuum Analytics Inc. (now Anaconda Inc.) released the open source
&lt;a class="reference external" href="https://docs.conda.io/"&gt;Conda&lt;/a&gt; package manager and a website called binstar hosting Conda packages
(pre-compiled binaries) with a goal to unify the bubbling scientific software
packaging mess with particular focus on equal status on all three major
operating systems and end users never having to compile the scientific Python
stack again (among other things). I started using Conda immediately and have so
since (even through the &lt;a class="reference external" href="https://github.com/conda/conda/issues/7239"&gt;slow solver days&lt;/a&gt;).  I've tried many of the
subsequent solutions, but they all seemed to miss at least one thing that does
not work with a scientific computing oriented workflow. Thus, I still believe
Conda's approach is the best solution, especially since &lt;a class="reference external" href="https://conda-forge.org/"&gt;Conda Forge&lt;/a&gt; came
into being.&lt;/p&gt;
&lt;p&gt;Given the infinite combination of options for installing and setting up your
scientific Python oriented project development environment, I will stick to a
single (opinionated and &amp;quot;simple&amp;quot;) approach. This approach has worked for me for
over a decade. Of course, you can piece together a solution that works for you
and fits your style, but this hopefully gives a clear starting point for at
least my students.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="setup-conda-with-conda-forge"&gt;
&lt;h2&gt;Setup Conda with Conda Forge&lt;/h2&gt;
&lt;p&gt;We first need Conda. There are various ways to install Conda, but I recommend
to install &lt;a class="reference external" href="https://conda-forge.org/download/"&gt;Miniforge&lt;/a&gt; due to its small size and that it defaults to installing
packages only from Conda Forge. Miniforge creates a directory that will house
all of your installed software that does not need administrator privileges. It
also only installs packages from Conda Forge that are sure to be compatible.
Download Miniforge for your operating system and computer architecture here:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://conda-forge.org/download/"&gt;https://conda-forge.org/download/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;For Linux and Windows you most likely need the x86_64 build and for MacOS you
will need to choose the x86_64 for old Macs with Intel chips and arm64 for new
Macs with Arm chips. Follow the installation instructions on the page or the
more detailed version in the README here:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/conda-forge/miniforge"&gt;https://github.com/conda-forge/miniforge&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="base-conda-environment"&gt;
&lt;h2&gt;Base Conda Environment&lt;/h2&gt;
&lt;p&gt;Conda has a &amp;quot;virtual environment&amp;quot; feature builtin which allows you to install a
set of packages isolated from another set of packages. The &amp;quot;base&amp;quot; environment
is the default environment and I use this environment as my general calculator,
so it should have the most common packages that I use. After installing these
common packages, this gives you something akin to Matlab where the latest
version of everything you use is importable or you can think of it as your
custom built Python distribution. You will find recommendations on the internet
discouraging from installing packages in the base environment, but I've never
had any issue doing this over the last decade.&lt;/p&gt;
&lt;p&gt;You interact with Conda via the command line, so open a terminal on Linux or
Mac or open the Miniforge command prompt on Windows. Conda's base environment
should be activated by default. I use the &lt;tt class="docutils literal"&gt;$&lt;/tt&gt; below for the command prompt
symbol, this will be different on Windows or if you have customized it.&lt;/p&gt;
&lt;p&gt;Check if Conda is installed by typing and pressing the enter key:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$&lt;span class="w"&gt; &lt;/span&gt;conda&lt;span class="w"&gt; &lt;/span&gt;--version
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This should return a version number, e.g.:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;conda&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;24&lt;/span&gt;.7.1
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now install any packages that you think you may regularly use, e.g.:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$&lt;span class="w"&gt; &lt;/span&gt;conda&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;numpy&lt;span class="w"&gt; &lt;/span&gt;scipy&lt;span class="w"&gt; &lt;/span&gt;matplotlib&lt;span class="w"&gt; &lt;/span&gt;sympy&lt;span class="w"&gt; &lt;/span&gt;ipython&lt;span class="w"&gt; &lt;/span&gt;spyder
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The package names have to match the names of available Conda Forge packages
found here:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://conda-forge.org/packages/"&gt;https://conda-forge.org/packages/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;After the installation finishes, you can use these packages, e.g.:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$&lt;span class="w"&gt; &lt;/span&gt;python&lt;span class="w"&gt; &lt;/span&gt;-c&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;import numpy; print(numpy.ones(5))&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;.&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;.&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;.&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;.&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;.&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you prefer working in an Integrated Development Environment (IDE) you can do
so. Spyder is a possible choice, which I installed above. You can open Spyder
via your application menu or by typing this at the command line:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$&lt;span class="w"&gt; &lt;/span&gt;spyder
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;There are many IDE choices and most popular ones work seamlessly with Conda and
Conda virtual environments.&lt;/p&gt;
&lt;p&gt;This setup may serve all of your needs and you can use the single set of
packages installed in the base environment. You can periodically run these
commands:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$&lt;span class="w"&gt; &lt;/span&gt;conda&lt;span class="w"&gt; &lt;/span&gt;update&lt;span class="w"&gt; &lt;/span&gt;--all
$&lt;span class="w"&gt; &lt;/span&gt;conda&lt;span class="w"&gt; &lt;/span&gt;clean&lt;span class="w"&gt; &lt;/span&gt;--all
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to keep your packages all at their latest compatible versions and delete
versions of packages that are no longer in the base environment.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="project-conda-environments"&gt;
&lt;h2&gt;Project Conda Environments&lt;/h2&gt;
&lt;p&gt;At some point you may want a specific set of packages at specific versions for
a project, paper, collaboration, etc. and these will likely be in conflict with
what you have installed in your base environment. For every specific project I
work on, I create a Conda virtual environment with the subset of packages I
need for that project. I first create a directory/folder on my computer for the
project that, in its most basic form, looks like:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
/home/moorepants/myproject/
|--&amp;gt; myproject-env.yml
|--&amp;gt; script.py
&lt;/pre&gt;
&lt;p&gt;where the &lt;tt class="docutils literal"&gt;script.py&lt;/tt&gt; file would house some analysis for the project and
&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;myproject-env.yml&lt;/span&gt;&lt;/tt&gt; is a Conda &lt;tt class="docutils literal"&gt;environment.yml&lt;/tt&gt; file that specifies the
software needed to run &lt;tt class="docutils literal"&gt;script.py&lt;/tt&gt;. A real project will have many more files,
for example here is one of my working repositories for a manuscript:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/moorepants/bicycle-steer-control-paper"&gt;https://github.com/moorepants/bicycle-steer-control-paper&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;myproject-env.yml&lt;/span&gt;&lt;/tt&gt; should have contents that look something like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;myproject&lt;/span&gt;
&lt;span class="nt"&gt;channels&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;conda-forge&lt;/span&gt;
&lt;span class="nt"&gt;dependencies&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;bicycleparameters&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;dynamicisttoolkit&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;ipython&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;matplotlib&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;numpy&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;opty&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;pip&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;python ==3.10&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;# you can specify versions&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;scipy&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;spyder-kernels&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;# allows access to this environment in spyder installed in base&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;sympy&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;yeadon&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;All packages in the &lt;tt class="docutils literal"&gt;dependencies:&lt;/tt&gt; list have to correspond to packages
available on Conda Forge, listed here:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://conda-forge.org/packages/"&gt;https://conda-forge.org/packages/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;You can learn more about the &lt;tt class="docutils literal"&gt;environment.yml&lt;/tt&gt; file specification in the
Conda documentation:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://docs.conda.io/projects/conda/en/latest/user-guide/tasks/manage-environments.html"&gt;https://docs.conda.io/projects/conda/en/latest/user-guide/tasks/manage-environments.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This environment file can be used by you or others to reproduce a software
installation for your project.&lt;/p&gt;
&lt;p&gt;Once you save the file, you can create the environment with this command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$&lt;span class="w"&gt; &lt;/span&gt;conda&lt;span class="w"&gt; &lt;/span&gt;env&lt;span class="w"&gt; &lt;/span&gt;create&lt;span class="w"&gt; &lt;/span&gt;-f&lt;span class="w"&gt; &lt;/span&gt;myproject-env.yml
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To use the environment, you have to activate it in the terminal/command prompt:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$&lt;span class="w"&gt; &lt;/span&gt;conda&lt;span class="w"&gt; &lt;/span&gt;activate&lt;span class="w"&gt; &lt;/span&gt;myproject
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now you'll have access to that set of packages by default, for example we see
that the matching Python version is installed:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$&lt;span class="w"&gt; &lt;/span&gt;python&lt;span class="w"&gt; &lt;/span&gt;--version
Python&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;.10.0
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We installed Spyder in the base environment and &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;spyder-kernels&lt;/span&gt;&lt;/tt&gt; in the
project's environment. If we type &lt;tt class="docutils literal"&gt;spyder&lt;/tt&gt;, the Spyder installed in base will
open (because we didn't install in the project environment). But when you open
Spyder you can select this project environment to run the code. Jupyter,
VScode, Pycharm, and many IDEs will allow you to select the Conda environment.
To do so in Spyder, first activate your environment in the terminal/command
prompt and find the full path to the Python executable associated with the
environment by typing:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$&lt;span class="w"&gt; &lt;/span&gt;python&lt;span class="w"&gt; &lt;/span&gt;-c&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;import sys; print(sys.executable)&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This should display a path to the correct environment directory/folder
corresponding to your active environment, for example mine displays:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;/home/moorepants/miniforge/envs/myproject/bin/python
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now, open Spyder and find the preferences that let you set the Python
interpreter. You should find this under this menu path: &amp;quot;Tools -&amp;gt; Preferences
-&amp;gt; Python interpreter -&amp;gt; Use the following Python interpreter&amp;quot;. Paste the path
from the prior command line command into this field and apply the preferences.
New and restarted Spyder consoles will execute code in your project
environment. See this blog post for more information:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://medium.com/&amp;#64;apremgeorge/using-conda-python-environments-with-spyder-ide-and-jupyter-notebooks-in-windows-4e0a905aaac5"&gt;https://medium.com/&amp;#64;apremgeorge/using-conda-python-environments-with-spyder-ide-and-jupyter-notebooks-in-windows-4e0a905aaac5&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;If you are using version control (which you should be), commit the
&lt;tt class="docutils literal"&gt;environment.yml&lt;/tt&gt; file to the repository so others can reproduce your project
environment.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="package-not-in-conda-forge"&gt;
&lt;h2&gt;Package Not in Conda Forge&lt;/h2&gt;
&lt;p&gt;At some point you will want to use a package that is not available in Conda
Forge. There are different approaches to install the package in your Conda
environment depending on what the package's primary programming language is,
but most commonly you will want a Python package that you can find on PyPI but
not in Conda Forge. Packages on PyPI are generally installed using the pip
package manager. You will see many other recommendations on the web, e.g.:
pipx, hatchling, poetry, pdm, uv for installing PyPI pacakges. It is best to
ignore these for now and you can use them later if you find you like them
better than pip and/or Conda.&lt;/p&gt;
&lt;p&gt;You can install packages from PyPI into a Conda environment but this
arrangement is fragile and you should never install packages with pip into your
base environment (otherwise you are asking for trouble). The safest approach I
have found over the years is to first install everything the PyPI packages
depend on using Conda and then install the PyPI package using pip's with its
&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;--no-deps&lt;/span&gt;&lt;/tt&gt; flag. This prevents pip from filling your Conda environment with
PyPI packages you don't want there.&lt;/p&gt;
&lt;p&gt;As an example, SymPy is availabe on Conda Forge but we will pretend that it
isn't and install from PyPI.  SymPy's only required dependencies are Python and
mpmath. Both are available on Conda Forge. So we create an environment file
that includes pip in the dependencies list so we can use it to install from
PyPI inside the environment and the two dependencies of SymPy:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;myproject&lt;/span&gt;
&lt;span class="nt"&gt;channels&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;conda-forge&lt;/span&gt;
&lt;span class="nt"&gt;dependencies&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;pip&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;python&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;mpmath&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$&lt;span class="w"&gt; &lt;/span&gt;conda&lt;span class="w"&gt; &lt;/span&gt;env&lt;span class="w"&gt; &lt;/span&gt;create&lt;span class="w"&gt; &lt;/span&gt;-f&lt;span class="w"&gt; &lt;/span&gt;myproject-env.yml
$&lt;span class="w"&gt; &lt;/span&gt;conda&lt;span class="w"&gt; &lt;/span&gt;activate&lt;span class="w"&gt; &lt;/span&gt;myproject
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now, you can run pip inside the Conda environment to install the PyPI package
for SymPy:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$&lt;span class="w"&gt; &lt;/span&gt;python&lt;span class="w"&gt; &lt;/span&gt;-m&lt;span class="w"&gt; &lt;/span&gt;pip&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;--no-deps&lt;span class="w"&gt; &lt;/span&gt;sympy
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you now look at the list of installed packages you see that SymPy is listed
as installed from PyPI:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$&lt;span class="w"&gt; &lt;/span&gt;conda&lt;span class="w"&gt; &lt;/span&gt;list
&lt;span class="c1"&gt;# packages in environment at /home/moorepants/miniforge/envs/myproject:&lt;/span&gt;
&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;span class="c1"&gt;# Name                    Version                   Build  Channel&lt;/span&gt;
_libgcc_mutex&lt;span class="w"&gt;             &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.1&lt;span class="w"&gt;                 &lt;/span&gt;conda_forge&lt;span class="w"&gt;    &lt;/span&gt;conda-forge
_openmp_mutex&lt;span class="w"&gt;             &lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;.5&lt;span class="w"&gt;                       &lt;/span&gt;2_gnu&lt;span class="w"&gt;    &lt;/span&gt;conda-forge
bzip2&lt;span class="w"&gt;                     &lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;.0.8&lt;span class="w"&gt;                &lt;/span&gt;h4bc722e_7&lt;span class="w"&gt;    &lt;/span&gt;conda-forge
ca-certificates&lt;span class="w"&gt;           &lt;/span&gt;&lt;span class="m"&gt;2024&lt;/span&gt;.8.30&lt;span class="w"&gt;            &lt;/span&gt;hbcca054_0&lt;span class="w"&gt;    &lt;/span&gt;conda-forge
ld_impl_linux-64&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;.40&lt;span class="w"&gt;                 &lt;/span&gt;hf3520f5_7&lt;span class="w"&gt;    &lt;/span&gt;conda-forge
libexpat&lt;span class="w"&gt;                  &lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;.6.3&lt;span class="w"&gt;                &lt;/span&gt;h5888daf_0&lt;span class="w"&gt;    &lt;/span&gt;conda-forge
libffi&lt;span class="w"&gt;                    &lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;.4.2&lt;span class="w"&gt;                &lt;/span&gt;h7f98852_5&lt;span class="w"&gt;    &lt;/span&gt;conda-forge
libgcc&lt;span class="w"&gt;                    &lt;/span&gt;&lt;span class="m"&gt;14&lt;/span&gt;.1.0&lt;span class="w"&gt;               &lt;/span&gt;h77fa898_1&lt;span class="w"&gt;    &lt;/span&gt;conda-forge
libgcc-ng&lt;span class="w"&gt;                 &lt;/span&gt;&lt;span class="m"&gt;14&lt;/span&gt;.1.0&lt;span class="w"&gt;               &lt;/span&gt;h69a702a_1&lt;span class="w"&gt;    &lt;/span&gt;conda-forge
libgomp&lt;span class="w"&gt;                   &lt;/span&gt;&lt;span class="m"&gt;14&lt;/span&gt;.1.0&lt;span class="w"&gt;               &lt;/span&gt;h77fa898_1&lt;span class="w"&gt;    &lt;/span&gt;conda-forge
libnsl&lt;span class="w"&gt;                    &lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;.0.1&lt;span class="w"&gt;                &lt;/span&gt;hd590300_0&lt;span class="w"&gt;    &lt;/span&gt;conda-forge
libsqlite&lt;span class="w"&gt;                 &lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;.46.1&lt;span class="w"&gt;               &lt;/span&gt;hadc24fc_0&lt;span class="w"&gt;    &lt;/span&gt;conda-forge
libuuid&lt;span class="w"&gt;                   &lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;.38.1&lt;span class="w"&gt;               &lt;/span&gt;h0b41bf4_0&lt;span class="w"&gt;    &lt;/span&gt;conda-forge
libxcrypt&lt;span class="w"&gt;                 &lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;.4.36&lt;span class="w"&gt;               &lt;/span&gt;hd590300_1&lt;span class="w"&gt;    &lt;/span&gt;conda-forge
libzlib&lt;span class="w"&gt;                   &lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;.3.1&lt;span class="w"&gt;                &lt;/span&gt;h4ab18f5_1&lt;span class="w"&gt;    &lt;/span&gt;conda-forge
mpmath&lt;span class="w"&gt;                    &lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;.3.0&lt;span class="w"&gt;              &lt;/span&gt;pyhd8ed1ab_0&lt;span class="w"&gt;    &lt;/span&gt;conda-forge
ncurses&lt;span class="w"&gt;                   &lt;/span&gt;&lt;span class="m"&gt;6&lt;/span&gt;.5&lt;span class="w"&gt;                  &lt;/span&gt;he02047a_1&lt;span class="w"&gt;    &lt;/span&gt;conda-forge
openssl&lt;span class="w"&gt;                   &lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;.3.2&lt;span class="w"&gt;                &lt;/span&gt;hb9d3cd8_0&lt;span class="w"&gt;    &lt;/span&gt;conda-forge
pip&lt;span class="w"&gt;                       &lt;/span&gt;&lt;span class="m"&gt;24&lt;/span&gt;.2&lt;span class="w"&gt;               &lt;/span&gt;pyh8b19718_1&lt;span class="w"&gt;    &lt;/span&gt;conda-forge
python&lt;span class="w"&gt;                    &lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;.12.5&lt;span class="w"&gt;          &lt;/span&gt;h2ad013b_0_cpython&lt;span class="w"&gt;    &lt;/span&gt;conda-forge
readline&lt;span class="w"&gt;                  &lt;/span&gt;&lt;span class="m"&gt;8&lt;/span&gt;.2&lt;span class="w"&gt;                  &lt;/span&gt;h8228510_1&lt;span class="w"&gt;    &lt;/span&gt;conda-forge
setuptools&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="m"&gt;73&lt;/span&gt;.0.1&lt;span class="w"&gt;             &lt;/span&gt;pyhd8ed1ab_0&lt;span class="w"&gt;    &lt;/span&gt;conda-forge
sympy&lt;span class="w"&gt;                     &lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;.13.2&lt;span class="w"&gt;                   &lt;/span&gt;pypi_0&lt;span class="w"&gt;    &lt;/span&gt;pypi
tk&lt;span class="w"&gt;                        &lt;/span&gt;&lt;span class="m"&gt;8&lt;/span&gt;.6.13&lt;span class="w"&gt;          &lt;/span&gt;noxft_h4845f30_101&lt;span class="w"&gt;    &lt;/span&gt;conda-forge
tzdata&lt;span class="w"&gt;                    &lt;/span&gt;2024a&lt;span class="w"&gt;                &lt;/span&gt;h8827d51_1&lt;span class="w"&gt;    &lt;/span&gt;conda-forge
wheel&lt;span class="w"&gt;                     &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.44.0&lt;span class="w"&gt;             &lt;/span&gt;pyhd8ed1ab_0&lt;span class="w"&gt;    &lt;/span&gt;conda-forge
xz&lt;span class="w"&gt;                        &lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;.2.6&lt;span class="w"&gt;                &lt;/span&gt;h166bdaf_0&lt;span class="w"&gt;    &lt;/span&gt;conda-forge
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you carefully install all of the PyPI packages' dependencies from Conda
Forge then you can reasonably safely run &lt;tt class="docutils literal"&gt;conda update &lt;span class="pre"&gt;--all&lt;/span&gt;&lt;/tt&gt; inside the
Conda environment and then follow that with a &lt;tt class="docutils literal"&gt;python &lt;span class="pre"&gt;-m&lt;/span&gt; pip install &lt;span class="pre"&gt;--no-deps&lt;/span&gt;
&lt;span class="pre"&gt;-U&lt;/span&gt; sympy&lt;/tt&gt; to upgrade the PyPI package.&lt;/p&gt;
&lt;p&gt;This method will generally work but it requires you to manually determine and
install the dependencies. If you have many PyPI packages, then this may get out
of hand to manage. But my experience is that you typically don't have many PyPI
packages you need that are not on Conda Forge.&lt;/p&gt;
&lt;p&gt;Conda does also support specifying PyPI packages in the environment file like
so:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;myproject&lt;/span&gt;
&lt;span class="nt"&gt;channels&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;conda-forge&lt;/span&gt;
&lt;span class="nt"&gt;dependencies&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;pip&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;python&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;mpmath&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;pip&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;sympy&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;but the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;--no-deps&lt;/span&gt;&lt;/tt&gt; flag is not called when installing the packages in the
pip list and you may end of up with many PyPI packages in your Conda
environment and then updating things becomes more difficult, or even
impossible. The nice thing is that you can always delete the environment and
recreate it if it goes awry.&lt;/p&gt;
&lt;p&gt;There are new developments to make this work more seamlessly, for example see
&lt;a class="reference external" href="https://github.com/conda-incubator/conda-pypi"&gt;https://github.com/conda-incubator/conda-pypi&lt;/a&gt;. But the ideal solution is that
you help contribute to Conda Forge and add the PyPI package you need via a pull
request to &lt;a class="reference external" href="https://github.com/conda-forge/staged-recipes"&gt;https://github.com/conda-forge/staged-recipes&lt;/a&gt;. It is generally
pretty straight forward to use the &lt;a class="reference external" href="https://github.com/conda/grayskull"&gt;grayskull&lt;/a&gt; tool &lt;tt class="docutils literal"&gt;grayskull pypi
&lt;span class="pre"&gt;package-name&lt;/span&gt;&lt;/tt&gt; to generate the recipe for a pull request if the package is a
pure Python package.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="developing-a-package-in-your-environment"&gt;
&lt;h2&gt;Developing a Package in Your Environment&lt;/h2&gt;
&lt;p&gt;Sometimes you may want to use the development version of a software package in
your environment and you may even be developing it alongside the source code
for your project. Then you want to setup your environment with a &amp;quot;development
installation&amp;quot; of one or more packages. This approach is almost identical to the
prior section, except you will install the package from the source code you
have cloned from a Git repository. In our lab it is be (or should be) common to
develop &lt;a class="reference external" href="https://dynamicisttoolkit.readthedocs.io/"&gt;DynamicistToolKit&lt;/a&gt; alongside the code for a research project so I'll
use this as an example.&lt;/p&gt;
&lt;p&gt;First, check the development dependencies of DynamicstToolKit, which can be
found in the &lt;tt class="docutils literal"&gt;setup.py&lt;/tt&gt; file in the source repository:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/moorepants/DynamicistToolKit/blob/master/setup.py"&gt;https://github.com/moorepants/DynamicistToolKit/blob/master/setup.py&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;To develop this package you should have numpy, matplotlib, scipy, sphinx,
numpydoc, and pytest installed. So, include these in your project environment
configuration file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;myproject&lt;/span&gt;
&lt;span class="nt"&gt;channels&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;conda-forge&lt;/span&gt;
&lt;span class="nt"&gt;dependencies&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;matplotlib&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;numpy&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;numpydoc&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;pytest&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;python&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;scipy&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;sphinx&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$&lt;span class="w"&gt; &lt;/span&gt;conda&lt;span class="w"&gt; &lt;/span&gt;env&lt;span class="w"&gt; &lt;/span&gt;create&lt;span class="w"&gt; &lt;/span&gt;-f&lt;span class="w"&gt; &lt;/span&gt;myproject-env.yml
$&lt;span class="w"&gt; &lt;/span&gt;conda&lt;span class="w"&gt; &lt;/span&gt;activate&lt;span class="w"&gt; &lt;/span&gt;myproject
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now, clone the development version of DynamicistToolKit with Git and navigate
into the new directory:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$&lt;span class="w"&gt; &lt;/span&gt;git&lt;span class="w"&gt; &lt;/span&gt;clone&lt;span class="w"&gt; &lt;/span&gt;https://github.com/moorepants/DynamicistToolKit.git
$&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;DynamicistToolKit
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now make a development installation from this directory with Conda:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$&lt;span class="w"&gt; &lt;/span&gt;conda&lt;span class="w"&gt; &lt;/span&gt;develop&lt;span class="w"&gt; &lt;/span&gt;.
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When you import &lt;tt class="docutils literal"&gt;dtk&lt;/tt&gt; you should see that it is sourced from the file in the
Git repository you cloned:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$&lt;span class="w"&gt; &lt;/span&gt;python&lt;span class="w"&gt; &lt;/span&gt;-c&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;import dtk; print(dtk.__file__)&amp;quot;&lt;/span&gt;
/home/moorepants/src/DynamicistToolKit/dtk/__init__.py
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now you can make edits to the files in the &lt;tt class="docutils literal"&gt;DynamicistToolKit&lt;/tt&gt; directory and
those changes will be present when you import the package in your project Conda
environment. You can use Git to keep the development version of
DynamicistToolKit up-to-date and a Git branch to manage your changes. Updating
the environment has the same perils as mentioned in the previous section but
works fine if the development installs sit at the top of the dependency stack.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="extra-tips-and-notes"&gt;
&lt;h2&gt;Extra Tips and Notes&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;There are so many ways to get a working scientific (Python) stack of software
installed and it is unbelievably confusing when you try to figure it out for
the first time because every website tells you a different approach. It is
unfortunately the nature of the beast. My best advice is to find a real
person that's familiar with it and let them help you get set up.&lt;/li&gt;
&lt;li&gt;The above method does not give you long term reproducibility, i.e. running
&lt;tt class="docutils literal"&gt;conda env create &lt;span class="pre"&gt;-f&lt;/span&gt; &lt;span class="pre"&gt;myproject-env.yml&lt;/span&gt;&lt;/tt&gt; in ten years will inevitably fail
even if you hard pin the package versions. But this approach generally works
in the time frame of a project, like 1-4 years. If you want more long term
reproducibility of environments, you'll need to learn about Conda lock files
or even other more appropriate tools.&lt;/li&gt;
&lt;li&gt;You can find things like: &lt;a class="reference external" href="https://github.com/conda-incubator/conda-project"&gt;https://github.com/conda-incubator/conda-project&lt;/a&gt;
which try to encapsulate what I show above in fewer commands with a wrapper
tool and to also incorporate Conda lock files.&lt;/li&gt;
&lt;li&gt;pip and the related tools have come a long way in the last 15 years, so you
may be able to get away with only using packages directly installed from
PyPI, but the second you need a package that the PyPI paradigm does not
support, you have to move back to more general package managers, like Conda.
You can read about the fundamental flaws the PyPI approach has here:
&lt;a class="reference external" href="https://pypackaging-native.github.io/"&gt;https://pypackaging-native.github.io/&lt;/a&gt; if you want to know the gory details.
My opinion is that Conda is still the more full proof approach for a
scientific software setup for our general use cases.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="software"></category><category term="conda"></category><category term="python"></category><category term="scientific software"></category><category term="installation"></category></entry><entry><title>Anna Marbus's Research Featured on the TU Delft Website</title><link href="https://mechmotum.github.io/blog/anna-featured-on-tudelft-website.html" rel="alternate"></link><published>2024-09-12T00:00:00-07:00</published><updated>2024-09-12T00:00:00-07:00</updated><author><name>Jason K. Moore</name></author><id>tag:mechmotum.github.io,2024-09-12:/blog/anna-featured-on-tudelft-website.html</id><summary type="html">&lt;p&gt;TU Delft communications &lt;a class="reference external" href="https://www.tudelft.nl/en/me/education/student-stories/causing-near-collisions-with-cyclists-to-improve-traffic-models"&gt;featured Anna Marbus's research on cyclist conflict
behavior this week on the TU Delft website&lt;/a&gt;.
Anna is supervised by Christoph Schmidt and they are working on data driven
traffic simulation models for cyclists. Anna will begin her experiments very
soon, so contact us if you'd like to …&lt;/p&gt;</summary><content type="html">&lt;p&gt;TU Delft communications &lt;a class="reference external" href="https://www.tudelft.nl/en/me/education/student-stories/causing-near-collisions-with-cyclists-to-improve-traffic-models"&gt;featured Anna Marbus's research on cyclist conflict
behavior this week on the TU Delft website&lt;/a&gt;.
Anna is supervised by Christoph Schmidt and they are working on data driven
traffic simulation models for cyclists. Anna will begin her experiments very
soon, so contact us if you'd like to be a participant.&lt;/p&gt;
&lt;a class="reference external image-reference" href="https://www.tudelft.nl/en/me/education/student-stories/causing-near-collisions-with-cyclists-to-improve-traffic-models"&gt;&lt;img alt="" class="align-center" src="https://objects-us-east-1.dream.io/mechmotum/annas-tudelft-feature.png" style="width: 600px;" /&gt;&lt;/a&gt;
</content><category term="news"></category><category term="bicycle"></category><category term="traffic"></category><category term="research"></category></entry><entry><title>Kenneth Pasma Successfully Defends His MSc Thesis</title><link href="https://mechmotum.github.io/blog/msc-graduation-kenneth-pasma.html" rel="alternate"></link><published>2024-08-28T15:45:00-07:00</published><updated>2024-08-28T15:45:00-07:00</updated><author><name>Jason K. Moore</name></author><id>tag:mechmotum.github.io,2024-08-28:/blog/msc-graduation-kenneth-pasma.html</id><summary type="html">&lt;a class="reference external image-reference" href="http://resolver.tudelft.nl/uuid:e0f4dafe-ff81-40af-9466-e8eaa4199a7a"&gt;&lt;img alt="" class="align-center" src="https://objects-us-east-1.dream.io/mechmotum/thesis-cover-pasma.png" style="height: 400px;" /&gt;&lt;/a&gt;
&lt;p&gt;Kenneth Pasma successfully defended &amp;quot;&lt;a class="reference external" href="http://resolver.tudelft.nl/uuid:e0f4dafe-ff81-40af-9466-e8eaa4199a7a"&gt;Model Matching Control Applied to
Bicycles&lt;/a&gt;&amp;quot; on
August 28, 2024. Kenneth developed a controller for our steer-by-wire bicycle's
steering motor that enables matching the bicycle's dynamics to that of a
reference bicycle. A model matching controller strives to make the input-output
dynamics of the controlled vehicle …&lt;/p&gt;</summary><content type="html">&lt;a class="reference external image-reference" href="http://resolver.tudelft.nl/uuid:e0f4dafe-ff81-40af-9466-e8eaa4199a7a"&gt;&lt;img alt="" class="align-center" src="https://objects-us-east-1.dream.io/mechmotum/thesis-cover-pasma.png" style="height: 400px;" /&gt;&lt;/a&gt;
&lt;p&gt;Kenneth Pasma successfully defended &amp;quot;&lt;a class="reference external" href="http://resolver.tudelft.nl/uuid:e0f4dafe-ff81-40af-9466-e8eaa4199a7a"&gt;Model Matching Control Applied to
Bicycles&lt;/a&gt;&amp;quot; on
August 28, 2024. Kenneth developed a controller for our steer-by-wire bicycle's
steering motor that enables matching the bicycle's dynamics to that of a
reference bicycle. A model matching controller strives to make the input-output
dynamics of the controlled vehicle the same as a reference or target vehicle
(or vehicle design). In essence, this means that we can make a steer
motor-controlled bicycle feel and move as if were another bike, for example one
with a different trail, or different wheel base, or with less mass. Kenneth
applied the approach of applying both feedforward and feedback control to the
steering motor based on force and motion measurements from sensors on the bike.
Once the controller was functioning, he performed two experiments to prove
whether his controller was working as expected: 1) identification of the weave
mode from a lateral pulsive perturbation and 2) identification of steer torque
to steer and roll kinematic transfer functions through sinusoidal forcing of
steer torque.  Kenneth's results show that the controller shifts the weave
mode's decay and frequency behavior towards that of the reference bicycle and
that the input-output magnitude relationships at different forced frequencies
also shift toward that expected of the reference bicycle. Kenneth explained how
these techniques could be used for virtually testing different bicycle designs
and how it can open possibilities for new experiments in bicycle handling and
control. We also hope to use the technology to make our balance assist
bicycle's feel more natural to the rider while retaining the stability effects.&lt;/p&gt;
&lt;p&gt;Kenneth was co-supervised by Prof. Thomas Kavicsky (TU Delft) and Jason K.
Moore (TU Delft). Everyone at the bicycle lab is very proud of Kenneth and
wishes him the best in his next adventures.&lt;/p&gt;
</content><category term="news"></category><category term="bicycle"></category><category term="engineering"></category><category term="model matching"></category><category term="robotics"></category><category term="control"></category></entry><entry><title>Nijmegen Velorama Bicycle Tour</title><link href="https://mechmotum.github.io/blog/nijmegen-tour.html" rel="alternate"></link><published>2024-08-13T07:00:00-07:00</published><updated>2024-08-13T07:00:00-07:00</updated><author><name>Jason K. Moore</name></author><id>tag:mechmotum.github.io,2024-08-13:/blog/nijmegen-tour.html</id><summary type="html">&lt;p&gt;The bicycle lab completed their second annual bicycle tour! Neville, Bart,
Christoph, Nora, Sietse, Jason, and Yumi bicycled from Delft-Rotterdam to
Nijmegen and back over three days and covered about 250 km. We had a few
interesting bicycles in the fleet. Neville and Sietse road the stoker-steering
tandem, Bart rode …&lt;/p&gt;</summary><content type="html">&lt;p&gt;The bicycle lab completed their second annual bicycle tour! Neville, Bart,
Christoph, Nora, Sietse, Jason, and Yumi bicycled from Delft-Rotterdam to
Nijmegen and back over three days and covered about 250 km. We had a few
interesting bicycles in the fleet. Neville and Sietse road the stoker-steering
tandem, Bart rode the lab bakfiets, and Jason and Yumi rode their Innerlight
tandem. The ride took us along the Waal river and through the beautiful
Gelderland fruit orchards. In Nijmegen, we visited the national bicycle museum,
&lt;a class="reference external" href="https://velorama.nl/"&gt;Velorama&lt;/a&gt;, and walked through the history of the development of the bicycle
with their extensive collection. Following the museum, &lt;a class="reference external" href="https://www.ru.nl/en/people/maris-e"&gt;Dr. Eric Maris&lt;/a&gt; hosted
us and let us try out his bicycle simulator system at Radboud University. We
had great weather for the entire ride and closed the trip with a waterbus trip
from Sliedrecht to Rotterdam.&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="" src="https://objects-us-east-1.dream.io/mechmotum/nijmegen-tour-route.png" style="width: 80%;" /&gt;
&lt;p class="caption"&gt;GPS trace of the route we took. We camped just west of Tiel beside the
village of Geldermalsen.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="" src="https://objects-us-east-1.dream.io/mechmotum/nijmegen-tour-riding.png" style="width: 60%;" /&gt;
&lt;p class="caption"&gt;In route.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="" src="https://objects-us-east-1.dream.io/mechmotum/nijmegen-tour-fiets-museum.png" style="width: 80%;" /&gt;
&lt;p class="caption"&gt;Group photo after visiting the museum. Velorama is a quiet, compact musuem
with a spectacular historical collection.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="" src="https://objects-us-east-1.dream.io/mechmotum/nijmegen-tour-fiets-simulator.png" style="width: 60%;" /&gt;
&lt;p class="caption"&gt;Neville on the treadmill/roller bicycle simulator with Eric giving
instruction from the rear.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="" src="https://objects-us-east-1.dream.io/mechmotum/nijmegen-tour-ferry-group-picture.png" style="width: 80%;" /&gt;
&lt;p class="caption"&gt;Group photo while waiting for the Varik-Heerewaarden ferry across the Waal.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="" src="https://objects-us-east-1.dream.io/mechmotum/nijmegen-tour-statue-house-group-picture.png" style="width: 80%;" /&gt;
&lt;p class="caption"&gt;Group photo in front of the Nijmegen house of statues (mostly gnomes!).&lt;/p&gt;
&lt;/div&gt;
</content><category term="news"></category><category term="bicycle"></category><category term="social"></category></entry><entry><title>Biomechanical Optimization with SymPy 1.13 and Opty 1.3</title><link href="https://mechmotum.github.io/blog/sympy-1.13-opty-1.3-release.html" rel="alternate"></link><published>2024-08-05T00:00:00-07:00</published><updated>2024-08-05T00:00:00-07:00</updated><author><name>Jason K. Moore</name></author><id>tag:mechmotum.github.io,2024-08-05:/blog/sympy-1.13-opty-1.3-release.html</id><summary type="html">&lt;p class="first last"&gt;SymPy 1.13 and Opty 1.3 can now be used for optimal control solutions
of muscle-driven biomechanical simulation. This blog post shows of a
solution to a muscle driven cycling time trial.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;&lt;a class="reference external" href="https://github.com/sympy/sympy/releases/tag/1.13.0"&gt;SymPy 1.13&lt;/a&gt; was released on July 8, 2024. This release includes &lt;a class="reference external" href="{file}/czi-sympy-wrapup.rst"&gt;all of the
work we did under the CZI Open Source Software for Science Cycle 4 grant&lt;/a&gt;. For example, SymPy now includes new features
for modeling biomechanical multibody systems. The new features include model
construction from joints via a system manager and force actuator classes
including a musculo-tendon model. At the close of the grant period, we
demonstrated how these features can be used in the solution of biomechanical
trajectory optimization and parameter estimation optimal control problems, but
only from development branches of the various intertwined software packages.
Today, we released &lt;a class="reference external" href="https://github.com/csu-hmc/opty/releases/tag/v1.3.0"&gt;Opty 1.3&lt;/a&gt; which can now be used alongside SymPy 1.13 to solve
biomechanical optimal control problems. Opty can now handle symbolic equations
of motion that have many millions of mathematical operations and tens of
thousands of constraints and optimization variables. To help grow adoption,
we've built out a new example gallery that demonstrates how Opty can be used to
solve a variety of problems:&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;a class="reference external image-reference" href="https://opty.readthedocs.io/stable/examples/index.html"&gt;&lt;img alt="" src="https://objects-us-east-1.dream.io/mechmotum/opty-1.3-examples.png" /&gt;&lt;/a&gt;
&lt;p class="caption"&gt;Opty 1.3's new example gallery.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;One example in the gallery, the &amp;quot;&lt;a class="reference external" href="https://opty.readthedocs.io/stable/examples/plot_one_legged_time_trial.html"&gt;One-Legged Cycling Time Trial&lt;/a&gt;&amp;quot;,
shows how to find an optimal control solution of a musculo-tendon driven model
that makes use of SymPy 1.13's new biomechanics features. We developed this
example for an activity in TU Delft's 2024 Sports Engineering course to show
the students how models can be used to study how muscles play a role in optimal
performance. The example solves a minimum time cycling race using a model of a
single leg and simplified muscles that drive the leg motion to propel the
bicycle. The example in the gallery is set up with a short race distance but if
you bump the distance up to 80 meters the cyclist starts approaching terminal
velocity. Opty can find an optimal solution for the 17,000 variables in this
problem in about 10 minutes on an AMD Ryzen 5 2600X 12 core machine.&lt;/p&gt;
&lt;p&gt;This produces a reasonably realistic overall motion which can be seen in the
cadence, resulting speed, and the power to accelerate and overcome rolling and
air resistance:&lt;/p&gt;
&lt;img alt="" class="align-center" src="https://objects-us-east-1.dream.io/mechmotum/one-legged-80m-power.png" /&gt;
&lt;p&gt;There is no limit on the fatigue of the muscles so the optimizer finds a
bang-bang style coordination of the muscle excitations to power the leg and
push the muscles to their maximum force production:&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="" src="https://objects-us-east-1.dream.io/mechmotum/one-legged-80m-muscle.png" /&gt;
&lt;p class="caption"&gt;The four muscle forces, muscle lengths, and muscle excitations versus time
during the 80 meter time trial with the minimum race time shown at the top.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;This solution results in this overall pedaling motion:&lt;/p&gt;
&lt;center&gt;
  &lt;video controls&gt;
    &lt;source src="https://objects-us-east-1.dream.io/mechmotum/one-legged-80m.mp4" type="video/mp4"&gt;
  &lt;/video&gt;
&lt;/center&gt;&lt;p&gt;Our next step is to incorporate muscles in our 3D nonlinear bicycle-rider
models to enable deeper understanding of how bicycles are balanced and
controlled. Opty can quickly find optimal trajectories of the joint torque
driven model, as shown in our &lt;a class="reference external" href="https://doi.org/10.59490/660179a06bf1082286458109"&gt;BRiM paper&lt;/a&gt;:&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="" src="https://objects-us-east-1.dream.io/mechmotum/brim-paper-opty-example.png" /&gt;
&lt;p class="caption"&gt;Torque driven Opty optimal control solution for the non-linear
Carvallo-Whipple bicycle model.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Thanks to Timo, Sam, Peter, and all the SymPy developers for the contributions
that helped pull all this together! We hope that others can make use of these
models and tools for their own work.&lt;/p&gt;
</content><category term="research"></category><category term="sympy"></category><category term="czi"></category><category term="biomechanics"></category><category term="multibody dynamics"></category><category term="open source software"></category><category term="muscles"></category><category term="optimal control"></category><category term="bicycle"></category><category term="code generation"></category></entry><entry><title>Jan Heinen Interviewed on Talk that Science about Skateboard Science</title><link href="https://mechmotum.github.io/blog/skateboard-podcast.html" rel="alternate"></link><published>2024-04-23T00:00:00-07:00</published><updated>2024-04-23T00:00:00-07:00</updated><author><name>Jason K. Moore</name></author><id>tag:mechmotum.github.io,2024-04-23:/blog/skateboard-podcast.html</id><content type="html">&lt;p&gt;Past lab member, Jan Heinen, was interviewed on the podcast &amp;quot;Talk That Science&amp;quot;
about his skateboard research:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://talkthatscience.com/Skateboard-Science"&gt;https://talkthatscience.com/Skateboard-Science&lt;/a&gt;&lt;/p&gt;
&lt;iframe width="100%" height="300" scrolling="no" frameborder="no" allow="autoplay" src="https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/1802100471&amp;color=%23ff5500&amp;auto_play=false&amp;hide_related=false&amp;show_comments=true&amp;show_user=true&amp;show_reposts=false&amp;show_teaser=true&amp;visual=true"&gt;&lt;/iframe&gt;&lt;div style="font-size: 10px; color: #cccccc;line-break: anywhere;word-break: normal;overflow: hidden;white-space: nowrap;text-overflow: ellipsis; font-family: Interstate,Lucida Grande,Lucida Sans Unicode,Lucida Sans,Garuda,Verdana,Tahoma,sans-serif;font-weight: 100;"&gt;&lt;a href="https://soundcloud.com/talkthatscience" title="Talk That Science" target="_blank" style="color: #cccccc; text-decoration: none;"&gt;Talk That Science&lt;/a&gt; · &lt;a href="https://soundcloud.com/talkthatscience/skateboard-science-echobox-radio" title="Skateboard Science @Echobox Radio" target="_blank" style="color: #cccccc; text-decoration: none;"&gt;Skateboard Science @Echobox Radio&lt;/a&gt;&lt;/div&gt;</content><category term="news"></category><category term="skateboard"></category><category term="ollie"></category><category term="podcast"></category></entry><entry><title>Kirsten Dijkman Successfully Defends Her MSc Thesis</title><link href="https://mechmotum.github.io/blog/msc-graduation-kirsten-dijkman.html" rel="alternate"></link><published>2024-01-12T06:09:00-08:00</published><updated>2024-01-12T06:09:00-08:00</updated><author><name>Jason K. Moore</name></author><id>tag:mechmotum.github.io,2024-01-12:/blog/msc-graduation-kirsten-dijkman.html</id><summary type="html">&lt;table border="1" class="borderless docutils align-center" style="width: 60%"&gt;
&lt;colgroup&gt;
&lt;col width="50%" /&gt;
&lt;col width="50%" /&gt;
&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;&lt;img alt="cover" src="https://objects-us-east-1.dream.io/mechmotum/thesis-cover-dijkman.png" style="height: 400px;" /&gt;&lt;/td&gt;
&lt;td&gt;&lt;img alt="headshot" src="https://objects-us-east-1.dream.io/mechmotum/headshot-dijkman-kirsten.jpg" style="height: 400px;" /&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Kirsten Dijkman successfully defended &amp;quot;&lt;a class="reference external" href="http://resolver.tudelft.nl/uuid:7d45c36f-5df4-46bf-a526-b3f28a4a9fab"&gt;Impact of bicycle tire parameters on
the total rolling losses&lt;/a&gt;&amp;quot; on
January 11, 2024. Kirsten executed three experiments to investigate all aspects
of forward motion energy losses due to the bicycle-rider system rolling on
different road surfaces. She first characterized the tire contact patch for a …&lt;/p&gt;</summary><content type="html">&lt;table border="1" class="borderless docutils align-center" style="width: 60%"&gt;
&lt;colgroup&gt;
&lt;col width="50%" /&gt;
&lt;col width="50%" /&gt;
&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;&lt;img alt="cover" src="https://objects-us-east-1.dream.io/mechmotum/thesis-cover-dijkman.png" style="height: 400px;" /&gt;&lt;/td&gt;
&lt;td&gt;&lt;img alt="headshot" src="https://objects-us-east-1.dream.io/mechmotum/headshot-dijkman-kirsten.jpg" style="height: 400px;" /&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Kirsten Dijkman successfully defended &amp;quot;&lt;a class="reference external" href="http://resolver.tudelft.nl/uuid:7d45c36f-5df4-46bf-a526-b3f28a4a9fab"&gt;Impact of bicycle tire parameters on
the total rolling losses&lt;/a&gt;&amp;quot; on
January 11, 2024. Kirsten executed three experiments to investigate all aspects
of forward motion energy losses due to the bicycle-rider system rolling on
different road surfaces. She first characterized the tire contact patch for a
set of modern tubular and tubeless racing tires, finding that tire carcass
diameter had no effect on contact patch length and that inflation pressure (in
the range tested) had no effect on contact patch width, but tire type and
vertical load all correlate to contact patch dimensions. She then tested these
tires for rolling resistance on a traditional drum testing machine and found
that all testing variables (tire dimensions, pressure, load, and rolling speed)
predict rolling resistance. Tubeless tires have more rolling resistance than
tubular and rolling resistance decreases with increasing inflation pressure and
decreasing speed. In the third experiment, Kirsten developed a
first-of-its-kind trailer to create a windless environment for a cyclist to
travel over any road surface which we named &amp;quot;De Veeger&amp;quot;.  She then measured
rider input power over smooth asphalt and bumpier bricks to characterize the
total rolling losses due to both the tire properties and the vibrational
damping losses in the bicycle, suspension, and rider. This revealed a clear
dependence on road surface type and travel speed: bricks and higher speeds
causing more rolling energy loss. However, the input power estimates were not
precise enough to show any effect of tire properties on the total rolling
losses, which leaves room for future improvements to the measurement system.&lt;/p&gt;
&lt;center&gt;
&lt;iframe width="560" height="315"
src="https://www.youtube.com/embed/685I6pjQcfw?si=-uKNN13BkDehnaQ6"
title="YouTube video player" frameborder="0" allow="accelerometer; autoplay;
clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share"
allowfullscreen&gt;&lt;/iframe&gt;
&lt;/center&gt;&lt;p&gt;Kirsten was co-supervised by Andrew Dressel (TU Delft &amp;amp; University of
Wisconsin, Milwaukee), Harm Ubbens (Team DSM), Piet Rooijakkers (Team DSM), and
Jason K. Moore (TU Delft). Thanks to Jan van Frankenhuyzen, the ME workshop,
and Dijkman Carbaat Bouw for all the help. Everyone at the bicycle lab is very
proud of Kirsten and wishes her the best in her next adventures.&lt;/p&gt;
</content><category term="news"></category><category term="bicycle"></category><category term="engineering"></category><category term="sports"></category><category term="tires"></category><category term="rolling resistance"></category></entry><entry><title>Marten Haitjema Successfully Defends His MSc Thesis</title><link href="https://mechmotum.github.io/blog/marten-haitjema-graduates.html" rel="alternate"></link><published>2024-01-09T05:06:00-08:00</published><updated>2024-01-09T05:06:00-08:00</updated><author><name>Jason K. Moore</name></author><id>tag:mechmotum.github.io,2024-01-09:/blog/marten-haitjema-graduates.html</id><summary type="html">&lt;table border="1" class="borderless docutils align-center" style="width: 60%"&gt;
&lt;colgroup&gt;
&lt;col width="50%" /&gt;
&lt;col width="50%" /&gt;
&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;&lt;img alt="cover" src="https://objects-us-east-1.dream.io/mechmotum/thesis-cover-haitjema.png" style="height: 400px;" /&gt;&lt;/td&gt;
&lt;td&gt;&lt;img alt="headshot" src="https://objects-us-east-1.dream.io/mechmotum/headshot-haitjema-marten.png" style="height: 400px;" /&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Marten Haitjema successfully defended &amp;quot;&lt;a class="reference external" href="http://resolver.tudelft.nl/uuid:b7a3ff8d-de2b-47ee-ac05-61c34c1eac23"&gt;Estimating fall probability in cycling&lt;/a&gt;&amp;quot; on
December 14, 2023. Marten identified the linear dynamics of a robotically
balance assisted bicycle showing that the lean rate feedback controller can
stabilize the bicycle at very low speeds and that the time constant of the
instability is significantly reduced …&lt;/p&gt;</summary><content type="html">&lt;table border="1" class="borderless docutils align-center" style="width: 60%"&gt;
&lt;colgroup&gt;
&lt;col width="50%" /&gt;
&lt;col width="50%" /&gt;
&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;&lt;img alt="cover" src="https://objects-us-east-1.dream.io/mechmotum/thesis-cover-haitjema.png" style="height: 400px;" /&gt;&lt;/td&gt;
&lt;td&gt;&lt;img alt="headshot" src="https://objects-us-east-1.dream.io/mechmotum/headshot-haitjema-marten.png" style="height: 400px;" /&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Marten Haitjema successfully defended &amp;quot;&lt;a class="reference external" href="http://resolver.tudelft.nl/uuid:b7a3ff8d-de2b-47ee-ac05-61c34c1eac23"&gt;Estimating fall probability in cycling&lt;/a&gt;&amp;quot; on
December 14, 2023. Marten identified the linear dynamics of a robotically
balance assisted bicycle showing that the lean rate feedback controller can
stabilize the bicycle at very low speeds and that the time constant of the
instability is significantly reduced when there is a rider onboard. He then
executed an experiment to determine the probability a rider will fall when
perturbed with different magnitude forces at the handlebar. He showed that the
perturbation magnitude and number of prior perturbations were the most
important factors in determining whether one would fall. Lastly, he used these
probabilities to predict a likely reduction in fall probability when the
balance assist system is activated.&lt;/p&gt;
&lt;p&gt;Marten was co-supervised by Leila Alizadehsaravi (TU Delft) and Jason K. Moore
(TU Delft) with assistance from Maarten Pelgrim (Gazelle), Sierd Heida
(Gazelle), Felix Dauer (Bosch), and David Gabriel (Bosch). Everyone at the
bicycle lab is very proud of Marten and wishes him the best in his next
adventures.&lt;/p&gt;
</content><category term="news"></category><category term="bicycle"></category><category term="engineering"></category><category term="perturbation"></category><category term="fall"></category></entry><entry><title>Postdoc Opening: Modeling bicycle behavior from visual stimulus to neuromuscular control ability</title><link href="https://mechmotum.github.io/blog/postdoc-bicycle-lidar-ad.html" rel="alternate"></link><published>2023-12-14T00:00:00-08:00</published><updated>2023-12-14T00:00:00-08:00</updated><author><name>Jason K. Moore</name></author><id>tag:mechmotum.github.io,2023-12-14:/blog/postdoc-bicycle-lidar-ad.html</id><summary type="html">&lt;div class="section" id="description"&gt;
&lt;h2&gt;Description&lt;/h2&gt;
&lt;p&gt;TU Delft is seeking a postdoctoral researcher for a 1 year equivalent contract
(full or part time). The researcher will develop and execute an engineering
research project with the title &amp;quot;Modeling bicycle behavior from visual stimulus
to neuromuscular control ability&amp;quot;. This project is funded by a TU Delft
internal …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;div class="section" id="description"&gt;
&lt;h2&gt;Description&lt;/h2&gt;
&lt;p&gt;TU Delft is seeking a postdoctoral researcher for a 1 year equivalent contract
(full or part time). The researcher will develop and execute an engineering
research project with the title &amp;quot;Modeling bicycle behavior from visual stimulus
to neuromuscular control ability&amp;quot;. This project is funded by a TU Delft
internal Cohesion grant and is a collaboration between the Intelligent Vehicles
section and the Bicycle Laboratorium, both part of the Mechanical Engineering
faculty. The purpose of the project is to use Computer Vision and bicycle
dynamics models to accurately model cyclist behavior to improve bicycle and
road designs, as well as safety in sustainable transportation.&lt;/p&gt;
&lt;p&gt;Accurate motion data on cyclists is scarce. Existing data has been largely
collected via counting at specific locations or GPS. However, the accuracy of
GPS is limited and there is no data that can track bicyclists with centimeter
accuracy in urban environments. We recently developed a bicycle equipped with
the latest automotive-grade sensors. By using visual odometry from IMUs, lidar
and cameras, we are able to drastically improve the localization performance
over GPS. We are further developing a perception system to detect other traffic
participants from the bicycle.&lt;/p&gt;
&lt;p&gt;In the next stage you will equip cyclists with eye tracking devices to capture
their gaze direction during rides in crowded urban environments (e.g. the Delft
campus). The collected data will serve as input to a motion planner and mapped
to neuromuscular balance ability, i.e. reaction time and sensing quality,
needed to safely control the bicycle. By modeling how gaze influences decision
making and how vision interacts with vestibular and proprioceptive sensing to
maintain balance in safety critical maneuvers, you will gain crucial insights
into how individuals perceive risks such as stop signs and crossing
pedestrians, and the corresponding actions they undertake, such as braking and
counter-steering.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="requirements"&gt;
&lt;h2&gt;Requirements&lt;/h2&gt;
&lt;p&gt;You should have:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;PhD in an engineering discipline by the start date of the position -
Experience with machine learning for computer vision&lt;/li&gt;
&lt;li&gt;Strong scientific programming skills&lt;/li&gt;
&lt;li&gt;Strong written and oral communication skills in English&lt;/li&gt;
&lt;li&gt;The ability to act independently as well as to collaborate effectively with
members of a larger team&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The following aspects will help you stand out:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;A strong academic track record with publications in topics relevant to this
position&lt;/li&gt;
&lt;li&gt;Knowledge of automated driving from perception to planning&lt;/li&gt;
&lt;li&gt;Specific knowledge of deep learning and data efficient methods&lt;/li&gt;
&lt;li&gt;Knowledge of human-machine control and two-wheeler vehicle dynamics&lt;/li&gt;
&lt;li&gt;Knowledge of Python and PyTorch&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Keep in mind that this describes the background we imagine would best fit the
role. Even if you do not meet all of the requirements and feel that you are up
for the task, we absolutely want to see your application!&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="additional-information"&gt;
&lt;h2&gt;Additional Information&lt;/h2&gt;
&lt;p&gt;In this role you will be embedded with the Intelligent Vehicles section in the
Cognitive Robotics Department and also a member of the Bicycle Lab in the
Biomechanical Engineering Department. Assistant Professors Holger Caesar and
Jason K. Moore will be your supervisors. For more information about this
vacancy, please contact Holger Caesar (&lt;a class="reference external" href="mailto:h.caesar&amp;#64;tudelft.nl"&gt;h.caesar&amp;#64;tudelft.nl&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;For information about the selection procedure, please contact the HR Advisor at
&lt;a class="reference external" href="mailto:application-3mE&amp;#64;tudelft.nl"&gt;application-3mE&amp;#64;tudelft.nl&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="how-to-apply"&gt;
&lt;h2&gt;How to Apply&lt;/h2&gt;
&lt;p&gt;Apply via the TU Delft website application portal linked below. We will not
process applications sent by email and/or post.&lt;/p&gt;
&lt;p&gt;Visit TU Delft's website to find more employment details and apply for the
position (vacancy number: TUD04759):&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://www.tudelft.nl/over-tu-delft/werken-bij-tu-delft/vacatures/details/?nPostingId=5301&amp;amp;nPostingTargetId=15445&amp;amp;id=QEZFK026203F3VBQBLO6G68W9&amp;amp;LG=UK&amp;amp;languageSelect=UK&amp;amp;mask=external"&gt;https://www.tudelft.nl/over-tu-delft/werken-bij-tu-delft/vacatures/details/?nPostingId=5301&amp;amp;nPostingTargetId=15445&amp;amp;id=QEZFK026203F3VBQBLO6G68W9&amp;amp;LG=UK&amp;amp;languageSelect=UK&amp;amp;mask=external&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Apply by &lt;strong&gt;January 31, 2024&lt;/strong&gt; and include:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;a letter of motivation explaining why you are the right candidate for this job,&lt;/li&gt;
&lt;li&gt;a detailed CV,&lt;/li&gt;
&lt;li&gt;a copy of your diploma's,&lt;/li&gt;
&lt;li&gt;the names and contact addresses of two or three references,&lt;/li&gt;
&lt;li&gt;any other information that might be relevant to your application.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Note that the available position will be filled as soon as possible (i.e. once
a suitable candidate is found).&lt;/p&gt;
&lt;/div&gt;
</content><category term="jobs"></category><category term="bicycle"></category><category term="postdoc"></category><category term="engineering"></category></entry><entry><title>SymPy CZI Grant Code Generation &amp; Biomechanics Outcomes</title><link href="https://mechmotum.github.io/blog/czi-sympy-wrapup.html" rel="alternate"></link><published>2023-10-27T00:00:00-07:00</published><updated>2023-10-27T00:00:00-07:00</updated><author><name>Jason K. Moore</name></author><id>tag:mechmotum.github.io,2023-10-27:/blog/czi-sympy-wrapup.html</id><summary type="html">&lt;p class="first last"&gt;Summary of the work performed under the Chan-Zuckerberg Foundation
Open Source Software for Science Cycle 4 grant awarded to Sympy and
performed by Delft University of Technology. We developed new
biomechanics capabilities in SymPy and improved code generation
performance for large mathematical expressions.&lt;/p&gt;
</summary><content type="html">&lt;table border="1" class="borderless docutils align-center" style="width: 60%"&gt;
&lt;colgroup&gt;
&lt;col width="50%" /&gt;
&lt;col width="50%" /&gt;
&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;&lt;img alt="sympy-logo" src="https://docs.sympy.org/latest/_images/sympy-500px.png" style="height: 200px;" /&gt;&lt;/td&gt;
&lt;td&gt;&lt;img alt="czi-logo" src="https://objects-us-east-1.dream.io/mechmotum/czi-logo.png" style="height: 200px;" /&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class="contents floatcon local topic" id="contents"&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference internal" href="#introduction" id="toc-entry-1"&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#general-improvements-to-sympy-mechanics" id="toc-entry-2"&gt;General Improvements to SymPy Mechanics&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="#joints-package" id="toc-entry-3"&gt;Joints Package&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#symbolic-solutions-to-linear-equations" id="toc-entry-4"&gt;Symbolic Solutions to Linear Equations&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="#choice-of-generalized-coordinates-and-speeds" id="toc-entry-5"&gt;1. Choice of Generalized Coordinates and Speeds&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#alternative-symbolic-solvers" id="toc-entry-6"&gt;2. Alternative Symbolic Solvers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#division-free-linear-solves" id="toc-entry-7"&gt;3. Division-free Linear Solves&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#delayed-numerical-solves" id="toc-entry-8"&gt;4. Delayed Numerical Solves&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#inertia-loads-actuators" id="toc-entry-9"&gt;Inertia, Loads, Actuators&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#system-class" id="toc-entry-10"&gt;System Class&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#introducing-sympy-biomechanics" id="toc-entry-11"&gt;Introducing SymPy Biomechanics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#code-generation-improvements" id="toc-entry-12"&gt;Code Generation Improvements&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#modeling-and-optimal-control-uses" id="toc-entry-13"&gt;Modeling and Optimal Control Uses&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="#optimal-skateboard-ollie" id="toc-entry-14"&gt;Optimal Skateboard Ollie&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#brim" id="toc-entry-15"&gt;BRiM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#optimal-bicycle-rider-trajectories" id="toc-entry-16"&gt;Optimal Bicycle-Rider Trajectories&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#conclusion" id="toc-entry-17"&gt;Conclusion&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="#lessons-learned" id="toc-entry-18"&gt;Lessons Learned&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#future-plans" id="toc-entry-19"&gt;Future Plans&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#work-summary" id="toc-entry-20"&gt;Work Summary&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#references" id="toc-entry-21"&gt;References&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="introduction"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#toc-entry-1"&gt;Introduction&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;We were awarded a &lt;a class="reference external" href="https://doi.org/10.6084/m9.figshare.16590053.v1"&gt;two year grant&lt;/a&gt; from CZI to improve &lt;a class="reference external" href="https://www.sympy.org"&gt;SymPy&lt;/a&gt;. There were
three work packages led by each of the three co-principal investigators:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Improve SymPy's Documentation (Aaron Meuer, Quantsight)&lt;/li&gt;
&lt;li&gt;Improve SymPy's Performance (Oscar Benjamin, University of Bristol)&lt;/li&gt;
&lt;li&gt;Improve SymPy's Code Generation for Biomechanical Modeling (Jason K. Moore,
Delft University of Technology)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We were in charge of the last work package and hired Dr. Sam Brockie to work on
the project as a postdoctoral researcher. Jan Heinen and Timo Stienstra worked
on the project through their TU Delft MSc degrees under the supervision of Sam
and Jason.&lt;/p&gt;
&lt;p&gt;Our overarching goal is to use SymPy to generate symbolic dynamical models of
biomechanical systems, i.e. multibody systems actuated by muscles. This
involves formulating the Newton-Euler equations of motion, possibly with
additional kinematic constraints, and the differential equations that describe
the relationship between neurological excitation and generated muscles forces.&lt;/p&gt;
&lt;p&gt;We selected a complex human-machine system as a benchmark problem to motivate
our work: the bicycle and its rider. The nonlinear and linear equations of
motion of a riderless bicycle have traditionally been a very challenging system
to derive correctly in full symbolic form (see &lt;a class="citation-reference" href="#basumandal2007" id="citation-reference-1"&gt;[BasuMandal2007]&lt;/a&gt; and
&lt;a class="citation-reference" href="#meijaard2007" id="citation-reference-2"&gt;[Meijaard2007]&lt;/a&gt; for background). Including a model of a human rider with
muscle-driven joints increases the model's complexity even further. This model
is made up of millions of arithmetic and transcendental operations, making it a
challenging system to differentiate and evaluate efficiently. We want SymPy to
be able to handle models of this complexity with ease. To test SymPy's ability
to correctly derive, differentiate, and evaluate the bicycle-rider's governing
equations, we choose to formulate and solve a &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Trajectory_optimization"&gt;trajectory optimization&lt;/a&gt;
problem via &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Collocation_method"&gt;direct collocation&lt;/a&gt;. We knew that this bicycle-rider optimal
control problem would test SymPy's limits, forcing us to make significant
improvements to SymPy's code generation features. To do this, we worked on
numerous areas in SymPy and downstream packages to reach this goal.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="general-improvements-to-sympy-mechanics"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#toc-entry-2"&gt;General Improvements to SymPy Mechanics&lt;/a&gt;&lt;/h2&gt;
&lt;div class="section" id="joints-package"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#toc-entry-3"&gt;Joints Package&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Timo Stienstra began working on this project through a 2022 Google Summer of
Code internship where he improved the SymPy Mechanics &lt;a class="reference external" href="https://docs.sympy.org/latest/modules/physics/mechanics/joints.html"&gt;joints modules&lt;/a&gt; with
documentation improvements, by reworking the fundamental definition of a joint,
and adding new cylindrical, planar, and spherical joints. These were key early
updates to enable the joints package's use in constructing a bicycle-rider
model. See the details of Timo's work in his &lt;a class="reference external" href="https://github.com/sympy/sympy/wiki/GSoC-2022-Report-Timo-Stienstra-:-Enhancing-the-Joints-Framework"&gt;GSoC Report&lt;/a&gt;. This project led
Timo to do a TU Delft Biomechanical Design MSc project on bicycle-rider
modeling using SymPy.&lt;/p&gt;
&lt;table border="1" class="borderless docutils align-center" style="width: 100%"&gt;
&lt;caption&gt;Figure 1: Old and new joint types with new explanatory figures
can be found in the SymPy documentation.&lt;/caption&gt;
&lt;colgroup&gt;
&lt;col width="50%" /&gt;
&lt;col width="50%" /&gt;
&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;&lt;img alt="joint1" src="https://objects-us-east-1.dream.io/mechmotum/PinJoint.png" style="height: 180px;" /&gt;&lt;/td&gt;
&lt;td&gt;&lt;img alt="joint2" src="https://objects-us-east-1.dream.io/mechmotum/PrismaticJoint.png" style="height: 180px;" /&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;img alt="joint3" src="https://objects-us-east-1.dream.io/mechmotum/CylindricalJoint.png" style="height: 180px;" /&gt;&lt;/td&gt;
&lt;td&gt;&lt;img alt="joint4" src="https://objects-us-east-1.dream.io/mechmotum/PlanarJoint.png" style="height: 180px;" /&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;img alt="joint5" src="https://objects-us-east-1.dream.io/mechmotum/SphericalJoint.png" style="height: 180px;" /&gt;&lt;/td&gt;
&lt;td&gt;&lt;img alt="joint6" src="https://objects-us-east-1.dream.io/mechmotum/WeldJoint.png" style="height: 180px;" /&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class="section" id="symbolic-solutions-to-linear-equations"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#toc-entry-4"&gt;Symbolic Solutions to Linear Equations&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Kane's Method relies on solving three sets of linear equations:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;putting the kinematical differential equations in explicit form
&lt;span class="math"&gt;\(\dot{\mathbf{q}} = \mathbf{M}_k^{-1}\left(\mathbf{u} +
\mathbf{f}_k\right)\)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;putting the dynamical differential equations in explicit form
&lt;span class="math"&gt;\(\dot{\mathbf{u}} = \mathbf{M}_d^{-1}\mathbf{f}_d\)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;solving the dependent generalized speeds in terms of the independent
generalized speeds
&lt;span class="math"&gt;\(\mathbf{u}_r = \mathbf{A}_r^{-1}(\mathbf{A}_s\mathbf{u}_s + \mathbf{f}_{rs})\)&lt;/span&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If these equations are symbolic, it is mostly impossible to determine if an
entry is zero when pivoting in &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Gaussian_elimination"&gt;Gaussian elimination&lt;/a&gt; making the solutions
susceptible to divide-by-zero operations for ranges of numerical values for the
variables involved.&lt;/p&gt;
&lt;p&gt;There are four ways, it seems, to deal with this:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;select the generalized coordinates, generalized speeds, and constants such
that divide-by-zero cannot occur for the numerical values of interest&lt;/li&gt;
&lt;li&gt;select symbolic Gaussian elimination algorithms that do not put the
solutions in a form that has divide-by-zero for the numerical values of
interest&lt;/li&gt;
&lt;li&gt;use a zero-division free linear solve algorithm&lt;/li&gt;
&lt;li&gt;defer the linear solves to numerical algorithms&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="section" id="choice-of-generalized-coordinates-and-speeds"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="#toc-entry-5"&gt;1. Choice of Generalized Coordinates and Speeds&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;The choice of generalized coordinates and generalized speeds changes which
entries in the linear coefficient matrix can be zero for specific values of the
coordinates and speeds. It may be possible to avoid divide-by-zero with careful
selection of the variables when defining the kinematics of the specific
problem. But this will require unique solutions for every model.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="alternative-symbolic-solvers"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="#toc-entry-6"&gt;2. Alternative Symbolic Solvers&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;In 2014, we switched to using &lt;tt class="docutils literal"&gt;LUsolve()&lt;/tt&gt; for all of the linear solves in
SymPy Mechanics in &lt;a class="reference external" href="https://github.com/sympy/sympy/pull/7581"&gt;PR 7581&lt;/a&gt;, which resulted in an unnoticed regression of
divide-by-zero issues for complex problems. This change broke the crucial
&lt;a class="reference external" href="https://github.com/sympy/sympy/blob/master/sympy/physics/mechanics/tests/test_kane3.py"&gt;test_kane3.py&lt;/a&gt; as well as the corresponding &lt;a class="reference external" href="https://docs.sympy.org/latest/modules/physics/mechanics/examples/bicycle_example.html"&gt;documentation page&lt;/a&gt;
that solved the linear Carvallo-Whipple bicycle model to a machine precision
match against published benchmarks. This bug has hounded us for 9 years (see
&lt;a class="reference external" href="https://github.com/pydy/pydy/pull/122"&gt;https://github.com/pydy/pydy/pull/122&lt;/a&gt; and
&lt;a class="reference external" href="https://github.com/sympy/sympy/issues/9641"&gt;https://github.com/sympy/sympy/issues/9641&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Timo discovered the fundamental divide-by-zero issue after &lt;a class="reference external" href="https://github.com/sympy/sympy/issues/24780"&gt;much sleuthing and
discussion&lt;/a&gt;. He then introduced a new linear solver that uses &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Cramer%27s_rule"&gt;Cramer's
rule&lt;/a&gt;, which can eliminate divide-by-zero operations in many cases. We then
added support to &lt;tt class="docutils literal"&gt;KanesMethod()&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;Linearizer()&lt;/tt&gt; for using linear
solvers other than &lt;tt class="docutils literal"&gt;LUSolve()&lt;/tt&gt; including the new Cramer's rule-based solver
as an option. With this we closed the &lt;a class="reference external" href="https://github.com/sympy/sympy/issues/9641"&gt;9 year old bug&lt;/a&gt; and allowed our base
bicycle model to build both in non-linear and linear forms. The new Cramer
solve method for matrices was introduced in
&lt;a class="reference external" href="https://github.com/sympy/sympy/pull/25179"&gt;https://github.com/sympy/sympy/pull/25179&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="division-free-linear-solves"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="#toc-entry-7"&gt;3. Division-free Linear Solves&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;There are division-free algorithms that can be used in solving linear systems,
but the complexity of the resulting equations grows considerably, for example
see &lt;a class="citation-reference" href="#bird2011" id="citation-reference-3"&gt;[Bird2011]&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="delayed-numerical-solves"&gt;
&lt;h4&gt;&lt;a class="toc-backref" href="#toc-entry-8"&gt;4. Delayed Numerical Solves&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;It would be helpful if we could delay linear solves to the numerical
evaluation, so that pivot points can managed by &lt;a class="reference external" href="https://www.netlib.org/lapack/"&gt;LAPACK&lt;/a&gt;'s solvers. To do so, we
would need to be able to use the results of a linear solve like any other
symbol without symbolically evaluating the linear solve operation. The
following SymPy code almost works as desired:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sympy&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;MatrixSymbol&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Inverse&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lambdify&lt;/span&gt;

&lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MatrixSymbol&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;A&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MatrixSymbol&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Inverse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;@&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;
&lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;eval_result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;lambdify&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The above works but the inverse and matrix multiplication are evaluated
symbolically when called, as can be seen in the generated function:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;eval_result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="gp"&gt;...&lt;/span&gt;
&lt;span class="go"&gt;Source code:&lt;/span&gt;

&lt;span class="go"&gt;def _lambdifygenerated(A, b):&lt;/span&gt;
&lt;span class="go"&gt;    return A[0, 0]*b[1, 0]/(A[0, 0]*A[1, 1] - A[0, 1]*A[1, 0]) - A[0, 1]*b[1, 0]/(A[0, 0]*A[1, 1] - A[0, 1]*A[1, 0]) - A[1, 0]*b[0, 0]/(A[0, 0]*A[1, 1] - A[0, 1]*A[1, 0]) + A[1, 1]*b[0, 0]/(A[0, 0]*A[1, 1] - A[0, 1]*A[1, 0])&lt;/span&gt;
&lt;span class="gp"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Instead, we'd like &lt;tt class="docutils literal"&gt;lambdify()&lt;/tt&gt; to generate code that looks more like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;eval_result&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
   &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;numpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;linalg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;solve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;which allows NumPy (or actually LAPACK) to use the appropriate algorithm given
the numerical values used for A and b. The expression &lt;tt class="docutils literal"&gt;Inverse(A) &amp;#64; b&lt;/tt&gt; would
need to remain unevaluated for code generation to properly handle it. In SymPy,
there is a &lt;tt class="docutils literal"&gt;MatrixSolve()&lt;/tt&gt; code generation node that acts as an unevaluated
linear equation solver and works as desired with &lt;tt class="docutils literal"&gt;lambdify()&lt;/tt&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sympy.codegen.matrix_nodes&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;MatrixSolve&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MatrixSolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;eval_x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;lambdify&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;eval_x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="gp"&gt;...&lt;/span&gt;
&lt;span class="go"&gt;Source code:&lt;/span&gt;

&lt;span class="go"&gt;def _lambdifygenerated(A, b):&lt;/span&gt;
&lt;span class="go"&gt;    return solve(A, b)&lt;/span&gt;
&lt;span class="gp"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;But &lt;tt class="docutils literal"&gt;MatrixSolve()&lt;/tt&gt; does not support indexing the solution:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="go"&gt;---------------------------------------------------------------------------&lt;/span&gt;
&lt;span class="go"&gt;NotImplementedError                       Traceback (most recent call last)&lt;/span&gt;
&lt;span class="go"&gt;Cell In[8], line 1&lt;/span&gt;
&lt;span class="go"&gt;----&amp;gt; 1 result = x[0, 0] + x[1, 0]&lt;/span&gt;

&lt;span class="go"&gt;File ~/miniconda/lib/python3.9/site-packages/sympy/matrices/expressions/matexpr.py:300, in MatrixExpr.__getitem__(self, key)&lt;/span&gt;
&lt;span class="go"&gt;    298 i, j = _sympify(i), _sympify(j)&lt;/span&gt;
&lt;span class="go"&gt;    299 if self.valid_index(i, j) != False:&lt;/span&gt;
&lt;span class="go"&gt;--&amp;gt; 300     return self._entry(i, j)&lt;/span&gt;
&lt;span class="go"&gt;    301 else:&lt;/span&gt;
&lt;span class="go"&gt;    302     raise IndexError(&amp;quot;Invalid indices (%s, %s)&amp;quot; % (i, j))&lt;/span&gt;

&lt;span class="go"&gt;File ~/miniconda/lib/python3.9/site-packages/sympy/matrices/expressions/matexpr.py:243, in MatrixExpr._entry(self, i, j, **kwargs)&lt;/span&gt;
&lt;span class="go"&gt;    242 def _entry(self, i, j, **kwargs):&lt;/span&gt;
&lt;span class="go"&gt;--&amp;gt; 243     raise NotImplementedError(&lt;/span&gt;
&lt;span class="go"&gt;    244         &amp;quot;Indexing not implemented for %s&amp;quot; % self.__class__.__name__)&lt;/span&gt;

&lt;span class="go"&gt;NotImplementedError: Indexing not implemented for MatrixSolve&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Timo has an open pull request that uses &lt;tt class="docutils literal"&gt;BlockMatrix()&lt;/tt&gt; with
&lt;tt class="docutils literal"&gt;MatrixSolve()&lt;/tt&gt; for the solution of dependent speeds in &lt;tt class="docutils literal"&gt;KanesMethod&lt;/tt&gt;, that
can at least give this delayed solve with &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;lambdify(modules='NumPy')&lt;/span&gt;&lt;/tt&gt;, see
&lt;a class="reference external" href="https://github.com/sympy/sympy/pull/24916"&gt;https://github.com/sympy/sympy/pull/24916&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="inertia-loads-actuators"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#toc-entry-9"&gt;Inertia, Loads, Actuators&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;We introduced three new helper classes to extend the functionality of inertia
and loads beyond that of simply dyadics and vectors: &lt;tt class="docutils literal"&gt;Inertia()&lt;/tt&gt;,
&lt;tt class="docutils literal"&gt;Force()&lt;/tt&gt;, and &lt;tt class="docutils literal"&gt;Torque()&lt;/tt&gt;. The inertia object lets you associate a dyadic
with a point, to completely define inertia for a rigid body, particle, or
collection of them. Force and Torque are named tuples that associate a vector
and point and a vector and a frame, respectively.&lt;/p&gt;
&lt;p&gt;We have introduced an &lt;a class="reference external" href="https://docs.sympy.org/latest/modules/physics/mechanics/api/actuator.html"&gt;actuator&lt;/a&gt; module that has classes that describe the
equal and opposite pair of forces or torques and force actuators can operate
along a pathway, generating resultant forces on points that lie along the
pathway. We included a linear spring and damper as example actuators. The
pathways are located in the new &lt;a class="reference external" href="https://docs.sympy.org/latest/modules/physics/mechanics/api/pathway.html"&gt;pathway&lt;/a&gt; module.&lt;/p&gt;
&lt;p&gt;These new objects provide core building blocks for developing musculotendon
actuators and managing a full multibody system.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="system-class"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#toc-entry-10"&gt;System Class&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Timo developed a new &lt;a class="reference external" href="https://docs.sympy.org/latest/modules/physics/mechanics/api/system.html#sympy.physics.mechanics._system.System"&gt;System()&lt;/a&gt; class that manages all the information about a
multibody system (coordinates, joints, bodies, constraints, etc.) and can
generate the equations of motion from the high level description of the system
without having to manually write the mathematical equations. This approach
generally reduces the amount of code needed to generate the equations for
complex systems. See the &lt;a class="reference external" href="https://docs.sympy.org/latest/modules/physics/mechanics/examples/four_bar_linkage_example.html"&gt;Four-bar Linkage&lt;/a&gt; example to get an idea of how it
works.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="introducing-sympy-biomechanics"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#toc-entry-11"&gt;Introducing SymPy Biomechanics&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;We have developed a substantial new sub-package, &lt;a class="reference external" href="https://docs.sympy.org/latest/modules/physics/biomechanics/index.html"&gt;sympy.physics.biomechanics&lt;/a&gt;,
that enables including musculotendon force actuators in multibody dynamics
models created with &lt;tt class="docutils literal"&gt;sympy.physics.mechanics&lt;/tt&gt;. &lt;tt class="docutils literal"&gt;biomechanics&lt;/tt&gt; contains
these primary modules:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;curve.py&lt;/tt&gt;: contains classes that represent mathematical functional
relationships between the time-varying muscle-tendon length, velocity, and
force&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;activation.py&lt;/tt&gt;: contains classes that manage the excitation to activation
dynamics&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;musculotendon.py&lt;/tt&gt;: contains classes that represent complete musculotendon
models with one reference implementation from &lt;a class="citation-reference" href="#degroote2016" id="citation-reference-4"&gt;[DeGroote2016]&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A full explanation of this package and the modules can be found in the new
&lt;a class="reference external" href="https://docs.sympy.org/latest/tutorials/physics/biomechanics/biomechanics.html"&gt;Introduction to Biomechanical Modeling&lt;/a&gt;
tutorial. We demonstrate the package on a non-trivial biomechanical system in
the new &lt;a class="reference external" href="https://docs.sympy.org/latest/tutorials/physics/biomechanics/biomechanical-model-example.html"&gt;Biomechanical Model Example&lt;/a&gt;
tutorial.&lt;/p&gt;
&lt;table border="1" class="borderless docutils align-center" style="width: 100%"&gt;
&lt;caption&gt;Figure 2: On the left, the muscle(red)-driven arm (black C and
D) pushing and pulling a lever taken from the new tutorial. On the right,
are simulation results from the model with a commanded muscle excitation.&lt;/caption&gt;
&lt;colgroup&gt;
&lt;col width="50%" /&gt;
&lt;col width="50%" /&gt;
&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;&lt;img alt="biomechanics-steerer" src="https://objects-us-east-1.dream.io/mechmotum/biomechanics-steerer.png" style="width: 100%;" /&gt;&lt;/td&gt;
&lt;td&gt;&lt;img alt="biomechanics-steerer-results" src="https://docs.sympy.org/latest/_images/biomechanical-model-example-38.png" style="width: 100%;" /&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class="section" id="code-generation-improvements"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#toc-entry-12"&gt;Code Generation Improvements&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The function &lt;a class="reference external" href="https://docs.sympy.org/latest/modules/utilities/lambdify.html#sympy.utilities.lambdify.lambdify"&gt;lambdify()&lt;/a&gt; is the primary interface for converting SymPy
expressions into NumPy-powered Python functions for numerical evaluation.
&lt;tt class="docutils literal"&gt;lambdify()&lt;/tt&gt; relies on SymPy's code generation to generate the appropriate
Python code. &lt;tt class="docutils literal"&gt;lambdify()&lt;/tt&gt; has not been able to handle large mechanics models
in the past. We proposed adding common sub-expression elimination (CSE) support
to help with that.  Support for the &lt;a class="reference external" href="https://docs.sympy.org/latest/modules/simplify/simplify.html#sympy.simplify.cse_main.cse"&gt;cse()&lt;/a&gt; function was added to
&lt;tt class="docutils literal"&gt;lambdify()&lt;/tt&gt; just before we started the CZI work in
&lt;a class="reference external" href="https://github.com/sympy/sympy/pull/21546"&gt;https://github.com/sympy/sympy/pull/21546&lt;/a&gt;. Here is an example that demonstrates
some of the speed improvements:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sympy&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;count_ops&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lambdify&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sympy.physics.mechanics&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;find_dynamicsymbols&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dynamicsymbols&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sympy.physics.mechanics.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;n_link_pendulum_on_cart&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;np&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Generating the equations of motion with &lt;tt class="docutils literal"&gt;KanesMethod&lt;/tt&gt; will be faster for some
models in the next release of SymPy due to &lt;a class="reference external" href="https://github.com/sympy/sympy/pull/24792"&gt;Pull Request 24792&lt;/a&gt;. This shows the speed in SymPy
1.11.1:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;In [1]: %time kane = n_link_pendulum_on_cart(n=14)
CPU times: user 7.45 s, sys: 3.69 ms, total: 7.46 s
Wall time: 7.47 s
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and the same in the tip of the master branch (1.13.dev0):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;In [1]: %time kane = n_link_pendulum_on_cart(n=14)
CPU times: user 4.85 s, sys: 3.81 ms, total: 4.85 s
Wall time: 4.85 s
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;large_expr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;kane&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mass_matrix_full&lt;/span&gt; &lt;span class="o"&gt;@&lt;/span&gt; &lt;span class="n"&gt;kane&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;forcing_full&lt;/span&gt;
&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;find_dynamicsymbols&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;large_expr&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;large_expr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;free_symbols&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dynamicsymbols&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;x_vals&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;p_vals&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;These expressions have almost 300 thousand operations:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;In [1]: count_ops(large_expr)
Out[1]: 282836
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In SymPy 1.12, lambdifying large expressions will take at least half the time
as prior versions because there is wasted time printing the full expression to
the docstring. Sam sped up lambdify's code generation by disabling the
docstring generation for large expressions in &lt;a class="reference external" href="https://github.com/sympy/sympy/pull/24754"&gt;Pull Request 24754&lt;/a&gt;. Note that lambdifying
expressions is also faster with &lt;tt class="docutils literal"&gt;cse=True&lt;/tt&gt;. Here is the timing in SymPy
1.11.1:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;In [1]: %time f_without_cse = lambdify((x, p), large_expr)
CPU times: user 29.4 s, sys: 91.3 ms, total: 29.5 s
Wall time: 29.5 s

In [2]: %time f_with_cse = lambdify((x, p), large_expr, cse=True)
CPU times: user 14.5 s, sys: 15.8 ms, total: 14.5 s
Wall time: 14.5 s
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and then the same in SymPy 1.12:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;In [1]: %time f_without_cse = lambdify((x, p), large_expr)
CPU times: user 17.9 s, sys: 68.4 ms, total: 18 s
Wall time: 18 s

In [2]: %time f_with_cse = lambdify((x, p), large_expr, cse=True)
CPU times: user 2.77 s, sys: 7.93 ms, total: 2.77 s
Wall time: 2.77 s
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Using &lt;tt class="docutils literal"&gt;cse=True&lt;/tt&gt; with &lt;tt class="docutils literal"&gt;lambdify()&lt;/tt&gt;, results in significantly faster
numerical evaluation:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;In [2]: %timeit f_without_cse(x_vals, p_vals)
40.7 ms ± 824 µs per loop (mean ± std. dev. of 7 runs, 10 loops each)

In [3]: %timeit f_with_cse(x_vals, p_vals)
264 µs ± 7.37 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For this example, the CSE version is &lt;strong&gt;154X faster&lt;/strong&gt; at execution.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="modeling-and-optimal-control-uses"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#toc-entry-13"&gt;Modeling and Optimal Control Uses&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As explained in the introduction, our goal is to make SymPy capable of deriving
computationally efficient neuromuscular driven multibody models. One use case
for these models is solving &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Optimal_control"&gt;optimal control&lt;/a&gt; problems, which benefit greatly
from exact derivatives and the fastest numerical evaluation of the equations of
motion and its higher-order partial derivatives. In particular, forming a
&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Nonlinear_programming"&gt;nonlinear programming&lt;/a&gt; problem using direct collocation transcription from
very large symbolic equations of motion was already known to push SymPy's past
its limits.  In the past, we have developed two software packages that
transcribe and solve optimal control problems based on SymPy expressions: &lt;a class="reference external" href="https://github.com/csu-hmc/opty"&gt;opty&lt;/a&gt;
and &lt;a class="reference external" href="https://github.com/brocksam/pycollo"&gt;pycollo&lt;/a&gt;. We use both programs below to solve two challenging optimal
control problems and detail the improvements we made to the packages.&lt;/p&gt;
&lt;div class="section" id="optimal-skateboard-ollie"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#toc-entry-14"&gt;Optimal Skateboard Ollie&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;As a first demonstration that SymPy can be used to solve research-grade optimal
control problems, TU Delft MSc student Jan Heinen developed a model of a
skateboarder performing an ollie, the fundamental jumping trick in the sport.
Jan used SymPy to formulate the equations of motion of this biomechanical
human-machine system and used pycollo to solve the multi-phase trajectory
optimization and parameter identification optimal control problem. Jan
succeeded and produced an MSc thesis and a preprint that is currently under
review at the journal Sports Engineering:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;TU Delft MSc thesis: &lt;a class="reference external" href="http://resolver.tudelft.nl/uuid:61f4e969-8bd1-4687-9942-b70024b216dc"&gt;Optimal Skateboard Geometry for Maximizing Ollie Height&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;engrXiv preprint: &lt;a class="reference external" href="https://doi.org/10.31224/3171"&gt;Maximizing Ollie Height by Optimizing Control Strategy and
Skateboard Geometry Using Direct Collocation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This video shows the simulations of the problem solutions:&lt;/p&gt;
&lt;center&gt;
&lt;iframe width="560" height="315"
src="https://www.youtube.com/embed/jw5DmNnvD7c" title="YouTube video player"
frameborder="0" allow="accelerometer; autoplay; clipboard-write;
encrypted-media; gyroscope; picture-in-picture" allowfullscreen&gt;&lt;/iframe&gt;
&lt;/center&gt;&lt;p&gt;Following his MSc project, Jan contributed Sphinx documentation and examples to
the pycollo project with the following pull requests:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/brocksam/pycollo/pull/80"&gt;https://github.com/brocksam/pycollo/pull/80&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/brocksam/pycollo/pull/82"&gt;https://github.com/brocksam/pycollo/pull/82&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/brocksam/pycollo/pull/84"&gt;https://github.com/brocksam/pycollo/pull/84&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/brocksam/pycollo/pull/85"&gt;https://github.com/brocksam/pycollo/pull/85&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/brocksam/pycollo/pull/87"&gt;https://github.com/brocksam/pycollo/pull/87&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/brocksam/pycollo/pull/88"&gt;https://github.com/brocksam/pycollo/pull/88&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="brim"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#toc-entry-15"&gt;BRiM&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;All of our prior bicycle-rider human-machine system models were one-off
derivations that were repurposed for each new model variation. These had
varying accessibility for other users. Timo came up with the idea to develop a
software package that allows you to build bicycle-rider models from modular
elements, yet still retain a minimal coordinate derivation of the equations of
motion. His MSc thesis, &amp;quot;&lt;a class="reference external" href="http://resolver.tudelft.nl/uuid:a2b132e9-8d38-4553-8587-0c9e3341b202"&gt;BRiM: A Modular Bicycle-Rider Modeling Framework&lt;/a&gt;&amp;quot;,
details the design, implementation, and use of BRiM. We also wrote a paper,
&amp;quot;&lt;a class="reference external" href="https://doi.org/10.59490/6504c5a765e8118fc7b106c3"&gt;BRiM: A Modular Bicycle-Rider Modeling Framework&lt;/a&gt;&amp;quot;, for the Bicycle and
Motorcycle Dynamics 2023 conference that gives a more concise overview of the
package as well as demonstrating easily swapping models for comparable optimal
control results.&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="" src="https://objects-us-east-1.dream.io/mechmotum/brim-lane-change.gif" style="width: 80%;" /&gt;
&lt;p class="caption"&gt;Figure 3: Lane change simulation created with BRiM showing with and without
a rider.&lt;/p&gt;
&lt;/div&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;BRiM source code: &lt;a class="reference external" href="https://github.com/TJStienstra/brim/"&gt;https://github.com/TJStienstra/brim/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;BRiM documentation: &lt;a class="reference external" href="https://tjstienstra.github.io/brim/"&gt;https://tjstienstra.github.io/brim/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;BRiM BMD 2023 paper: &lt;a class="reference external" href="https://doi.org/10.59490/6504c5a765e8118fc7b106c3"&gt;https://doi.org/10.59490/6504c5a765e8118fc7b106c3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;BRiM BMD 2023 paper source code: &lt;a class="reference external" href="https://github.com/TJStienstra/brim-bmd-2023-paper"&gt;https://github.com/TJStienstra/brim-bmd-2023-paper&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="optimal-bicycle-rider-trajectories"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#toc-entry-16"&gt;Optimal Bicycle-Rider Trajectories&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;With all of the above work, we were able to solve an optimal control problem of
the muscle-driven bicycle and rider. This is the problem we posed:&lt;/p&gt;
&lt;blockquote&gt;
Given a multibody model of the Carvallo-Whipple bicycle model extended with
a rider that has muscle actuated movable arms and given a desired path on
the ground, can we find muscle activations that cause the bicycle-rider to
follow the path as closely as possible while minimizing the effort from the
representative biceps and triceps?&lt;/blockquote&gt;
&lt;p&gt;The objective of this optimal control problem takes the form:&lt;/p&gt;
&lt;div class="math"&gt;
\begin{equation*}
J = (1 - w)\int_{t_0}^{t_f} \left[x_s(t) - x_d(t)\right]^2 dt +
w\int_{t_0}^{t_f} e(t)^2 dt
\end{equation*}
&lt;/div&gt;
&lt;p&gt;where &lt;span class="math"&gt;\(x_s\)&lt;/span&gt; are a subset of the model's state trajectories and
&lt;span class="math"&gt;\(x_d\)&lt;/span&gt; are some desired trajectories and &lt;span class="math"&gt;\(e\)&lt;/span&gt; are the muscle
excitation inputs. &lt;span class="math"&gt;\(w\)&lt;/span&gt; is a weighting factor for the two terms. This is a
typical minimal effort tracking formulation.&lt;/p&gt;
&lt;p&gt;The equations of motion of this system have about 2.8 million mathematical
operations. Forming the constraints that represent these equations of motion (a
set of differential algebraic equations in this case) involves computing a very
large sparse Jacobian with 440 thousand non-zero entries. When we first
attempted the differentiation for the Jacobian of the discretized bicycle-rider
model, SymPy bogged down on the Jacobian calculation. We let the computation
run for &lt;strong&gt;over 3 hours&lt;/strong&gt; and killed the execution before the computation
completed. SymPy's differentiation is unusable for interactive work with large
equations of motion such as these. Since we already find the common
sub-expressions of the equations of motion before code generation in opty, Sam
implemented a very efficient forward Jacobian on the expression directed
acyclic graph (DAG) in pull request: &lt;a class="reference external" href="https://github.com/csu-hmc/opty/pull/102"&gt;https://github.com/csu-hmc/opty/pull/102&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This allowed the equations to be differentiated and the differentiation occurs
in less than 45 seconds (at least a &lt;strong&gt;250X&lt;/strong&gt; speed increase), showing the
drastic improvements such an approach can have. Once this fix was applied we
were finally able to solve the tracking trajectory optimization problem with
&lt;a class="reference external" href="https://github.com/csu-hmc/opty"&gt;opty&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This problem has these characteristics:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Number of operations in the equations of motion: 2,775,718&lt;/li&gt;
&lt;li&gt;Number of constraints: 6394&lt;/li&gt;
&lt;li&gt;Number of free variables: 7400&lt;/li&gt;
&lt;li&gt;Number of non-zero entries in the Jacobian of the constraints: 439,438&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;and solves with these timings:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Time to differentiate the constraints: 43 seconds&lt;/li&gt;
&lt;li&gt;Total time to code generate, form the Jacobian, and compile the C code: 185
seconds&lt;/li&gt;
&lt;li&gt;Average time to evaluate the constraints: 201 µs&lt;/li&gt;
&lt;li&gt;Average time to evaluate the Jacobian: 1.29 ms&lt;/li&gt;
&lt;li&gt;Number of IPOPT iterations: 267&lt;/li&gt;
&lt;li&gt;Time in IPOPT: 45 seconds&lt;/li&gt;
&lt;/ul&gt;
&lt;table border="1" class="borderless docutils align-center" style="width: 100%"&gt;
&lt;caption&gt;Figure 4: Optimal control simualtion results for a 2 meter
lange change at a nomimal 1 m/s riding speed. The top left shows the desired
(blue) and actual (orange) ground path. The top right graph shows the
generalized coordintes. &lt;span class="math"&gt;\(q_7\)&lt;/span&gt; is the steer angle in degrees, for example. The
bottom left shows the generalized speeds. &lt;span class="math"&gt;\(u_1\)&lt;/span&gt; is the forward speed.
The bottom right graphs shows the muscle excitation inputs for pedaling
torque &lt;span class="math"&gt;\(T_6\)&lt;/span&gt; and the biceps and triceps.&lt;/caption&gt;
&lt;colgroup&gt;
&lt;col width="50%" /&gt;
&lt;col width="50%" /&gt;
&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;&lt;img alt="muscle-bike-rider-01" src="https://objects-us-east-1.dream.io/mechmotum/muscle-bike-rider-01.png" style="width: 100%;" /&gt;&lt;/td&gt;
&lt;td&gt;&lt;img alt="muscle-bike-rider-02" src="https://objects-us-east-1.dream.io/mechmotum/muscle-bike-rider-02.png" style="width: 100%;" /&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;img alt="muscle-bike-rider-03" src="https://objects-us-east-1.dream.io/mechmotum/muscle-bike-rider-03.png" style="width: 100%;" /&gt;&lt;/td&gt;
&lt;td&gt;&lt;img alt="muscle-bike-rider-04" src="https://objects-us-east-1.dream.io/mechmotum/muscle-bike-rider-04.png" style="width: 100%;" /&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;The simulation codes and the draft paper about the results can be found in the
following repository:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/brocksam/muscle-driven-bicycle-paper"&gt;https://github.com/brocksam/muscle-driven-bicycle-paper&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The need to evaluate both a function and its Jacobian is a common use case that
is not just limited to optimal control problems like the one shown above. SymPy
is capable of taking analytical derivatives but it can be prohibitively slow
for large expressions. This limits interactive use and rapid iteration in
equation derivation. If common sub-expressions are extracted from a SymPy
expression, all operations are represented as a directed acyclic graph.  Taking
the derivative of a DAG instead of a tree graph, as SymPy stores expressions,
can provide exponential speedups to differentiation. If the code generation for
the function and its Jacobian uses common sub-expression elimination, then it
makes sense to call &lt;tt class="docutils literal"&gt;cse()&lt;/tt&gt; on the function, then take the partial
derivatives, and the Jacobian will be in a DAG form for easy code generation.
Sam has introduced a major code generation speed up for lambdifying large SymPy
expressions if you also desire the Jacobian based on the work we did in opty.
The details are  in the following pull requests:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/sympy/sympy/pull/24649"&gt;https://github.com/sympy/sympy/pull/24649&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/sympy/sympy/pull/25797"&gt;https://github.com/sympy/sympy/pull/25797&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/sympy/sympy/pull/25801"&gt;https://github.com/sympy/sympy/pull/25801&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#toc-entry-17"&gt;Conclusion&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;We completed almost all of the goals set out in the original proposal along
with many more unplanned achievements. SymPy is now more suited for solving
non-trivial biomechanical optimal control problems and improvements to the
performance of lambdify() will help a broad set of use cases. Our experience
also led to many new ideas on how to further improve SymPy for large expression
manipulation, especially how unevaluated expression forms that use DAGs as the
core data structure can drastically speed up SymPy and reduce the computational
resources needed.&lt;/p&gt;
&lt;div class="section" id="lessons-learned"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#toc-entry-18"&gt;Lessons Learned&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;New contributors to large open source projects should start with pull requests
that are small and uncontroversial to build up momentum. Sam started with a
pull request to switch SymPy's 15 year old testing framework to pytest. This
consumed a lot of time and stalled regularly which in return stalled his other
pull requests because he built out the tests with advanced pytest features.&lt;/p&gt;
&lt;p&gt;We had planned for 0.5 FTE over the two year period, but it took about 6 months
to negotiate a subcontract between TU Delft and Quantsight, since it was the
first one of its kind. After that, it took another six months before we
interivewed candidates, hired one, and Sam could start. There was not enough
time in the grant period for the contract and hiring process. It still worked
out, but this is something to plan for in the future.&lt;/p&gt;
&lt;p&gt;We developed a large plan for the additions to SymPy that was tough to separate
into independent smaller pieces. This led Sam and Timo to work on a set of
large interconnected Git branches that would be merged when finished. This
ended up leaving us with very large pull requests to review and made it harder
for other SymPy developers to interact on the draft work. We also merged all of
the new material as private modules (leading underscores in their file names)
so that we could make breaking changes in case a SymPy release occurred before
we finished the whole plan. The development branch approach was not ideal,
SymPy usually has only one development branch, so we should probably avoid that
in the future. Merging private modules is a fine approach and is done in other
places in SymPy, but you have to have a plan to make them public.&lt;/p&gt;
&lt;p&gt;Our proposal had three work packages. After hiring Sam, we realized his prior
experience and ideas for SymPy improvement had overlap with Oscar's plans. By
the time we understood what exactly we would do, we failed to have more
collaborative work between the two related work packages. In the future, it
would be good to have more early brainstorm meetings to initiate close
collaboration.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="future-plans"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#toc-entry-19"&gt;Future Plans&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;We plan to finish any of the unmerged pull requests for the SymPy 1.13 release
and the paper on the optimal control of the bicycle-rider system is ongoing
work. In the future, we are very interested in incorporating unevaluated
expressions and the DAG data structures more into the core of SymPy, as these
two ideas can vastly enhance SymPy's performance and the ability to code
generate from SymPy expressions with more control and precision. We hope that
other users will try out and contribute to the new biomechanics package as well
as use SymPy + opty &amp;amp; pycollo for solving optimal control problems of
biomechanical multibody systems.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="work-summary"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#toc-entry-20"&gt;Work Summary&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The following list summarizes the various products we have delivered as part of
the CZI funding (code, papers, documentation):&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Pull requests to SymPy:&lt;ul&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/sympy/sympy/pulls?q=is%3Apr+label%3A%22CZI%3A+Codegen%2FBiomech%22"&gt;https://github.com/sympy/sympy/pulls?q=is%3Apr+label%3A%22CZI%3A+Codegen%2FBiomech%22&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/sympy/sympy_benchmarks/pulls?q=is%3Apr+author%3Abrocksam"&gt;https://github.com/sympy/sympy_benchmarks/pulls?q=is%3Apr+author%3Abrocksam&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Pull request to opty: &lt;a class="reference external" href="https://github.com/csu-hmc/opty/pull/102"&gt;https://github.com/csu-hmc/opty/pull/102&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Pull requests to pycollo:&lt;ul&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/brocksam/pycollo/pull/80"&gt;https://github.com/brocksam/pycollo/pull/80&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/brocksam/pycollo/pull/82"&gt;https://github.com/brocksam/pycollo/pull/82&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/brocksam/pycollo/pull/84"&gt;https://github.com/brocksam/pycollo/pull/84&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/brocksam/pycollo/pull/85"&gt;https://github.com/brocksam/pycollo/pull/85&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/brocksam/pycollo/pull/87"&gt;https://github.com/brocksam/pycollo/pull/87&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/brocksam/pycollo/pull/88"&gt;https://github.com/brocksam/pycollo/pull/88&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Ollie Optimization paper and code:&lt;ul&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/mechmotum/ollie-optimization"&gt;https://github.com/mechmotum/ollie-optimization&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;BRiM software package:&lt;ul&gt;
&lt;li&gt;Source code: &lt;a class="reference external" href="https://github.com/TJStienstra/brim/"&gt;https://github.com/TJStienstra/brim/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Documentation: &lt;a class="reference external" href="https://tjstienstra.github.io/brim/"&gt;https://tjstienstra.github.io/brim/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;BMD 2023 paper: &lt;a class="reference external" href="https://doi.org/10.59490/6504c5a765e8118fc7b106c3"&gt;https://doi.org/10.59490/6504c5a765e8118fc7b106c3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;BMD 2023 paper source code: &lt;a class="reference external" href="https://github.com/TJStienstra/brim-bmd-2023-paper"&gt;https://github.com/TJStienstra/brim-bmd-2023-paper&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Bicycle steering optimal control paper:&lt;ul&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/brocksam/muscle-driven-bicycle-paper"&gt;https://github.com/brocksam/muscle-driven-bicycle-paper&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="references"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#toc-entry-21"&gt;References&lt;/a&gt;&lt;/h2&gt;
&lt;table class="docutils citation" frame="void" id="meijaard2007" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#citation-reference-2"&gt;[Meijaard2007]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;J. P. Meijaard, J. M. Papadopoulos, A. Ruina, and A. L.
Schwab, “Linearized dynamics equations for the balance and steer of a
bicycle: A benchmark and review,” Proceedings of the Royal Society A:
Mathematical, Physical and Engineering Sciences, vol. 463, no. 2084, pp.
1955–1982, Aug. 2007.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils citation" frame="void" id="basumandal2007" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#citation-reference-1"&gt;[BasuMandal2007]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;P. Basu-Mandal, A. Chatterjee, and J. M. Papadopoulos,
&amp;quot;Hands-free circular motions of a benchmark bicycle,&amp;quot; Proceedings of the
Royal Society A: Mathematical, Physical and Engineering Sciences, vol. 463,
no. 2084, pp. 1983–2003, Aug. 2007.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils citation" frame="void" id="degroote2016" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#citation-reference-4"&gt;[DeGroote2016]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;De Groote, F., Kinney, A. L., Rao, A. V., &amp;amp; Fregly, B. J.,
Evaluation of direct collocation optimal control problem formulations for
solving the muscle redundancy problem, Annals of biomedical engineering,
44(10), (2016) pp. 2922-2936&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils citation" frame="void" id="bird2011" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#citation-reference-3"&gt;[Bird2011]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Richard S. Bird, A simple division-free algorithm for computing
determinants, Information Processing Letters, Volume 111, Issues 21–22,
2011, Pages 1072-1074, ISSN 0020-0190,
&lt;a class="reference external" href="https://doi.org/10.1016/j.ipl.2011.08.006"&gt;https://doi.org/10.1016/j.ipl.2011.08.006&lt;/a&gt;.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;script type='text/javascript'&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML';

    var configscript = document.createElement('script');
    configscript.type = 'text/x-mathjax-config';
    configscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        availableFonts: ['STIX', 'TeX']," +
        "        preferredFont: 'STIX'," +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";

    (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript);
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content><category term="research"></category><category term="sympy"></category><category term="czi"></category><category term="biomechanics"></category><category term="multibody dynamics"></category><category term="open source software"></category><category term="muscles"></category><category term="optimal control"></category><category term="bicycle"></category><category term="skateboard"></category><category term="code generation"></category></entry><entry><title>PhD Opening: Discovering the Mechanisms that Cause Bicycle Crashes Through The Merger of Video and Computational Modeling</title><link href="https://mechmotum.github.io/blog/bicycle-crashes-phd-ad.html" rel="alternate"></link><published>2023-09-06T00:00:00-07:00</published><updated>2023-09-06T00:00:00-07:00</updated><author><name>Jason K. Moore</name></author><id>tag:mechmotum.github.io,2023-09-06:/blog/bicycle-crashes-phd-ad.html</id><summary type="html">&lt;div class="alert alert-warning topic"&gt;
&lt;p class="topic-title"&gt;Filled&lt;/p&gt;
&lt;p&gt;This job has been filled and is no longer open.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Challenge&lt;/strong&gt;: Quality bicycle crash data is essentially non-existent so we
have to use low quality videos from chance encounters to create accurate
reconstructions of the physics of these crashes.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Change&lt;/strong&gt;: We want to study how these crashes occur through …&lt;/p&gt;</summary><content type="html">&lt;div class="alert alert-warning topic"&gt;
&lt;p class="topic-title"&gt;Filled&lt;/p&gt;
&lt;p&gt;This job has been filled and is no longer open.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Challenge&lt;/strong&gt;: Quality bicycle crash data is essentially non-existent so we
have to use low quality videos from chance encounters to create accurate
reconstructions of the physics of these crashes.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Change&lt;/strong&gt;: We want to study how these crashes occur through the lens of
physical simulation.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Impact&lt;/strong&gt;: Once we understand how crashes occur we want to use the knowledge
to make bicycling safer and reduce crashes.&lt;/p&gt;
&lt;div class="section" id="description"&gt;
&lt;h2&gt;Description&lt;/h2&gt;
&lt;p&gt;We are seeking a PhD researcher for a 4-year contract to develop simulation and
data analysis tools that lead us to understanding the mechanisms at play in
bicycle and other two-wheeler crashes. You will work primarily with video data
and computational neuromuscular models to develop the next generation of
predictive algorithms that connect human control to bicycle crash dynamics.&lt;/p&gt;
&lt;p&gt;Your project is partially supported by the &lt;a class="reference external" href="https://chanzuckerberg.com/eoss/proposals/opensim-creator-empowering-biomedical-research-with-biomechanical-models/"&gt;OpenSim Creator: Empowering
Biomedical Research with Biomechanical Models&lt;/a&gt;
grant funded by the &lt;a class="reference external" href="https://chanzuckerberg.com/newsroom/czi-awards-16-million-for-foundational-open-source-software-tools-essential-to-biomedicine/"&gt;Chan-Zuckerberg Foundation’s “Essential Open Source
Software for Science&amp;quot; program&lt;/a&gt;.
The software developed during the research will be contributed to OpenSim as
open source software and the research results will be submitted to appropriate
scientific journals and conferences.&lt;/p&gt;
&lt;p&gt;You will simultaneously work as a member of the Computational Biomechanics Lab
and the Bicycle Lab both part of the BioMechanical Engineering Department. You
will be supervised by Dr. Jason K. Moore and Dr. Ajay Seth. You will work BSc,
MSc, and PhD candidates in the involved research groups from the BioMechanical
Engineering Department and other departments in the university.&lt;/p&gt;
&lt;p&gt;Opportunities for growing your academic career will be available, such as
mentoring BSc/MSc Students, conference presentations, networking, and teaching.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="requirements"&gt;
&lt;h2&gt;Requirements&lt;/h2&gt;
&lt;p&gt;You should have:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;MSc in engineering or similar discipline by the start date of the position&lt;/li&gt;
&lt;li&gt;Experience with simulation&lt;/li&gt;
&lt;li&gt;Experience with a programming language (e.g., C++, Python, Java, Matlab,
etc.)&lt;/li&gt;
&lt;li&gt;Experience with collecting experimental data (vehicle, biomechanic, video, or
similar)&lt;/li&gt;
&lt;li&gt;Good written and oral communication skills in English&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The following aspects will help you stand out:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Thriving in multidisciplinary environments&lt;/li&gt;
&lt;li&gt;Self-motivation&lt;/li&gt;
&lt;li&gt;Curiosity-driven working attitude&lt;/li&gt;
&lt;li&gt;Knowledge of biomechanical modeling, vision based motion capture, machine
learning, control systems&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Keep in mind that this describes the background we imagine would best fit the
role. Even if you do not meet all the requirements and feel that you are up for
the task, we absolutely want to see your application! The PhD process is a
learning experience.&lt;/p&gt;
&lt;p&gt;Doing a PhD at TU Delft requires English proficiency at a certain level to
ensure that the candidate is able to communicate and interact well, participate
in English-taught Doctoral Education courses, and write scientific articles and
a final thesis. For more details please check the Graduate Schools Admission
Requirements.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="additional-information"&gt;
&lt;h2&gt;Additional Information&lt;/h2&gt;
&lt;p&gt;The TU Delft Bicycle and Computational Biomechanics Labs are committed to
advancing diversity, equity, and inclusion efforts across open source software
development with this position, aligning with CZI's goals. We especially
encourage applicants from underrepresented groups in open source software to
apply.&lt;/p&gt;
&lt;p&gt;TU Delft values a safe, inclusive and diverse work environment. To reinforce
that, we have committed ourselves to the joint Statement Social Safety of the
Association of Universities in the Netherlands and the National Action Plan for
Diversity and Inclusion. In addition to that, we have a Social Safety
Programme.&lt;/p&gt;
&lt;p&gt;Doing a PhD at TU Delft requires English proficiency at a certain level to
ensure that the candidate is able to communicate and interact well, participate
in English-taught Doctoral Education courses, and write scientific articles and
a final thesis. For more details please check the Graduate Schools Admission
Requirements.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="how-to-apply"&gt;
&lt;h2&gt;How to Apply&lt;/h2&gt;
&lt;p&gt;Apply via the TU Delft website application portal linked below. We will not
process applications sent by email and/or post.&lt;/p&gt;
&lt;p&gt;Visit TU Delft's website to find more employment details and apply for the
position (vacancy number: TUD04370):&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://www.tudelft.nl/over-tu-delft/werken-bij-tu-delft/vacatures/details?jobId=15846"&gt;https://www.tudelft.nl/over-tu-delft/werken-bij-tu-delft/vacatures/details?jobId=15846&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;In the online application you will need to supply these things:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Motivation and CV.&lt;/li&gt;
&lt;li&gt;Abstract of your MSc thesis.&lt;/li&gt;
&lt;li&gt;Contact information for up to 3 references.&lt;/li&gt;
&lt;li&gt;List of grades.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A pre-employment screening can be part of the selection procedure.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Applications Due January 19, 2024&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="additional-information-1"&gt;
&lt;h2&gt;Additional information&lt;/h2&gt;
&lt;p&gt;For more information about this vacancy, please contact Jason Moore
(&lt;a class="reference external" href="mailto:j.k.moore&amp;#64;tudelft.nl"&gt;j.k.moore&amp;#64;tudelft.nl&lt;/a&gt;) or Ajay Seth (&lt;a class="reference external" href="mailto:a.seth&amp;#64;tudelft.nl"&gt;a.seth&amp;#64;tudelft.nl&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;For information about the selection procedure, please contact the HR Advisor at
&lt;a class="reference external" href="mailto:application-3mE&amp;#64;tudelft.nl"&gt;application-3mE&amp;#64;tudelft.nl&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
</content><category term="jobs"></category><category term="bicycle"></category><category term="phd"></category><category term="engineering"></category><category term="open source"></category></entry><entry><title>Timo Stienstra Successfully Defends His MSc Thesis</title><link href="https://mechmotum.github.io/blog/timo-stienstra-graduates.html" rel="alternate"></link><published>2023-08-30T16:58:00-07:00</published><updated>2023-08-30T16:58:00-07:00</updated><author><name>Jason K. Moore</name></author><id>tag:mechmotum.github.io,2023-08-30:/blog/timo-stienstra-graduates.html</id><summary type="html">&lt;img alt="" class="align-center" src="https://objects-us-east-1.dream.io/mechmotum/thesis-cover-stienstra.png" style="height: 400px;" /&gt;
&lt;p&gt;Timo Stienstra successfully defended &amp;quot;&lt;a class="reference external" href="http://resolver.tudelft.nl/uuid:a2b132e9-8d38-4553-8587-0c9e3341b202"&gt;BRiM: A Modular Bicycle-Rider Modeling
Framework&lt;/a&gt;&amp;quot;. Timo
developed a multibody dynamics modeling tool that makes it much easier to build
and change bicycle-rider models. It nicely allows you to modularly construct
these models from components yet still have a minimal coordinate formulation of
the dynamics that …&lt;/p&gt;</summary><content type="html">&lt;img alt="" class="align-center" src="https://objects-us-east-1.dream.io/mechmotum/thesis-cover-stienstra.png" style="height: 400px;" /&gt;
&lt;p&gt;Timo Stienstra successfully defended &amp;quot;&lt;a class="reference external" href="http://resolver.tudelft.nl/uuid:a2b132e9-8d38-4553-8587-0c9e3341b202"&gt;BRiM: A Modular Bicycle-Rider Modeling
Framework&lt;/a&gt;&amp;quot;. Timo
developed a multibody dynamics modeling tool that makes it much easier to build
and change bicycle-rider models. It nicely allows you to modularly construct
these models from components yet still have a minimal coordinate formulation of
the dynamics that precisely evaluates the equations of motion of the system. We
plan to use Timo's work as a basis for our bicycle-rider models, which we use
in most of the lab's projects. Timo also made significant contributions to
&lt;a class="reference external" href="https://sympy.org"&gt;SymPy&lt;/a&gt; during his Google Summer of Code internship and during his thesis
project. He improved the joints module by making important corrections, adding
new joint types, and including high quality figures in the documentation. You
can read about the GSoC work on &lt;a class="reference external" href="https://tjstienstra.github.io/gsoc/2022/2022/10/03/final-overview.html"&gt;his blog&lt;/a&gt; and you can see how the joints are
used to model a four-bar linkage &lt;a class="reference external" href="https://docs.sympy.org/dev/modules/physics/mechanics/examples/four_bar_linkage_example.html"&gt;in the SymPy documentation&lt;/a&gt;. Timo also
developed new load components and new system object and demystified a long
standing bug associated with solving linear systems symbolically among a &lt;a class="reference external" href="https://github.com/sympy/sympy/pulls/TJStienstra"&gt;whole
host of other fixes&lt;/a&gt; to SymPy mechanics. Timo created a matplotlib-based 3D
plotting and animation tool for SymPy mechanics objects called &lt;a class="reference external" href="https://github.com/TJStienstra/symmeplot"&gt;symmeplot&lt;/a&gt; that
simplifies visualizing your models. With all of these tools he brought his
bicycle-rider simulations to life with &lt;a class="reference external" href="https://github.com/TJStienstra/brim/"&gt;BRiM&lt;/a&gt;. Here are some example animations
of his simulations:&lt;/p&gt;
&lt;table border="1" class="borderless docutils align-center" style="width: 100%"&gt;
&lt;colgroup&gt;
&lt;col width="50%" /&gt;
&lt;col width="50%" /&gt;
&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;&lt;img alt="bike-circle" src="https://objects-us-east-1.dream.io/mechmotum/timo-bike-circle.gif" style="height: 400px;" /&gt;&lt;/td&gt;
&lt;td&gt;&lt;img alt="bike-large-turns" src="https://objects-us-east-1.dream.io/mechmotum/timo-bike-large-turns.gif" style="height: 400px;" /&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;img alt="bike-rider" src="https://objects-us-east-1.dream.io/mechmotum/timo-bike-rider.gif" style="height: 400px;" /&gt;&lt;/td&gt;
&lt;td&gt;&lt;img alt="one-bike" src="https://objects-us-east-1.dream.io/mechmotum/timo-one-bike.gif" style="height: 400px;" /&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;img alt="two-bikes" src="https://objects-us-east-1.dream.io/mechmotum/timo-two-bikes.gif" style="height: 400px;" /&gt;&lt;/td&gt;
&lt;td&gt;&lt;img alt="rolling-disc" src="https://objects-us-east-1.dream.io/mechmotum/timo-rolling-disc.gif" style="height: 400px;" /&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Timo was co-supervised by Sam Brockie (TU Delft) and Jason K. Moore (TU Delft).
Everyone at the bicycle lab is very proud of Timo and wishes him the best in
his next adventures.&lt;/p&gt;
</content><category term="news"></category><category term="bicycle"></category><category term="modeling"></category><category term="software"></category><category term="engineering"></category><category term="sympy"></category></entry><entry><title>Jan van der Schot Successfully Defends His MSc Thesis</title><link href="https://mechmotum.github.io/blog/jan-van-der-schot-graduates.html" rel="alternate"></link><published>2023-08-29T09:31:00-07:00</published><updated>2023-08-29T09:31:00-07:00</updated><author><name>Jason K. Moore</name></author><id>tag:mechmotum.github.io,2023-08-29:/blog/jan-van-der-schot-graduates.html</id><summary type="html">&lt;table border="1" class="borderless docutils align-center" style="width: 60%"&gt;
&lt;colgroup&gt;
&lt;col width="50%" /&gt;
&lt;col width="50%" /&gt;
&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;&lt;img alt="cover" src="https://objects-us-east-1.dream.io/mechmotum/thesis-cover-van-der-schot.png" style="height: 400px;" /&gt;&lt;/td&gt;
&lt;td&gt;&lt;img alt="headshot" src="https://objects-us-east-1.dream.io/mechmotum/headshot-van-der-schot-jan.jpg" style="height: 400px;" /&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Jan van der Schot successfully defended &amp;quot;&lt;a class="reference external" href="http://resolver.tudelft.nl/uuid:98476791-40be-4ee5-ab3a-3f1a9d5e63cb"&gt;The Relationship between Equivalent
Fall Height and Ground Reaction Force in Freestyle Ski Jumping&lt;/a&gt;&amp;quot;. Jan
measured both the trajectories of ski jump flight and the shape of the landing
surface with high accuracy differential GPS for over 100 jumps. Using these
measures he calculated …&lt;/p&gt;</summary><content type="html">&lt;table border="1" class="borderless docutils align-center" style="width: 60%"&gt;
&lt;colgroup&gt;
&lt;col width="50%" /&gt;
&lt;col width="50%" /&gt;
&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;&lt;img alt="cover" src="https://objects-us-east-1.dream.io/mechmotum/thesis-cover-van-der-schot.png" style="height: 400px;" /&gt;&lt;/td&gt;
&lt;td&gt;&lt;img alt="headshot" src="https://objects-us-east-1.dream.io/mechmotum/headshot-van-der-schot-jan.jpg" style="height: 400px;" /&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Jan van der Schot successfully defended &amp;quot;&lt;a class="reference external" href="http://resolver.tudelft.nl/uuid:98476791-40be-4ee5-ab3a-3f1a9d5e63cb"&gt;The Relationship between Equivalent
Fall Height and Ground Reaction Force in Freestyle Ski Jumping&lt;/a&gt;&amp;quot;. Jan
measured both the trajectories of ski jump flight and the shape of the landing
surface with high accuracy differential GPS for over 100 jumps. Using these
measures he calculated the equivalent fall height at the landing location to
compare to peak ground reaction force using data from chest and back mounted
accelerometers. Jan found that ground reaction force increases with equivalent
fall height but that it is difficult to predict the ground reaction force from
equivalent fall height alone, likely due to landing strategy and environment
differences.&lt;/p&gt;
&lt;p&gt;Jan was co-supervised by Daniel Röck (Prinoth AG), Mont Hubbard (University of
California, Davis), and Jason K. Moore (TU Delft). Everyone at the bicycle lab
is very proud of Jan and wishes him the best in his next adventures.&lt;/p&gt;
</content><category term="news"></category><category term="skiing"></category><category term="jump"></category><category term="freestyle"></category><category term="engineering"></category><category term="experiment"></category></entry><entry><title>Balance Assist Bicycle Featured in CAS Project Video</title><link href="https://mechmotum.github.io/blog/cas-final-video.html" rel="alternate"></link><published>2023-06-28T00:00:00-07:00</published><updated>2023-06-28T00:00:00-07:00</updated><author><name>Jason K. Moore</name></author><id>tag:mechmotum.github.io,2023-06-28:/blog/cas-final-video.html</id><summary type="html">&lt;p class="first last"&gt;Dr. Leila Alizadehsaravi and Dr. Felix Dauer are featured in the
final CAS project video with the balance assist bicycle.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;The &lt;a class="reference external" href="https://www.citiusaltiussanius.nl/"&gt;Citius-Altius-Sanius&lt;/a&gt; project is beginning to wrap up and recently a video
was produced highlighting the projects. Check out Dr. Leila Alizadehsaravi and
our partner Felix Dauer from Bosch being interviewed below:&lt;/p&gt;
&lt;iframe width="560" height="315"
src="https://www.youtube.com/embed/ewtgBIHhcNk?start=162" title="YouTube
video player" frameborder="0" allow="accelerometer; autoplay;
clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share"
allowfullscreen&gt;&lt;/iframe&gt;</content><category term="research"></category><category term="bicycle"></category><category term="engineering"></category></entry><entry><title>Floris van Willigen Successfully Defends His MSc Thesis</title><link href="https://mechmotum.github.io/blog/floris-van-willigen-graduates.html" rel="alternate"></link><published>2023-06-16T08:08:00-07:00</published><updated>2023-06-16T08:08:00-07:00</updated><author><name>Jason K. Moore</name></author><id>tag:mechmotum.github.io,2023-06-16:/blog/floris-van-willigen-graduates.html</id><summary type="html">&lt;table border="1" class="borderless docutils align-center" style="width: 60%"&gt;
&lt;colgroup&gt;
&lt;col width="50%" /&gt;
&lt;col width="50%" /&gt;
&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;&lt;img alt="cover" src="https://objects-us-east-1.dream.io/mechmotum/thesis-cover-van-willigen.png" style="height: 400px;" /&gt;&lt;/td&gt;
&lt;td&gt;&lt;img alt="headshot" src="https://objects-us-east-1.dream.io/mechmotum/headshot-floris-van-willigen.jpg" style="height: 400px;" /&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Floris van Willigen successfully defended &amp;quot;&lt;a class="reference external" href="http://resolver.tudelft.nl/uuid:3e68f4f0-80f0-4be5-9914-ba2fccefe631"&gt;Evaluation of the handling of a
variable dynamics tilting tricycle&lt;/a&gt;&amp;quot;.
Floris used several measures of single track vehicle handling to assess
multiple bicycles and leaning tricycles through hundreds of slalom and low
speed line tracking tasks. After showing that his handling quality metric was
able …&lt;/p&gt;</summary><content type="html">&lt;table border="1" class="borderless docutils align-center" style="width: 60%"&gt;
&lt;colgroup&gt;
&lt;col width="50%" /&gt;
&lt;col width="50%" /&gt;
&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;&lt;img alt="cover" src="https://objects-us-east-1.dream.io/mechmotum/thesis-cover-van-willigen.png" style="height: 400px;" /&gt;&lt;/td&gt;
&lt;td&gt;&lt;img alt="headshot" src="https://objects-us-east-1.dream.io/mechmotum/headshot-floris-van-willigen.jpg" style="height: 400px;" /&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Floris van Willigen successfully defended &amp;quot;&lt;a class="reference external" href="http://resolver.tudelft.nl/uuid:3e68f4f0-80f0-4be5-9914-ba2fccefe631"&gt;Evaluation of the handling of a
variable dynamics tilting tricycle&lt;/a&gt;&amp;quot;.
Floris used several measures of single track vehicle handling to assess
multiple bicycles and leaning tricycles through hundreds of slalom and low
speed line tracking tasks. After showing that his handling quality metric was
able to differentiate and compare the vehicles he applied the methods to find
the best configuration of our variable dynamics leaning tricycle, settling on a
configuration that retains self-stability of the tricycle but still allows for
bicycle carving. Using those findings he then used optimization to find a new
design which allows for maximum roll motion but retains the same essential
vehicle dynamics. Floris's method can be used as a general bicycle or leaning
tricycle handling assessment.&lt;/p&gt;
&lt;p&gt;Floris was co-supervised by Andrew Dressel (TU Delft &amp;amp; University of Wisconsin,
Milwaukee) and Jason K. Moore (TU Delft). ClickNL and Royal Dutch Gazelle
supported this project via the Fiets van the Toekomst grant. Everyone at the
bicycle lab is very proud of Floris and wishes him the best in his next
adventures.&lt;/p&gt;
</content><category term="news"></category><category term="tricycle"></category><category term="handling qualities"></category><category term="experimental"></category><category term="engineering"></category><category term="optimization"></category></entry><entry><title>First Lab Bicycle Tour!</title><link href="https://mechmotum.github.io/blog/wortel-tour.html" rel="alternate"></link><published>2023-06-09T11:40:00-07:00</published><updated>2023-06-09T11:40:00-07:00</updated><author><name>Jason K. Moore</name></author><id>tag:mechmotum.github.io,2023-06-09:/blog/wortel-tour.html</id><summary type="html">&lt;p&gt;Several members of the Bicycle Laboratorium went on our first bicycle tour,
which we hope to make an annual tradition! We bicycled from Delft to the
&lt;a class="reference external" href="https://nl.wikipedia.org/wiki/Wortel-Kolonie"&gt;Wortel-Kolonie&lt;/a&gt; in Belgium. Belgium hosts free camping spots &amp;quot;&lt;a class="reference external" href="https://bivakzone.be/"&gt;bivakzone&lt;/a&gt;&amp;quot; for
through hikers and bikers around the country and we stayed at the one located …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Several members of the Bicycle Laboratorium went on our first bicycle tour,
which we hope to make an annual tradition! We bicycled from Delft to the
&lt;a class="reference external" href="https://nl.wikipedia.org/wiki/Wortel-Kolonie"&gt;Wortel-Kolonie&lt;/a&gt; in Belgium. Belgium hosts free camping spots &amp;quot;&lt;a class="reference external" href="https://bivakzone.be/"&gt;bivakzone&lt;/a&gt;&amp;quot; for
through hikers and bikers around the country and we stayed at the one located
in the Wortel-Kolonie.&lt;/p&gt;
&lt;p&gt;Those that started in Delft did about 260 km over the two days and I did about
220 km due to the route passing through Rotterdam.&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="" src="https://objects-us-east-1.dream.io/mechmotum/wortel-tour-route.png" style="width: 60%;" /&gt;
&lt;p class="caption"&gt;The approximate route we took from Delft to the Wortel-Kolonie and back.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="" src="https://objects-us-east-1.dream.io/mechmotum/wortel-tour-02.jpg" style="width: 80%;" /&gt;
&lt;p class="caption"&gt;Here we are at the beginning about to descend into the Maastunnel.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="" src="https://objects-us-east-1.dream.io/mechmotum/wortel-tour-01.jpg" style="width: 80%;" /&gt;
&lt;p class="caption"&gt;On our way back on a beautiful Limburg road.&lt;/p&gt;
&lt;/div&gt;
</content><category term="news"></category><category term="bicycle"></category><category term="social"></category></entry><entry><title>Julie van Vlerken Successfully Defends Her MSc Thesis</title><link href="https://mechmotum.github.io/blog/julie-van-vlerken-graduates.html" rel="alternate"></link><published>2023-05-29T08:22:00-07:00</published><updated>2023-05-29T08:22:00-07:00</updated><author><name>Jason K. Moore</name></author><id>tag:mechmotum.github.io,2023-05-29:/blog/julie-van-vlerken-graduates.html</id><summary type="html">&lt;a class="reference external image-reference" href="http://resolver.tudelft.nl/uuid:3c71bc50-c6d0-4963-a3d2-5a1548f92786"&gt;&lt;img alt="" class="align-center" src="https://objects-us-east-1.dream.io/mechmotum/thesis-cover-van-vlerken.png" style="height: 400px;" /&gt;&lt;/a&gt;
&lt;p&gt;Julie van Vlerken successfully defended &amp;quot;&lt;a class="reference external" href="http://resolver.tudelft.nl/uuid:3c71bc50-c6d0-4963-a3d2-5a1548f92786"&gt;The influence of posture and stature
on bicycle handling qualities&lt;/a&gt;&amp;quot;.
Julie added rider forward lean and arm inertial effects to the Carvallo-Whipple
bicycle model, the later of which is known to remove a bicycle's
self-stabilization property. She then calculated a task independent handling
quality metric …&lt;/p&gt;</summary><content type="html">&lt;a class="reference external image-reference" href="http://resolver.tudelft.nl/uuid:3c71bc50-c6d0-4963-a3d2-5a1548f92786"&gt;&lt;img alt="" class="align-center" src="https://objects-us-east-1.dream.io/mechmotum/thesis-cover-van-vlerken.png" style="height: 400px;" /&gt;&lt;/a&gt;
&lt;p&gt;Julie van Vlerken successfully defended &amp;quot;&lt;a class="reference external" href="http://resolver.tudelft.nl/uuid:3c71bc50-c6d0-4963-a3d2-5a1548f92786"&gt;The influence of posture and stature
on bicycle handling qualities&lt;/a&gt;&amp;quot;.
Julie added rider forward lean and arm inertial effects to the Carvallo-Whipple
bicycle model, the later of which is known to remove a bicycle's
self-stabilization property. She then calculated a task independent handling
quality metric based on a human steering control model and assessed different
sized Gazelle bicycles with different rider size and posture for positive and
negative effects to lateral handling. She discovered that it is more difficult
for smaller riders to steer than larger riders and that postures that lean
forward also make it more difficult to steer. Her model and findings can be
used in the design phase to improve handling of new bicycle designs. Julie also
gave our bicycle dynamics web application a make over with new aesthetics and
new features:&lt;/p&gt;
&lt;a class="reference external image-reference" href="https://bicycle-dynamics.onrender.com/"&gt;&lt;img alt="" class="align-center" src="https://objects-us-east-1.dream.io/mechmotum/bicycle-dynamics-web-app.png" style="width: 80%;" /&gt;&lt;/a&gt;
&lt;p&gt;Julie was co-supervised by Leila Alizadehsaravi (TU Delft), Jason K. Moore (TU
Delft), and Arend Schwab (TU Delft). Engineers Jan Siksma, Hans Vreman, and
Sierd Heida at Gazelle also provided support and assistance with the project.
Everyone at the bicycle lab is very proud of Julie and wishes her the best her
path forward.&lt;/p&gt;
</content><category term="news"></category><category term="bicycle"></category><category term="engineering"></category><category term="handling"></category></entry><entry><title>Six Abstracts Accepted to BMD 2023</title><link href="https://mechmotum.github.io/blog/bmd-2023-abstracts.html" rel="alternate"></link><published>2023-05-06T11:15:00-07:00</published><updated>2023-05-06T11:15:00-07:00</updated><author><name>Jason K. Moore</name></author><id>tag:mechmotum.github.io,2023-05-06:/blog/bmd-2023-abstracts.html</id><summary type="html">&lt;p&gt;All six of the Bicycle Lab's submissions to the 2023 Bicycle and Motorcycle
Dynamics conference were accepted. We have had a very productive past year and
are excited to show off some of the research. You can read the abstracts and
the scientific committee's reviews on Orvium.&lt;/p&gt;
&lt;p&gt;MSc student Timo …&lt;/p&gt;</summary><content type="html">&lt;p&gt;All six of the Bicycle Lab's submissions to the 2023 Bicycle and Motorcycle
Dynamics conference were accepted. We have had a very productive past year and
are excited to show off some of the research. You can read the abstracts and
the scientific committee's reviews on Orvium.&lt;/p&gt;
&lt;p&gt;MSc student Timo Stienstra will present about his new bicycle and rider
modeling software package:&lt;/p&gt;
&lt;blockquote&gt;
Stienstra, T., Brockie, S. &amp;amp; Moore, J. (2023). BRiM: A Modular and
Extensible Open-Source Framework for Creating Bicycle-Rider Models. The
Evolving Scholar - BMD 2023, 5th Edition.
&lt;a class="reference external" href="https://doi.org/10.24404/63fdfcdc01e65b9d95005943"&gt;https://doi.org/10.24404/63fdfcdc01e65b9d95005943&lt;/a&gt;&lt;/blockquote&gt;
&lt;p&gt;MSc student Floris van Willigen will present about his handling measurements of
our new tilting tricycle:&lt;/p&gt;
&lt;blockquote&gt;
Dressel, A., van Willigen, F. &amp;amp; Moore, J. (2023). Evaluating the handling of
a tilting tricycle with variable stability. The Evolving Scholar - BMD 2023,
5th Edition. &lt;a class="reference external" href="https://doi.org/10.24404/63fe2e2127799c0b2d1600b8"&gt;https://doi.org/10.24404/63fe2e2127799c0b2d1600b8&lt;/a&gt;&lt;/blockquote&gt;
&lt;p&gt;PhD student Christoph Schmidt will introduce his work modelling bicycle
dynamics and control in a traffic environment:&lt;/p&gt;
&lt;blockquote&gt;
Schmidt, C., Dabiri, A., Schulte, F., Happee, R. &amp;amp; Moore, J. (2023).
Essential Bicycle Dynamics for Microscopic Traffic Simulation: An Example
Using the Social Force Model. The Evolving Scholar - BMD 2023, 5th Edition.
&lt;a class="reference external" href="https://doi.org/10.24404/63fe3f96e46cae666e6d2463"&gt;https://doi.org/10.24404/63fe3f96e46cae666e6d2463&lt;/a&gt;&lt;/blockquote&gt;
&lt;p&gt;PhD student Gabriele Dell'Orto will present the tire measurements of a small
bicycle tire used for the front wheel of many bakfiets:&lt;/p&gt;
&lt;blockquote&gt;
Dell'Orto, G., Ballo, F. &amp;amp; Mastinu, G. (2023). Indoor measurement of the
lateral characteristics of a cargo bicycle tyre. The Evolving Scholar - BMD
2023, 5th Edition. &lt;a class="reference external" href="https://doi.org/10.24404/63fb250be96b4c5fc016a363"&gt;https://doi.org/10.24404/63fb250be96b4c5fc016a363&lt;/a&gt;&lt;/blockquote&gt;
&lt;p&gt;Gabriele also contributed to the following abstract. In cooperation with University of Naples, he is interested in developing a thermal model for bicycle tires.&lt;/p&gt;
&lt;blockquote&gt;
Farroni, F., Napolitano Dell'Annunziata, G., Ruffini, M., Dell'Orto, G. &amp;amp; Mastinu, G. (2023). Thermal model for bicycle tire internal temperature evaluation in        various contact conditions. The Evolving Scholar - BMD 2023, 5th Edition. &lt;a class="reference external" href="https://doi.org/10.24404/63fe327a6cf80479c0db7f83"&gt;https://doi.org/10.24404/63fe327a6cf80479c0db7f83&lt;/a&gt;&lt;/blockquote&gt;
&lt;p&gt;(Past) Postdoc Andrew Dressel will present on the design of our new tilting
tricycle:&lt;/p&gt;
&lt;blockquote&gt;
Dressel, A. &amp;amp; Moore, J. (2023). Adapting a variable stability mechanism for
a tilting tricycle from the delta to the tadpole wheel configuration. The
Evolving Scholar - BMD 2023, 5th Edition.
&lt;a class="reference external" href="https://doi.org/10.24404/63fe2c902f198c184a58ee9b"&gt;https://doi.org/10.24404/63fe2c902f198c184a58ee9b&lt;/a&gt;&lt;/blockquote&gt;
&lt;p&gt;Lastly, I will present on our work developing an automatically stabilized bakfiets:&lt;/p&gt;
&lt;blockquote&gt;
Moore, J., Koshy Cherian, J., Andersson, B., Lee, O. &amp;amp; Ranheim, A. (2023).
Modeling and Implementation of a Reaction Wheel Stabilization System for Low
Speed Balance of a Cargo Bicycle. The Evolving Scholar - BMD 2023, 5th
Edition. &lt;a class="reference external" href="https://doi.org/10.24404/63ff23b478f53b9c419075b9"&gt;https://doi.org/10.24404/63ff23b478f53b9c419075b9&lt;/a&gt;&lt;/blockquote&gt;
</content><category term="news"></category><category term="bicycle"></category><category term="engineering"></category><category term="conference"></category><category term="abstract"></category></entry><entry><title>Balance Assist Bicycle Featured on Radio 1</title><link href="https://mechmotum.github.io/blog/radio-1-balance-assist.html" rel="alternate"></link><published>2023-04-12T11:16:00-07:00</published><updated>2023-04-12T11:16:00-07:00</updated><author><name>Jason K. Moore</name></author><id>tag:mechmotum.github.io,2023-04-12:/blog/radio-1-balance-assist.html</id><content type="html">&lt;p&gt;&lt;a class="reference external" href="https://www.nporadio1.nl/"&gt;NPO Radio 1&lt;/a&gt; interviewed Frans van der Helm about our balance assisting
bicycle. Find the recording here:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://www.nporadio1.nl/fragmenten/langs-de-lijn-en-omstreken/ecde8e18-8537-44e6-a5f4-e7632386a04e/2023-03-30-tu-delft-maakt-fiets-waarmee-je-niet-kan-vallen"&gt;https://www.nporadio1.nl/fragmenten/langs-de-lijn-en-omstreken/ecde8e18-8537-44e6-a5f4-e7632386a04e/2023-03-30-tu-delft-maakt-fiets-waarmee-je-niet-kan-vallen&lt;/a&gt;&lt;/p&gt;
&lt;iframe width=600px height=400px src="https://start-player.npo.nl/embed/eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzaGFyZSI6IjAiLCJlbmRzY3JlZW4iOiIwIiwiaGFzU2V0dGluZ3MiOiIwIiwiaGFzQWRDb25zZW50IjoiMCIsIm5vQWRzIjoxLCJhdXRvcGxheSI6IjAiLCJzdHlsZXNoZWV0IjoiaHR0cHM6XC9cL2FwaS5ucG9yYWRpby5ubFwvYXNzZXRzXC9ucG9wbGF5ZXItc3R5bGluZy5jc3MiLCJhc3NldFVybCI6IiIsIm92ZXJsYXkiOiJodHRwczpcL1wvYnJvYWRjYXN0LWltYWdlcy5ucG9yYWRpby5ubFwvd18xMjgwLGhfNzIwXC9zMy1ucG9yYWRpbzFcLzZxYjV2YXVzc2gzLW5wb3JhZGlvMS12c3ItMjAyMzAzMzAtMTkzODAzLTAwOHdhbC5qcGciLCJzbWFydHRhZyI6eyJzaXRlSWQiOiI1In0sImlkIjoiRlJBR01FTlRfRUxFTUVOVF9JRCIsImVsZW1lbnRJZCI6IkZSQUdNRU5UX0VMRU1FTlRfSUQiLCJpYXQiOjE2ODEyODc1MTAsIm5iZiI6MTY4MTI4NzUxMCwiZXhwIjoxNjgxMzE2MzEwLCJjb25zdW1lcklkIjoiYmJlNzIxMmQtNDNlNS00Y2JhLTgyM2ItOTc4ZDVmNzJmOWEyIiwibWVkaWFJZCI6IlBSRVBSX1JBMV8xNzI1NzM5OSIsImlzUGxheWxpc3QiOmZhbHNlLCJyZWZlcnJlclVybCI6bnVsbCwic2tpcENhdGFsb2ciOjAsInJlY29tbWVuZGF0aW9ucyI6MSwiaXNzIjoiZXlKcGRpSTZJaXRjTDA1NE5EWjVaM1V3YkdoUVdEbGliRTF6Wm5CQlBUMGlMQ0oyWVd4MVpTSTZJbTVQYUU1Skswa3JhRTFOZUhKTFZtdElNVGhNZWpadVlWcEliREZHYUhGMFdGUk9abFpoZVVWTmJVTlNiV0YyUzB0VU4wSkNZVkE1TUZsNVpYSnNjVmNpTENKdFlXTWlPaUkxTldFeU4yRTBNamxsT0RZMllUUmhNV0ZqWldJd01EQmtOR0V6WVRNM09EVTFPRGhpWmpFd1pXSTNZalptWkRrME16SmpaVFkzT0Roa01UTmtabVU1SW4wPSJ9.LJQV7V8zV-6GK89O8-8DpSF6PD4VpvfSPJgukd8hqvo"&gt;
&lt;/iframe&gt;</content><category term="news"></category><category term="balance"></category><category term="falling"></category><category term="engineering"></category><category term="robotics"></category><category term="radio"></category></entry><entry><title>Jens Keijser Successfully Defends His MSc Thesis</title><link href="https://mechmotum.github.io/blog/jens-keijser-graduates.html" rel="alternate"></link><published>2023-04-05T13:00:00-07:00</published><updated>2023-04-05T13:00:00-07:00</updated><author><name>Jason K. Moore</name></author><id>tag:mechmotum.github.io,2023-04-05:/blog/jens-keijser-graduates.html</id><summary type="html">&lt;img alt="" class="align-center" src="https://objects-us-east-1.dream.io/mechmotum/thesis-cover-jens-keijser.png" style="height: 400px;" /&gt;
&lt;p&gt;Jens Keijser successfully defended &amp;quot;&lt;a class="reference external" href="http://resolver.tudelft.nl/uuid:d48c5066-0c44-40a7-9f7e-4bebd3756dcd"&gt;Investigating the Theoretical Feasibility
of Longitudinal Motion Control in Indoor Cycling Trainers&lt;/a&gt;&amp;quot;. He
developed a simulation of an indoor cycling trainer that itself simulated
longitudinal motion with only cadence and crank torque as inputs. He verified
that the simulator had similar motion behavior as the cyclist …&lt;/p&gt;</summary><content type="html">&lt;img alt="" class="align-center" src="https://objects-us-east-1.dream.io/mechmotum/thesis-cover-jens-keijser.png" style="height: 400px;" /&gt;
&lt;p&gt;Jens Keijser successfully defended &amp;quot;&lt;a class="reference external" href="http://resolver.tudelft.nl/uuid:d48c5066-0c44-40a7-9f7e-4bebd3756dcd"&gt;Investigating the Theoretical Feasibility
of Longitudinal Motion Control in Indoor Cycling Trainers&lt;/a&gt;&amp;quot;. He
developed a simulation of an indoor cycling trainer that itself simulated
longitudinal motion with only cadence and crank torque as inputs. He verified
that the simulator had similar motion behavior as the cyclist would experience
riding on a treadmill by comparing to motion capture data.&lt;/p&gt;
&lt;p&gt;Jens was co-supervised by Jelle Hassnoot (Tacx/Garmin) and Jason K. Moore (TU
Delft). Everyone at the bicycle lab is very proud of Jens and wishes him the
best in his next adventures.&lt;/p&gt;
</content><category term="news"></category><category term="cycling"></category><category term="engineering"></category><category term="simulator"></category></entry><entry><title>Jan Heinen Successfully Defends His MSc Thesis</title><link href="https://mechmotum.github.io/blog/jan-heinen-graduates.html" rel="alternate"></link><published>2022-12-21T08:08:00-08:00</published><updated>2022-12-21T08:08:00-08:00</updated><author><name>Jason K. Moore</name></author><id>tag:mechmotum.github.io,2022-12-21:/blog/jan-heinen-graduates.html</id><summary type="html">&lt;table border="1" class="borderless docutils align-center" style="width: 60%"&gt;
&lt;colgroup&gt;
&lt;col width="50%" /&gt;
&lt;col width="50%" /&gt;
&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;&lt;img alt="cover" src="https://objects-us-east-1.dream.io/mechmotum/thesis-cover-heinen.png" style="height: 400px;" /&gt;&lt;/td&gt;
&lt;td&gt;&lt;img alt="headshot" src="https://objects-us-east-1.dream.io/mechmotum/headshot-heinen-jan.jpg" style="height: 400px;" /&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Jan Heinen successfully defended &amp;quot;&lt;a class="reference external" href="http://resolver.tudelft.nl/uuid:61f4e969-8bd1-4687-9942-b70024b216dc"&gt;Optimal Skateboard Geometry for Maximizing
Ollie Height&lt;/a&gt;&amp;quot;. He
developed a skateboard and skateboarder model capable of performing an &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Ollie_(skateboarding)"&gt;ollie&lt;/a&gt;.
He used trajectory optimization to maximize the height of the skateboard ollie
under physiological and dynamic constraints. Then he used his solver to
optimize the skateboard's geometry …&lt;/p&gt;</summary><content type="html">&lt;table border="1" class="borderless docutils align-center" style="width: 60%"&gt;
&lt;colgroup&gt;
&lt;col width="50%" /&gt;
&lt;col width="50%" /&gt;
&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;&lt;img alt="cover" src="https://objects-us-east-1.dream.io/mechmotum/thesis-cover-heinen.png" style="height: 400px;" /&gt;&lt;/td&gt;
&lt;td&gt;&lt;img alt="headshot" src="https://objects-us-east-1.dream.io/mechmotum/headshot-heinen-jan.jpg" style="height: 400px;" /&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Jan Heinen successfully defended &amp;quot;&lt;a class="reference external" href="http://resolver.tudelft.nl/uuid:61f4e969-8bd1-4687-9942-b70024b216dc"&gt;Optimal Skateboard Geometry for Maximizing
Ollie Height&lt;/a&gt;&amp;quot;. He
developed a skateboard and skateboarder model capable of performing an &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Ollie_(skateboarding)"&gt;ollie&lt;/a&gt;.
He used trajectory optimization to maximize the height of the skateboard ollie
under physiological and dynamic constraints. Then he used his solver to
optimize the skateboard's geometry to increase the height of the ollie. He
found a variety of board designs that could be ollied higher than a typical
board design with the best gaining 10 cm in height. The video below shows
animations of the results:&lt;/p&gt;
&lt;center&gt;
&lt;iframe width="560" height="315"
src="https://www.youtube.com/embed/jw5DmNnvD7c" title="YouTube video player"
frameborder="0" allow="accelerometer; autoplay; clipboard-write;
encrypted-media; gyroscope; picture-in-picture" allowfullscreen&gt;&lt;/iframe&gt;
&lt;/center&gt;&lt;p&gt;Jan was co-supervised by Raymund ten Broek (Urban Sports Performance Center),
Eline van der Kruk (TU Delft), and Jason K. Moore (TU Delft). Sam Brockie (TU
Delft) also provided mentorship. Everyone at the bicycle lab is very proud of
Jan and wishes him the best in his next adventures.&lt;/p&gt;
</content><category term="news"></category><category term="skateboard"></category><category term="engineering"></category><category term="optimization"></category></entry><entry><title>Dorus de Boer Successfully Defends His MSc Thesis</title><link href="https://mechmotum.github.io/blog/dorus-de-boer-graduates.html" rel="alternate"></link><published>2022-11-29T14:51:00-08:00</published><updated>2022-11-29T14:51:00-08:00</updated><author><name>Jason K. Moore</name></author><id>tag:mechmotum.github.io,2022-11-29:/blog/dorus-de-boer-graduates.html</id><summary type="html">&lt;table border="1" class="borderless docutils align-center" style="width: 60%"&gt;
&lt;colgroup&gt;
&lt;col width="50%" /&gt;
&lt;col width="50%" /&gt;
&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;&lt;img alt="cover" src="https://objects-us-east-1.dream.io/mechmotum/thesis-cover-de-boer.png" style="height: 400px;" /&gt;&lt;/td&gt;
&lt;td&gt;&lt;img alt="headshot" src="https://objects-us-east-1.dream.io/mechmotum/headshot-de-boer-dorus.jpg" style="height: 400px;" /&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Dorus de Boer successfully defended &amp;quot;&lt;a class="reference external" href="http://resolver.tudelft.nl/uuid:cc610be1-3aa2-4658-8584-2b1e7075f75a"&gt;Modeling a Professional Road Cycling Race
To Determine the Fastest Wheel-Tire Combination&lt;/a&gt;&amp;quot;. He
developed a simulation based model that can assess past road races and test
whether different wheels and tires would have improved the overall race time.
This information can be used to inform …&lt;/p&gt;</summary><content type="html">&lt;table border="1" class="borderless docutils align-center" style="width: 60%"&gt;
&lt;colgroup&gt;
&lt;col width="50%" /&gt;
&lt;col width="50%" /&gt;
&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;&lt;img alt="cover" src="https://objects-us-east-1.dream.io/mechmotum/thesis-cover-de-boer.png" style="height: 400px;" /&gt;&lt;/td&gt;
&lt;td&gt;&lt;img alt="headshot" src="https://objects-us-east-1.dream.io/mechmotum/headshot-de-boer-dorus.jpg" style="height: 400px;" /&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Dorus de Boer successfully defended &amp;quot;&lt;a class="reference external" href="http://resolver.tudelft.nl/uuid:cc610be1-3aa2-4658-8584-2b1e7075f75a"&gt;Modeling a Professional Road Cycling Race
To Determine the Fastest Wheel-Tire Combination&lt;/a&gt;&amp;quot;. He
developed a simulation based model that can assess past road races and test
whether different wheels and tires would have improved the overall race time.
This information can be used to inform choices about future races and provide
quantitative metrics for these choices. Dorus was co-supervised by Harm Ubbens
(Team DSM), Piet Rooijakkers (Team DSM), and Jason K. Moore (TU Delft).
Everyone at the bicycle lab is very proud of Dorus and wishes him the best in
his next step in his career.&lt;/p&gt;
</content><category term="news"></category><category term="bicycle"></category><category term="engineering"></category></entry><entry><title>Simonas Draukšas Successfully Defends His MSc Thesis</title><link href="https://mechmotum.github.io/blog/simonas-drauksas-graduates.html" rel="alternate"></link><published>2022-09-27T14:58:00-07:00</published><updated>2022-09-27T14:58:00-07:00</updated><author><name>Jason K. Moore</name></author><id>tag:mechmotum.github.io,2022-09-27:/blog/simonas-drauksas-graduates.html</id><summary type="html">&lt;table border="1" class="borderless docutils align-center" style="width: 60%"&gt;
&lt;colgroup&gt;
&lt;col width="50%" /&gt;
&lt;col width="50%" /&gt;
&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;&lt;img alt="cover" src="https://objects-us-east-1.dream.io/mechmotum/thesis-cover-drauksas.png" style="height: 400px;" /&gt;&lt;/td&gt;
&lt;td&gt;&lt;img alt="headshot" src="https://objects-us-east-1.dream.io/mechmotum/headshot-drauksas-simonas.jpg" style="height: 400px;" /&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;a class="reference external" href="https://www.linkedin.com/in/simonas-drauksas/"&gt;Simonas Draukšas&lt;/a&gt; successfully defended &amp;quot;&lt;a class="reference external" href="http://resolver.tudelft.nl/uuid:ece71f4a-c26b-470a-b09e-3b16686eee40"&gt;Using Model Predictive Control on a
Steer-by-Wire Bicycle for Performance Assistance&lt;/a&gt;&amp;quot;.
Simonas developed a real-time MPC controller to assist a bicyclist in making
lane change maneuvers on a treadmill in a semi virtual environment. His goal
was to determine if adding MPC control from the steer …&lt;/p&gt;</summary><content type="html">&lt;table border="1" class="borderless docutils align-center" style="width: 60%"&gt;
&lt;colgroup&gt;
&lt;col width="50%" /&gt;
&lt;col width="50%" /&gt;
&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;&lt;img alt="cover" src="https://objects-us-east-1.dream.io/mechmotum/thesis-cover-drauksas.png" style="height: 400px;" /&gt;&lt;/td&gt;
&lt;td&gt;&lt;img alt="headshot" src="https://objects-us-east-1.dream.io/mechmotum/headshot-drauksas-simonas.jpg" style="height: 400px;" /&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;a class="reference external" href="https://www.linkedin.com/in/simonas-drauksas/"&gt;Simonas Draukšas&lt;/a&gt; successfully defended &amp;quot;&lt;a class="reference external" href="http://resolver.tudelft.nl/uuid:ece71f4a-c26b-470a-b09e-3b16686eee40"&gt;Using Model Predictive Control on a
Steer-by-Wire Bicycle for Performance Assistance&lt;/a&gt;&amp;quot;.
Simonas developed a real-time MPC controller to assist a bicyclist in making
lane change maneuvers on a treadmill in a semi virtual environment. His goal
was to determine if adding MPC control from the steer motor improve performance
in hitting the virtual targets. His controller could accurately hit the targets
when the rider rode without hands and, with hands on, he discovered that the
rider's skill and task difficulty likely influence the performance gain or
loss. He was not able to show that the MPC control conclusively improved
performance, but we hope that once we apply all of his recommendations it will.
Simonas was co-supervised by Leila Alizadehsaravi (TU Delft), Laura
Marchal-Crespo (TU Delft), Jason Moore (TU Delft), and Riender Happee (TU
Delft). Everyone at the bicycle lab is very proud of Simonas and wishes him the
best in his new job as a control and embedded systems engineer.&lt;/p&gt;
</content><category term="news"></category><category term="bicycle"></category><category term="engineering"></category></entry><entry><title>Daniël Landré Successfully Defends His MSc Thesis</title><link href="https://mechmotum.github.io/blog/daniel-landre-graduates.html" rel="alternate"></link><published>2022-09-20T14:46:00-07:00</published><updated>2022-09-20T14:46:00-07:00</updated><author><name>Jason K. Moore</name></author><id>tag:mechmotum.github.io,2022-09-20:/blog/daniel-landre-graduates.html</id><summary type="html">&lt;table border="1" class="borderless docutils align-center" style="width: 60%"&gt;
&lt;colgroup&gt;
&lt;col width="50%" /&gt;
&lt;col width="50%" /&gt;
&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;&lt;img alt="cover" src="https://objects-us-east-1.dream.io/mechmotum/thesis-cover-landre.png" style="height: 400px;" /&gt;&lt;/td&gt;
&lt;td&gt;&lt;img alt="headshot" src="https://objects-us-east-1.dream.io/mechmotum/headshot-landre-daniel.png" style="height: 400px;" /&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;a class="reference external" href="https://www.linkedin.com/in/daniel-landre/"&gt;Daniël Landré&lt;/a&gt; successfully defended &amp;quot;&lt;a class="reference external" href="http://resolver.tudelft.nl/uuid:4996f53f-e493-4ddb-9924-c4110965fb48"&gt;Predicting cycling risk at
intersections with natural cycling data for speed-controlled e-bikes&lt;/a&gt;&amp;quot;. He
determined the sizes required for geo-fence speed control of e-bikes when you
turn off the assistance motor power. The sizes can be large for urban areas,
requiring urban cores to mostly covered, but …&lt;/p&gt;</summary><content type="html">&lt;table border="1" class="borderless docutils align-center" style="width: 60%"&gt;
&lt;colgroup&gt;
&lt;col width="50%" /&gt;
&lt;col width="50%" /&gt;
&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;&lt;img alt="cover" src="https://objects-us-east-1.dream.io/mechmotum/thesis-cover-landre.png" style="height: 400px;" /&gt;&lt;/td&gt;
&lt;td&gt;&lt;img alt="headshot" src="https://objects-us-east-1.dream.io/mechmotum/headshot-landre-daniel.png" style="height: 400px;" /&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;a class="reference external" href="https://www.linkedin.com/in/daniel-landre/"&gt;Daniël Landré&lt;/a&gt; successfully defended &amp;quot;&lt;a class="reference external" href="http://resolver.tudelft.nl/uuid:4996f53f-e493-4ddb-9924-c4110965fb48"&gt;Predicting cycling risk at
intersections with natural cycling data for speed-controlled e-bikes&lt;/a&gt;&amp;quot;. He
determined the sizes required for geo-fence speed control of e-bikes when you
turn off the assistance motor power. The sizes can be large for urban areas,
requiring urban cores to mostly covered, but can be per intersection for less
dense areas. Secondly, he found that rider changes in cadence and power
behavior most correlate with with dangerous intersections in Delft. He proposes
that collecting these measures of cyclists could be used to label intersections
as safer or less safe in addition to or in lieu of crash reports. Daniël Landré
was co-supervised by Victor L. Knoop (TU Delft), Bart Oor (Gazelle), and Jason
K.  Moore (TU Delft). This project was part of the ClickNL funded Fiets van de
Toekomst grant. Everyone at the bicycle lab is very proud of Daniël Landré and
wishes him the best in his next step in his career as a data scientist.&lt;/p&gt;
</content><category term="news"></category><category term="bicycle"></category><category term="engineering"></category></entry><entry><title>Ajaypal Singh Successfully Defends His MSc Thesis</title><link href="https://mechmotum.github.io/blog/ajaypal-singh-graduates.html" rel="alternate"></link><published>2022-08-24T11:15:00-07:00</published><updated>2022-08-24T11:15:00-07:00</updated><author><name>Jason K. Moore</name></author><id>tag:mechmotum.github.io,2022-08-24:/blog/ajaypal-singh-graduates.html</id><summary type="html">&lt;table border="1" class="borderless docutils align-center" style="width: 60%"&gt;
&lt;colgroup&gt;
&lt;col width="50%" /&gt;
&lt;col width="50%" /&gt;
&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;&lt;img alt="cover" src="https://objects-us-east-1.dream.io/mechmotum/thesis-cover-singh-ajaypal.png" style="height: 400px;" /&gt;&lt;/td&gt;
&lt;td&gt;&lt;img alt="headshot" src="https://objects-us-east-1.dream.io/mechmotum/headshot-singh-ajaypal.jpg" style="height: 400px;" /&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;a class="reference external" href="https://www.linkedin.com/in/singhajaypal2018/"&gt;Ajaypal Singh&lt;/a&gt; successfully defended &amp;quot;&lt;a class="reference external" href="http://resolver.tudelft.nl/uuid:dd809802-ea24-48b2-b63c-150611f612c9"&gt;Investigation of the chatter and
squeal phenomenon in bicycle disc brakes&lt;/a&gt;&amp;quot;. He
developed methods to experimentally determine combinations of bicycle
components that cause disc brake noise, developed an FEA model that can predict
disc brake squeal frequencies, and introduced simple countermeasures that
reduce unwanted squealing noises …&lt;/p&gt;</summary><content type="html">&lt;table border="1" class="borderless docutils align-center" style="width: 60%"&gt;
&lt;colgroup&gt;
&lt;col width="50%" /&gt;
&lt;col width="50%" /&gt;
&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;&lt;img alt="cover" src="https://objects-us-east-1.dream.io/mechmotum/thesis-cover-singh-ajaypal.png" style="height: 400px;" /&gt;&lt;/td&gt;
&lt;td&gt;&lt;img alt="headshot" src="https://objects-us-east-1.dream.io/mechmotum/headshot-singh-ajaypal.jpg" style="height: 400px;" /&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;a class="reference external" href="https://www.linkedin.com/in/singhajaypal2018/"&gt;Ajaypal Singh&lt;/a&gt; successfully defended &amp;quot;&lt;a class="reference external" href="http://resolver.tudelft.nl/uuid:dd809802-ea24-48b2-b63c-150611f612c9"&gt;Investigation of the chatter and
squeal phenomenon in bicycle disc brakes&lt;/a&gt;&amp;quot;. He
developed methods to experimentally determine combinations of bicycle
components that cause disc brake noise, developed an FEA model that can predict
disc brake squeal frequencies, and introduced simple countermeasures that
reduce unwanted squealing noises. Ajaypal was co-supervised by Hans Vreman
(Gazelle), Andrew Dressel (TU Delft), and Jason Moore (TU Delft). This project
was part of the ClickNL funded Fiets van de Toekomst grant. Everyone at the
bicycle lab is very proud of Ajaypal and wishes him the best in his next step
in his career.&lt;/p&gt;
</content><category term="news"></category><category term="bicycle"></category><category term="engineering"></category></entry><entry><title>Steer Assist Bicycle Featured on German Tech Website Heise Online</title><link href="https://mechmotum.github.io/blog/heise-online-article.html" rel="alternate"></link><published>2022-05-14T17:40:00-07:00</published><updated>2022-05-14T17:40:00-07:00</updated><author><name>Jason K. Moore</name></author><id>tag:mechmotum.github.io,2022-05-14:/blog/heise-online-article.html</id><content type="html">&lt;p&gt;Hans Dorsch, from Heise Online visited the Bicycle Lab to interview us and test
out the steer assist prototype. His article can be found here:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://www.heise.de/hintergrund/Assistierte-Radtour-Selbstlenkendes-E-Bike-im-Test-7074981.html"&gt;https://www.heise.de/hintergrund/Assistierte-Radtour-Selbstlenkendes-E-Bike-im-Test-7074981.html&lt;/a&gt;&lt;/p&gt;
</content><category term="news"></category></entry><entry><title>Bicycle Lab Featured on BBC CrowdScience Podcast</title><link href="https://mechmotum.github.io/blog/crowdscience-podcast.html" rel="alternate"></link><published>2022-04-30T15:53:00-07:00</published><updated>2022-04-30T15:53:00-07:00</updated><author><name>Jason K. Moore</name></author><id>tag:mechmotum.github.io,2022-04-30:/blog/crowdscience-podcast.html</id><summary type="html">&lt;p&gt;BBC World Service sent two reporters to interview us and try out some bicycles
that challenge your ability to ride a bicycle with a goal to answer the
question &amp;quot;How do you balance on a bicycle?&amp;quot; They asked very deep questions and
the presentation of the ideas from the interviewed …&lt;/p&gt;</summary><content type="html">&lt;p&gt;BBC World Service sent two reporters to interview us and try out some bicycles
that challenge your ability to ride a bicycle with a goal to answer the
question &amp;quot;How do you balance on a bicycle?&amp;quot; They asked very deep questions and
the presentation of the ideas from the interviewed neuroscientists and the
engineers give a great picture of the complexity of what we research in the
bicycle lab but the content is also accessible and relatable to an every day
bicycle rider.&lt;/p&gt;
&lt;p&gt;Listen to the 34 minute episode here: &lt;a class="reference external" href="https://www.bbc.co.uk/programmes/w3ct3j6r"&gt;https://www.bbc.co.uk/programmes/w3ct3j6r&lt;/a&gt;&lt;/p&gt;
</content><category term="news"></category></entry><entry><title>Francesca Andretta Successfully Defends Her MSc Thesis</title><link href="https://mechmotum.github.io/blog/francesca-andretta-graduates.html" rel="alternate"></link><published>2022-04-30T15:13:00-07:00</published><updated>2022-04-30T15:13:00-07:00</updated><author><name>Jason K. Moore</name></author><id>tag:mechmotum.github.io,2022-04-30:/blog/francesca-andretta-graduates.html</id><summary type="html">&lt;table border="1" class="borderless docutils align-center" style="width: 60%"&gt;
&lt;colgroup&gt;
&lt;col width="50%" /&gt;
&lt;col width="50%" /&gt;
&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;&lt;img alt="cover" src="https://objects-us-east-1.dream.io/mechmotum/thesis-cover-andretta-francesca.png" style="height: 400px;" /&gt;&lt;/td&gt;
&lt;td&gt;&lt;img alt="headshot" src="https://objects-us-east-1.dream.io/mechmotum/portrait-andretta-francesca.jpg" style="height: 400px;" /&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;a class="reference external" href="https://nl.linkedin.com/in/francesca-andretta-4175b3173"&gt;Francesca Andretta&lt;/a&gt; successfully defended &amp;quot;&lt;a class="reference external" href="http://resolver.tudelft.nl/uuid:41ffc288-91ce-40bc-adfc-ea6e5ba9e3dc"&gt;Learning cycling styles using
experimental trajectory data with Inverse Reinforcement Learning&lt;/a&gt;&amp;quot;. She
developed methods to characterize whether a bicyclist was behaving more
cautiously or more aggressively in their riding style based on GPS positioning
data. Francesca was co-supervised by Azita Dabiri in the Delft Center for …&lt;/p&gt;</summary><content type="html">&lt;table border="1" class="borderless docutils align-center" style="width: 60%"&gt;
&lt;colgroup&gt;
&lt;col width="50%" /&gt;
&lt;col width="50%" /&gt;
&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;&lt;img alt="cover" src="https://objects-us-east-1.dream.io/mechmotum/thesis-cover-andretta-francesca.png" style="height: 400px;" /&gt;&lt;/td&gt;
&lt;td&gt;&lt;img alt="headshot" src="https://objects-us-east-1.dream.io/mechmotum/portrait-andretta-francesca.jpg" style="height: 400px;" /&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;a class="reference external" href="https://nl.linkedin.com/in/francesca-andretta-4175b3173"&gt;Francesca Andretta&lt;/a&gt; successfully defended &amp;quot;&lt;a class="reference external" href="http://resolver.tudelft.nl/uuid:41ffc288-91ce-40bc-adfc-ea6e5ba9e3dc"&gt;Learning cycling styles using
experimental trajectory data with Inverse Reinforcement Learning&lt;/a&gt;&amp;quot;. She
developed methods to characterize whether a bicyclist was behaving more
cautiously or more aggressively in their riding style based on GPS positioning
data. Francesca was co-supervised by Azita Dabiri in the Delft Center for
Systems and Control and Jason K. Moore in BioMechanical Engineering. Everyone
at the bicycle lab is very proud of Francesca and wishes her the best!
Francesca will move into a full time position at &lt;a class="reference external" href="https://visionhealth.gmbh"&gt;VisionHealth&lt;/a&gt; in Munich.&lt;/p&gt;
</content><category term="news"></category><category term="bicycle"></category><category term="engineering"></category></entry><entry><title>Shannon van de Velde Successfully Defends Her MSc Thesis</title><link href="https://mechmotum.github.io/blog/shannon-van-de-velde-graduates.html" rel="alternate"></link><published>2022-03-31T12:00:00-07:00</published><updated>2022-03-31T12:00:00-07:00</updated><author><name>Jason K. Moore</name></author><id>tag:mechmotum.github.io,2022-03-31:/blog/shannon-van-de-velde-graduates.html</id><content type="html">&lt;img alt="" class="align-center" src="https://objects-us-east-1.dream.io/mechmotum/headshot-van-de-velde-shannon.jpg" style="height: 400px;" /&gt;
&lt;p&gt;Shannon van de Velde has successfully defeneded &amp;quot;&lt;a class="reference external" href="http://resolver.tudelft.nl/uuid:4571c00e-3bfc-4d9c-a46a-30a3b30b932a"&gt;Design of a setup for
experimental research on stability of a bicycle-rider system subject to large
perturbations&lt;/a&gt;&amp;quot;&lt;/p&gt;
&lt;p&gt;Everyone at the bicycle lab is very proud of Shannon and wishes her the best!
Shannon will move to Belgium for a new engineering position.&lt;/p&gt;
</content><category term="news"></category><category term="bicycle"></category><category term="engineering"></category></entry><entry><title>PhD Researcher Opening: Safe and Efficient Traffic of Connected Vulnerable Bicyclists and Automated Vehicles</title><link href="https://mechmotum.github.io/blog/connected-bikes-avs.html" rel="alternate"></link><published>2022-03-16T00:00:00-07:00</published><updated>2022-03-16T00:00:00-07:00</updated><author><name>Jason K. Moore</name></author><id>tag:mechmotum.github.io,2022-03-16:/blog/connected-bikes-avs.html</id><summary type="html">&lt;div class="alert alert-warning topic"&gt;
&lt;p class="topic-title"&gt;Filled&lt;/p&gt;
&lt;p&gt;This job has been filled and is no longer open.&lt;/p&gt;
&lt;/div&gt;
&lt;img alt="" class="align-center" src="https://objects-us-east-1.dream.io/mechmotum/connected-bikes-avs.png" style="width: 300px;" /&gt;
&lt;div class="section" id="description"&gt;
&lt;h2&gt;Description&lt;/h2&gt;
&lt;p&gt;We are seeking a PhD researcher for a 4-year contract in a multidisciplinary
research project to improve the safety of bicyclists and automated vehicles.&lt;/p&gt;
&lt;p&gt;Transportation of the future will include a mixture of automated vehicles (AVs)
and vulnerable …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;div class="alert alert-warning topic"&gt;
&lt;p class="topic-title"&gt;Filled&lt;/p&gt;
&lt;p&gt;This job has been filled and is no longer open.&lt;/p&gt;
&lt;/div&gt;
&lt;img alt="" class="align-center" src="https://objects-us-east-1.dream.io/mechmotum/connected-bikes-avs.png" style="width: 300px;" /&gt;
&lt;div class="section" id="description"&gt;
&lt;h2&gt;Description&lt;/h2&gt;
&lt;p&gt;We are seeking a PhD researcher for a 4-year contract in a multidisciplinary
research project to improve the safety of bicyclists and automated vehicles.&lt;/p&gt;
&lt;p&gt;Transportation of the future will include a mixture of automated vehicles (AVs)
and vulnerable road users (VRUs), like bicyclists and pedestrians. Unregulated
mixing of automated vehicles into urban areas has the potential to cause a rise
in transportation related death and injury. This mixing also exacerbates safety
concerns for vulnerable road users. Current VRU detection and its associated
trajectory planning are based on information that is collected solely from AV
sensors which is not sufficient to accurately predict the near-future behavior
of vulnerable road users. We want to validate the hypothesis that digital
information sharing among all road users combined with physiologically and
dynamically realistic predictive models can guarantee overall safety. Our
project goal is to achieve safe and socially acceptable interactions among
automated vehicles and vulnerable bicyclists in dense urban environments by
leveraging information shared in a two-way vehicle↔bicycle (V2B/B2V)
communication system.&lt;/p&gt;
&lt;p&gt;You will be supervised by Dr. Jason K. Moore, Dr. Azita Dabiri, Dr. Frederik
Schulte, and Dr. Ir. Riender Happee. You will work with BSc, MSc, and PhD
candidates in the involved research groups that span the BioMechanical
Engineering, Cognitive Robotics, Delft Center for Systems and Control, and
Maritime and Transport Technology departments. Specifically, the PhD candidate
will have the opportunity to collaborate with others for human in the loop
evaluation in terms of acceptance and perceived safety.&lt;/p&gt;
&lt;p&gt;Opportunities for growing your academic career will be available, such as
mentoring BSc/MSc Students, conference presentations, networking, and teaching.&lt;/p&gt;
&lt;p&gt;We are looking for candidates that can start during the summer of 2022.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="requirements"&gt;
&lt;h2&gt;Requirements&lt;/h2&gt;
&lt;p&gt;You should have:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;MSc in engineering or similar discipline by the start date of the position&lt;/li&gt;
&lt;li&gt;Experience with simulation&lt;/li&gt;
&lt;li&gt;Experience with a programming language (e.g., Python, Java, Matlab, etc.)&lt;/li&gt;
&lt;li&gt;Good written and oral communication skills in English&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The following aspects will help you stand out:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Thriving in multidisciplinary environments&lt;/li&gt;
&lt;li&gt;Self-motivation&lt;/li&gt;
&lt;li&gt;Curiosity-driven working attitude&lt;/li&gt;
&lt;li&gt;Knowledge of control theory, transportation systems, machine learning, or
vehicle dynamics&lt;/li&gt;
&lt;li&gt;Prior experience with SUMO (&lt;a class="reference external" href="https://www.eclipse.org/sumo/"&gt;https://www.eclipse.org/sumo/&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Keep in mind that this describes the background we imagine would best fit the
role. Even if you do not meet all the requirements and feel that you are up for
the task, we absolutely want to see your application!&lt;/p&gt;
&lt;p&gt;Doing a PhD at TU Delft requires English proficiency at a certain level to
ensure that the candidate is able to communicate and interact well, participate
in English-taught Doctoral Education courses, and write scientific articles and
a final thesis. For more details please check the Graduate Schools Admission
Requirements.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="to-apply"&gt;
&lt;h2&gt;To Apply&lt;/h2&gt;
&lt;p&gt;Submit:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Motivation and CV.&lt;/li&gt;
&lt;li&gt;A 1-page original research proposal with your ideas for addressing the
problems described in the description.&lt;/li&gt;
&lt;li&gt;Abstract of your MSc thesis&lt;/li&gt;
&lt;li&gt;Contact information for up to 3 references&lt;/li&gt;
&lt;li&gt;List of grades&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;to the TU Delft website application portal linked below. We will not process
applications sent by email and/or post.&lt;/p&gt;
&lt;p&gt;Visit TU Delft's website to find more employment details and apply for the
position (vacancy number: TUD02119):&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://www.tudelft.nl/over-tu-delft/werken-bij-tu-delft/vacatures/details/?nPostingId=2394&amp;amp;nPostingTargetId=6126&amp;amp;id=QEZFK026203F3VBQBLO6G68W9&amp;amp;LG=UK&amp;amp;mask=external"&gt;https://www.tudelft.nl/over-tu-delft/werken-bij-tu-delft/vacatures/details/?nPostingId=2394&amp;amp;nPostingTargetId=6126&amp;amp;id=QEZFK026203F3VBQBLO6G68W9&amp;amp;LG=UK&amp;amp;mask=external&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Applications Due April 14, 2022&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="additional-information"&gt;
&lt;h2&gt;Additional information&lt;/h2&gt;
&lt;p&gt;For more information about this vacancy, please contact Jason Moore, email:
&lt;a class="reference external" href="mailto:j.k.moore&amp;#64;tudelft.nl"&gt;j.k.moore&amp;#64;tudelft.nl&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For information about the selection procedure, please contact Anita van Vianen,
HR Advisor, email: &lt;a class="reference external" href="mailto:application-3mE&amp;#64;tudelft.nl"&gt;application-3mE&amp;#64;tudelft.nl&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
</content><category term="jobs"></category><category term="bicycle"></category><category term="phd"></category><category term="engineering"></category></entry><entry><title>Postdoctoral Researcher Opening: Advancing Biomechanical Modeling By Improving SymPy Code Generation (x/f/m)</title><link href="https://mechmotum.github.io/blog/sympy-czi-postdoc.html" rel="alternate"></link><published>2022-02-02T00:00:00-08:00</published><updated>2022-02-02T00:00:00-08:00</updated><author><name>Jason K. Moore</name></author><id>tag:mechmotum.github.io,2022-02-02:/blog/sympy-czi-postdoc.html</id><summary type="html">&lt;div class="alert alert-warning topic"&gt;
&lt;p class="topic-title"&gt;Filled&lt;/p&gt;
&lt;p&gt;This job has been filled and is no longer open.&lt;/p&gt;
&lt;/div&gt;
&lt;table border="1" class="borderless docutils align-center" style="width: 50%"&gt;
&lt;colgroup&gt;
&lt;col width="50%" /&gt;
&lt;col width="50%" /&gt;
&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;&lt;img alt="czi-logo" src="https://objects-us-east-1.dream.io/mechmotum/czi-logo.png" style="height: 100px;" /&gt;&lt;/td&gt;
&lt;td&gt;&lt;img alt="sympy-logo" src="https://objects-us-east-1.dream.io/mechmotum/sympy-logo.png" style="height: 100px;" /&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class="section" id="description"&gt;
&lt;h2&gt;Description&lt;/h2&gt;
&lt;p&gt;The TU Delft Bicycle Lab is seeking a postdoctoral researcher for a 1 year
equivalent contract (full or part time). You will work on a sub-project of
&lt;a class="reference external" href="https://chanzuckerberg.com/eoss/proposals/sympy-improving-foundational-open-source-symbolic-mathematics-for-science/"&gt;SymPy's &amp;quot;Improving Foundational Open Source Symbolic Mathematics for Science&amp;quot;
grant&lt;/a&gt;
funded …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;div class="alert alert-warning topic"&gt;
&lt;p class="topic-title"&gt;Filled&lt;/p&gt;
&lt;p&gt;This job has been filled and is no longer open.&lt;/p&gt;
&lt;/div&gt;
&lt;table border="1" class="borderless docutils align-center" style="width: 50%"&gt;
&lt;colgroup&gt;
&lt;col width="50%" /&gt;
&lt;col width="50%" /&gt;
&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;&lt;img alt="czi-logo" src="https://objects-us-east-1.dream.io/mechmotum/czi-logo.png" style="height: 100px;" /&gt;&lt;/td&gt;
&lt;td&gt;&lt;img alt="sympy-logo" src="https://objects-us-east-1.dream.io/mechmotum/sympy-logo.png" style="height: 100px;" /&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class="section" id="description"&gt;
&lt;h2&gt;Description&lt;/h2&gt;
&lt;p&gt;The TU Delft Bicycle Lab is seeking a postdoctoral researcher for a 1 year
equivalent contract (full or part time). You will work on a sub-project of
&lt;a class="reference external" href="https://chanzuckerberg.com/eoss/proposals/sympy-improving-foundational-open-source-symbolic-mathematics-for-science/"&gt;SymPy's &amp;quot;Improving Foundational Open Source Symbolic Mathematics for Science&amp;quot;
grant&lt;/a&gt;
funded by the &lt;a class="reference external" href="https://chanzuckerberg.com/newsroom/czi-awards-16-million-for-foundational-open-source-software-tools-essential-to-biomedicine/"&gt;Chan-Zuckerberg Foundation’s “Essential Open Source Software for
Science&amp;quot; program&lt;/a&gt;.
The purpose of the overall grant is to improve the SymPy Python symbolic
mathematics library in the key areas of performance, code generation, and
documentation. The &lt;a class="reference external" href="https://doi.org/10.6084/m9.figshare.16590053.v1"&gt;full grant proposal&lt;/a&gt; is available publicly on
Figshare.&lt;/p&gt;
&lt;p&gt;We believe SymPy is the most widely used general purpose open source computer
algebra system (CAS). The software is over 16 years old and has over 800k
downloads per month on PyPi. It is a full featured CAS, with over 700k lines of
Python code. &lt;a class="reference external" href="http://dx.doi.org/10.7717/peerj-cs.103"&gt;The SymPy paper (Meurer, Aaron, et al. &amp;quot;SymPy: Symbolic computing
in Python.&amp;quot; PeerJ Computer Science 3 (2017): e103.)&lt;/a&gt; describes the software and some of
its uses.&lt;/p&gt;
&lt;p&gt;Code generation plays a central role in SymPy’s roadmap for supporting
scientific codes. The code generation roadmap prioritizes usability, generating
high performance code, and supporting a wide array of languages. This
postdoctoral research project will focus on improving usability and performance
of code generation guided by a performance critical musculoskeletal model
application. This model will be adopted from a bicycle vehicle model and a
human upper body and arm model. This human-vehicle model includes stiff
dynamics, holonomic and nonholonomic constraints, thousands of algebraic
operations, and complex force definitions; all features that strain SymPy’s
ability to best competitors in advanced biomechanical simulations.&lt;/p&gt;
&lt;p&gt;The postdoctoral research project has two primary outcomes:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Improve SymPy’s numerical code generation capabilities for general use
cases.&lt;/li&gt;
&lt;li&gt;Develop a musculoskeletal driven bicycle model that demonstrates domain
specific improvements to the code generation capabilities of SymPy.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The developed software will be contributed to SymPy as open source software
(BSD) and the modeling results will be submitted to appropriate scientific
journals.&lt;/p&gt;
&lt;p&gt;You will simultaneously work as a member of the TU Delft Bicycle Lab and the
SymPy development team. You will work with BSc, MSc, and PhD candidates in the
lab as well as members of the SymPy community. You will work with and be
directly mentored by Jason K. Moore.&lt;/p&gt;
&lt;p&gt;This position offers flexible work hours, the possibility of remote work
(country dependent), and the possibility of full or part time work.&lt;/p&gt;
&lt;p&gt;Opportunities for growing your academic career will be available, such as
mentoring BSc/MSc Students and PhD candidates, conference presentations,
networking, teaching, and grant writing.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="requirements"&gt;
&lt;h2&gt;Requirements&lt;/h2&gt;
&lt;p&gt;You should have:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;A STEM Ph.D. by the start date of the position&lt;/li&gt;
&lt;li&gt;Proficiency with the Python programming language&lt;/li&gt;
&lt;li&gt;Good written and oral communication skills in English&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The following skills will help you stand out:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Open source software contribution best practices and experience&lt;/li&gt;
&lt;li&gt;Experience with SymPy&lt;/li&gt;
&lt;li&gt;Experience with symbolic computation, numerical computing, and/or code generation&lt;/li&gt;
&lt;li&gt;Experience with C/C++ or Fortran&lt;/li&gt;
&lt;li&gt;Computational multibody dynamics experience&lt;/li&gt;
&lt;li&gt;Musculoskeletal modeling experience&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Keep in mind that this describes the background we imagine would best fit the
role. Even if you do not meet all of the requirements and feel that you are up
for the task, we absolutely want to see your application!&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="diversity-and-inclusion"&gt;
&lt;h2&gt;Diversity and Inclusion&lt;/h2&gt;
&lt;p&gt;The TU Delft Bicycle Lab and SymPy are committed to advancing diversity,
equity, and inclusion efforts across open source software development with this
position, aligning with CZI’s goals. We especially encourage applicants from
underrepresented groups in open source software to apply.&lt;/p&gt;
&lt;p&gt;TU Delft values a safe, inclusive and diverse work environment. To reinforce
that, we have committed ourselves to the joint &lt;a class="reference external" href="https://www.vsnu.nl/en_GB/news.html/nieuwsbericht/512"&gt;Statement Social Safety&lt;/a&gt; of the Association of
Universities in the Netherlands and the &lt;a class="reference external" href="https://www.rijksoverheid.nl/actueel/nieuws/2020/09/01/nieuw-nationaal-actieplan-voor-diversiteit-en-inclusie"&gt;National Action Plan for Diversity and
Inclusion&lt;/a&gt;.
In addition to that, we have a Social Safety Programme.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="to-apply"&gt;
&lt;h2&gt;To Apply&lt;/h2&gt;
&lt;p&gt;Submit (in PDF format) a 1 page cover letter explaining your motivation and fit
for the position, a C.V., one example peer reviewed scientific publication
where you are the primary author, and examples of your Python software
development proficiency (URLs to public code are encouraged).&lt;/p&gt;
&lt;p&gt;Visit TU Delft's website to find more employment details and apply for the
position (vacancy number: TUD01994):&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://www.tudelft.nl/over-tu-delft/werken-bij-tu-delft/vacatures/details/?nPostingId=2261&amp;amp;nPostingTargetId=5624&amp;amp;id=QEZFK026203F3VBQBLO6G68W9&amp;amp;LG=UK&amp;amp;mask=external"&gt;https://www.tudelft.nl/over-tu-delft/werken-bij-tu-delft/vacatures/details/?nPostingId=2261&amp;amp;nPostingTargetId=5624&amp;amp;id=QEZFK026203F3VBQBLO6G68W9&amp;amp;LG=UK&amp;amp;mask=external&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Applications Due February 28, 2022&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="additional-information"&gt;
&lt;h2&gt;Additional information&lt;/h2&gt;
&lt;p&gt;For more information about this vacancy, please contact Jason Moore, email:
&lt;a class="reference external" href="mailto:j.k.moore&amp;#64;tudelft.nl"&gt;j.k.moore&amp;#64;tudelft.nl&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For information about the selection procedure, please contact Anita van Vianen,
HR Advisor, email: &lt;a class="reference external" href="mailto:application-3mE&amp;#64;tudelft.nl"&gt;application-3mE&amp;#64;tudelft.nl&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
</content><category term="jobs"></category><category term="bicycle"></category><category term="postdoc"></category><category term="engineering"></category><category term="software"></category></entry><entry><title>Postdoctoral Researcher Opening: Bicycle of the Future</title><link href="https://mechmotum.github.io/blog/bicycle-of-the-future-postdoc-2.html" rel="alternate"></link><published>2021-12-08T00:00:00-08:00</published><updated>2021-12-08T00:00:00-08:00</updated><author><name>Jason K. Moore</name></author><id>tag:mechmotum.github.io,2021-12-08:/blog/bicycle-of-the-future-postdoc-2.html</id><summary type="html">&lt;div class="alert alert-warning topic"&gt;
&lt;p class="topic-title"&gt;Filled&lt;/p&gt;
&lt;p&gt;This job has been filled and is no longer open.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="" src="https://objects-us-east-1.dream.io/mechmotum/gazelle-steer-assist-bicycle.jpg" style="width: 600px;" /&gt;
&lt;p class="caption"&gt;Steer Assist Bicycle: an example bicycle technology developed at the TU
Delft Bicycle lab with Gazelle.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="job-description"&gt;
&lt;h2&gt;Job description&lt;/h2&gt;
&lt;p&gt;The TU Delft Bicycle Lab is seeking a postdoctoral researcher for a &lt;strong&gt;12
month&lt;/strong&gt; full time contract. The researcher will develop …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;div class="alert alert-warning topic"&gt;
&lt;p class="topic-title"&gt;Filled&lt;/p&gt;
&lt;p&gt;This job has been filled and is no longer open.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="" src="https://objects-us-east-1.dream.io/mechmotum/gazelle-steer-assist-bicycle.jpg" style="width: 600px;" /&gt;
&lt;p class="caption"&gt;Steer Assist Bicycle: an example bicycle technology developed at the TU
Delft Bicycle lab with Gazelle.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="job-description"&gt;
&lt;h2&gt;Job description&lt;/h2&gt;
&lt;p&gt;The TU Delft Bicycle Lab is seeking a postdoctoral researcher for a &lt;strong&gt;12
month&lt;/strong&gt; full time contract. The researcher will develop and execute an
engineering research project for the &amp;quot;Bicycle of the Future&amp;quot; grant which is
supported by ClickNL (&lt;a class="reference external" href="https://www.clicknl.nl"&gt;https://www.clicknl.nl&lt;/a&gt;) and Royal Dutch Gazelle
(&lt;a class="reference external" href="https://www.gazellebikes.com"&gt;https://www.gazellebikes.com&lt;/a&gt;). The aim of the TU Delft and Gazelle
collaboration is to arrive at design solutions that make the bicycle both safer
and more employable in society.&lt;/p&gt;
&lt;p&gt;You will work on a project co-developed with the bicycle lab and Royal Dutch
Gazelle that fits into one or more of these three topics:&lt;/p&gt;
&lt;div class="section" id="bicycle-safety-solutions"&gt;
&lt;h3&gt;Bicycle safety solutions&lt;/h3&gt;
&lt;p&gt;Making the bicycle safer from design changes, braking and traction control, and
tailoring the design and assistance to the skills of the rider. Solutions that
prolong and increase bicycling by the elderly are of particular interest.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="smart-mobility-solutions"&gt;
&lt;h3&gt;Smart mobility solutions&lt;/h3&gt;
&lt;p&gt;Cloud connected electric bicycles open the opportunity to use data collected
from a variety of sensors (accelerometers, gyroscopes, GNSS receiver, torque
load cells, etc.) to improve transportation safety, efficiency,
personalization, and many other aspects. This topic should use this technology
to bring computer intelligence to bicycle transportation with a focus on the
vehicle's use of this information.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="advanced-transport-solutions"&gt;
&lt;h3&gt;Advanced transport solutions&lt;/h3&gt;
&lt;p&gt;Electric bicycles are being widely used to transport goods within urban
environments. This topic should develop and showcase new technology to the
design of electric cargo bicycles to improve the logistics and supply chain in
urban cargo delivery.&lt;/p&gt;
&lt;p&gt;Development of proof-of-concept prototype vehicles and vehicle technologies is
a desired outcome of the proposed research projects.&lt;/p&gt;
&lt;p&gt;You will work at TU Delft in the 3ME Faculty, mostly in the TU Delft Bicycle
Laboratory. You will work closely with and be mentored by Jason K. Moore. You
will also work with and collaborate with Gazelle employees. Lastly, you will
work with BSc, MSc, and PhD candidates of the lab.&lt;/p&gt;
&lt;p&gt;Opportunities for growing your academic career will be available, such as
mentoring BSc/Students and PhD candidates, conference presentation, networking,
and grant writing.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="requirements"&gt;
&lt;h2&gt;Requirements&lt;/h2&gt;
&lt;p&gt;You have a PhD degree in engineering or relevant discipline by the start date
of the position. If a relevant discipline, please justify in your cover letter.
Academic command of the English language is required, as well as strong
communication skills.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="to-apply"&gt;
&lt;h2&gt;To Apply&lt;/h2&gt;
&lt;p&gt;To apply, please submit (in PDF format) a 1 page cover letter explaining your
fit for the position and motivation, a C.V., an example peer reviewed
scientific publication where you are the primary author, and a 1 page project
proposal by 7 January 2022 via the application button.&lt;/p&gt;
&lt;p&gt;The proposal will be reviewed for novelty, feasibility, and alignment with the
stated project topics. The idea in the proposal will be used as a starting
point in developing your project with the TU Delft Bicycle Lab and Royal Dutch
Gazelle if hired.&lt;/p&gt;
&lt;p&gt;Visit TU Delft's website to find more employment details and apply for the
position (vacancy number: TUD01463):&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://www.tudelft.nl/over-tu-delft/werken-bij-tu-delft/vacatures/details?jobId=4904&amp;amp;jobTitle=Postdoctoral%20Researcher%20Bicycle%20of%20the%20Future"&gt;https://www.tudelft.nl/over-tu-delft/werken-bij-tu-delft/vacatures/details?jobId=4904&amp;amp;jobTitle=Postdoctoral%20Researcher%20Bicycle%20of%20the%20Future&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Applications Due January 7, 2022&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="additional-information"&gt;
&lt;h2&gt;Additional information&lt;/h2&gt;
&lt;p&gt;For more information about this vacancy, please contact Jason K. Moore,
Assistant Professor, email: &lt;a class="reference external" href="mailto:j.k.moore&amp;#64;tudelft.nl"&gt;j.k.moore&amp;#64;tudelft.nl&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For information about the application procedure, please contact Ms. Anita van
Vianen, email: &lt;a class="reference external" href="mailto:application-3me&amp;#64;tudelft.nl"&gt;application-3me&amp;#64;tudelft.nl&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
</content><category term="jobs"></category><category term="bicycle"></category><category term="postdoc"></category><category term="engineering"></category></entry><entry><title>Postdoctoral Researcher Opening: Bicycle of the Future</title><link href="https://mechmotum.github.io/blog/bicycle-of-the-future-postdoc-2.html" rel="alternate"></link><published>2021-12-08T00:00:00-08:00</published><updated>2021-12-08T00:00:00-08:00</updated><author><name>Jason K. Moore</name></author><id>tag:mechmotum.github.io,2021-12-08:/blog/bicycle-of-the-future-postdoc-2.html</id><summary type="html">&lt;div class="alert alert-warning topic"&gt;
&lt;p class="topic-title"&gt;Filled&lt;/p&gt;
&lt;p&gt;This job has been filled and is no longer open.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="" src="https://objects-us-east-1.dream.io/mechmotum/gazelle-steer-assist-bicycle.jpg" style="width: 600px;" /&gt;
&lt;p class="caption"&gt;Steer Assist Bicycle: an example bicycle technology developed at the TU
Delft Bicycle lab with Gazelle.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="job-description"&gt;
&lt;h2&gt;Job description&lt;/h2&gt;
&lt;p&gt;The TU Delft Bicycle Lab is seeking a postdoctoral researcher for a &lt;strong&gt;12
month&lt;/strong&gt; full time contract. The researcher will develop …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;div class="alert alert-warning topic"&gt;
&lt;p class="topic-title"&gt;Filled&lt;/p&gt;
&lt;p&gt;This job has been filled and is no longer open.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="" src="https://objects-us-east-1.dream.io/mechmotum/gazelle-steer-assist-bicycle.jpg" style="width: 600px;" /&gt;
&lt;p class="caption"&gt;Steer Assist Bicycle: an example bicycle technology developed at the TU
Delft Bicycle lab with Gazelle.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="job-description"&gt;
&lt;h2&gt;Job description&lt;/h2&gt;
&lt;p&gt;The TU Delft Bicycle Lab is seeking a postdoctoral researcher for a &lt;strong&gt;12
month&lt;/strong&gt; full time contract. The researcher will develop and execute an
engineering research project for the &amp;quot;Bicycle of the Future&amp;quot; grant which is
supported by ClickNL (&lt;a class="reference external" href="https://www.clicknl.nl"&gt;https://www.clicknl.nl&lt;/a&gt;) and Royal Dutch Gazelle
(&lt;a class="reference external" href="https://www.gazellebikes.com"&gt;https://www.gazellebikes.com&lt;/a&gt;). The aim of the TU Delft and Gazelle
collaboration is to arrive at design solutions that make the bicycle both safer
and more employable in society.&lt;/p&gt;
&lt;p&gt;You will work on a project co-developed with the bicycle lab and Royal Dutch
Gazelle that fits into one or more of these three topics:&lt;/p&gt;
&lt;div class="section" id="bicycle-safety-solutions"&gt;
&lt;h3&gt;Bicycle safety solutions&lt;/h3&gt;
&lt;p&gt;Making the bicycle safer from design changes, braking and traction control, and
tailoring the design and assistance to the skills of the rider. Solutions that
prolong and increase bicycling by the elderly are of particular interest.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="smart-mobility-solutions"&gt;
&lt;h3&gt;Smart mobility solutions&lt;/h3&gt;
&lt;p&gt;Cloud connected electric bicycles open the opportunity to use data collected
from a variety of sensors (accelerometers, gyroscopes, GNSS receiver, torque
load cells, etc.) to improve transportation safety, efficiency,
personalization, and many other aspects. This topic should use this technology
to bring computer intelligence to bicycle transportation with a focus on the
vehicle's use of this information.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="advanced-transport-solutions"&gt;
&lt;h3&gt;Advanced transport solutions&lt;/h3&gt;
&lt;p&gt;Electric bicycles are being widely used to transport goods within urban
environments. This topic should develop and showcase new technology to the
design of electric cargo bicycles to improve the logistics and supply chain in
urban cargo delivery.&lt;/p&gt;
&lt;p&gt;Development of proof-of-concept prototype vehicles and vehicle technologies is
a desired outcome of the proposed research projects.&lt;/p&gt;
&lt;p&gt;You will work at TU Delft in the 3ME Faculty, mostly in the TU Delft Bicycle
Laboratory. You will work closely with and be mentored by Jason K. Moore. You
will also work with and collaborate with Gazelle employees. Lastly, you will
work with BSc, MSc, and PhD candidates of the lab.&lt;/p&gt;
&lt;p&gt;Opportunities for growing your academic career will be available, such as
mentoring BSc/Students and PhD candidates, conference presentation, networking,
and grant writing.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="requirements"&gt;
&lt;h2&gt;Requirements&lt;/h2&gt;
&lt;p&gt;You have a PhD degree in engineering or relevant discipline by the start date
of the position. If a relevant discipline, please justify in your cover letter.
Academic command of the English language is required, as well as strong
communication skills.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="to-apply"&gt;
&lt;h2&gt;To Apply&lt;/h2&gt;
&lt;p&gt;To apply, please submit (in PDF format) a 1 page cover letter explaining your
fit for the position and motivation, a C.V., an example peer reviewed
scientific publication where you are the primary author, and a 1 page project
proposal by 7 January 2022 via the application button.&lt;/p&gt;
&lt;p&gt;The proposal will be reviewed for novelty, feasibility, and alignment with the
stated project topics. The idea in the proposal will be used as a starting
point in developing your project with the TU Delft Bicycle Lab and Royal Dutch
Gazelle if hired.&lt;/p&gt;
&lt;p&gt;Visit TU Delft's website to find more employment details and apply for the
position (vacancy number: TUD01463):&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://www.tudelft.nl/over-tu-delft/werken-bij-tu-delft/vacatures/details?jobId=4904&amp;amp;jobTitle=Postdoctoral%20Researcher%20Bicycle%20of%20the%20Future"&gt;https://www.tudelft.nl/over-tu-delft/werken-bij-tu-delft/vacatures/details?jobId=4904&amp;amp;jobTitle=Postdoctoral%20Researcher%20Bicycle%20of%20the%20Future&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Applications Due January 7, 2022&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="additional-information"&gt;
&lt;h2&gt;Additional information&lt;/h2&gt;
&lt;p&gt;For more information about this vacancy, please contact Jason K. Moore,
Assistant Professor, email: &lt;a class="reference external" href="mailto:j.k.moore&amp;#64;tudelft.nl"&gt;j.k.moore&amp;#64;tudelft.nl&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For information about the application procedure, please contact Ms. Anita van
Vianen, email: &lt;a class="reference external" href="mailto:application-3me&amp;#64;tudelft.nl"&gt;application-3me&amp;#64;tudelft.nl&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
</content><category term="jobs"></category><category term="bicycle"></category><category term="postdoc"></category><category term="engineering"></category></entry><entry><title>Jelle Haasnoot Successfully Defends His MSc Thesis</title><link href="https://mechmotum.github.io/blog/jelle-haasnoot-graduates.html" rel="alternate"></link><published>2021-11-08T11:30:00-08:00</published><updated>2021-11-08T11:30:00-08:00</updated><author><name>Jason K. Moore</name></author><id>tag:mechmotum.github.io,2021-11-08:/blog/jelle-haasnoot-graduates.html</id><summary type="html">&lt;table border="1" class="borderless docutils align-center" style="width: 60%"&gt;
&lt;colgroup&gt;
&lt;col width="50%" /&gt;
&lt;col width="50%" /&gt;
&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;&lt;img alt="cover" src="https://objects-us-east-1.dream.io/mechmotum/thesis-cover-haasnoot.png" style="height: 400px;" /&gt;&lt;/td&gt;
&lt;td&gt;&lt;img alt="headshot" src="https://objects-us-east-1.dream.io/mechmotum/headshot-haasnoot-jelle.png" style="height: 400px;" /&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Jelle Haasnoot successfully defended &amp;quot;&lt;a class="reference external" href="http://resolver.tudelft.nl/uuid:39e7c31e-2b00-4ea6-908c-a18019b863f5"&gt;Design and Validation of Steer, Roll,
Yaw and Sway Motion of a Kinematics-Based Bicycle Simulator&lt;/a&gt;.
Everyone at the bicycle lab is very proud of Jelle and wishes him the best!
Jelle will move into a full time position at &lt;a class="reference external" href="https://www.garmin.com/nl-NL/tacx/"&gt;Tacx&lt;/a&gt; and will likely mentor some
future …&lt;/p&gt;</summary><content type="html">&lt;table border="1" class="borderless docutils align-center" style="width: 60%"&gt;
&lt;colgroup&gt;
&lt;col width="50%" /&gt;
&lt;col width="50%" /&gt;
&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;&lt;img alt="cover" src="https://objects-us-east-1.dream.io/mechmotum/thesis-cover-haasnoot.png" style="height: 400px;" /&gt;&lt;/td&gt;
&lt;td&gt;&lt;img alt="headshot" src="https://objects-us-east-1.dream.io/mechmotum/headshot-haasnoot-jelle.png" style="height: 400px;" /&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Jelle Haasnoot successfully defended &amp;quot;&lt;a class="reference external" href="http://resolver.tudelft.nl/uuid:39e7c31e-2b00-4ea6-908c-a18019b863f5"&gt;Design and Validation of Steer, Roll,
Yaw and Sway Motion of a Kinematics-Based Bicycle Simulator&lt;/a&gt;.
Everyone at the bicycle lab is very proud of Jelle and wishes him the best!
Jelle will move into a full time position at &lt;a class="reference external" href="https://www.garmin.com/nl-NL/tacx/"&gt;Tacx&lt;/a&gt; and will likely mentor some
future TU Delft interns in the near future.&lt;/p&gt;
</content><category term="news"></category><category term="bicycle"></category><category term="engineering"></category></entry><entry><title>LibreTexts Jupyter Integration Wrapup</title><link href="https://mechmotum.github.io/blog/libretexts-wrapup.html" rel="alternate"></link><published>2021-10-08T00:00:00-07:00</published><updated>2021-10-08T00:00:00-07:00</updated><author><name>Jason K. Moore</name></author><id>tag:mechmotum.github.io,2021-10-08:/blog/libretexts-wrapup.html</id><summary type="html">&lt;div class="figure align-center"&gt;
&lt;img alt="LibreTexts and Jupyter Logos" src="https://objects-us-east-1.dream.io/mechmotum/libretexts-plus-jupyter.png" /&gt;
&lt;/div&gt;
&lt;p&gt;As of September 30th we have wrapped up our work integrating Jupyter based
computing tools into the &lt;a class="reference external" href="https://www.libretexts.org"&gt;LibreTexts&lt;/a&gt; platform. This work was part of a three
year $5M grant from the U.S. Department of Education (DoE) to enhance open
access textbooks called &lt;a class="reference external" href="https://www.ed.gov/news/press-releases/us-department-education-awards-49-million-grant-university-california-davis-develop-free-open-textbooks-program"&gt;Open Textbooks Pilot Program&lt;/a&gt; (CFDA No. 84 …&lt;/p&gt;</summary><content type="html">&lt;div class="figure align-center"&gt;
&lt;img alt="LibreTexts and Jupyter Logos" src="https://objects-us-east-1.dream.io/mechmotum/libretexts-plus-jupyter.png" /&gt;
&lt;/div&gt;
&lt;p&gt;As of September 30th we have wrapped up our work integrating Jupyter based
computing tools into the &lt;a class="reference external" href="https://www.libretexts.org"&gt;LibreTexts&lt;/a&gt; platform. This work was part of a three
year $5M grant from the U.S. Department of Education (DoE) to enhance open
access textbooks called &lt;a class="reference external" href="https://www.ed.gov/news/press-releases/us-department-education-awards-49-million-grant-university-california-davis-develop-free-open-textbooks-program"&gt;Open Textbooks Pilot Program&lt;/a&gt; (CFDA No. 84.116T).&lt;/p&gt;
&lt;p&gt;This blog post serves as a report on the outcomes from the portion of the grant
I was responsible for as a co-principal investigator. Overall, I think we were
quite successful. LibreTexts users are creating textbooks with interactive
computational elements (10+ textbooks), we've served hundreds of students with
our JupyterHub, and we've trained 12 undergraduate students in full stack
development, system administration, and site reliability engineering with many
of them now in professional positions making use of those skills.&lt;/p&gt;
&lt;div class="section" id="project-goals"&gt;
&lt;h2&gt;Project Goals&lt;/h2&gt;
&lt;p&gt;The overall goals of the DoE grant were multifold and we contributed to one
small chunk. Our project was part of &lt;em&gt;&amp;quot;Thrust 3: Next Generation Technology -
Interactive Visualizations, Automated Assessment, Annotations, Database
Integration, &amp;amp; Technological Synergy&amp;quot;&lt;/em&gt;. Here is what I proposed we would do in
the grant proposal:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;3C: Interactive Figure Editor (Jason K. Moore).&lt;/p&gt;
&lt;p&gt;While the CalcPlot3D application provides powerful, simple-to-use,
specialized 3D visualizations, many LibreTexts authors also desire arbitrary
interactive visualizations illustrating concepts in any scientific domain.
It is known that quality figures enhance learning when adjunct to text
regardless if the figures are static, dynamic, or interactive,[18,40] but
research demonstrating whether interactivity improves learning is nascent.
In computer science education, there is evidence that interactive
visualizations of computer algorithms improve learning when they are self
paced and of high quality[41–43] but may hamper learning if poorly
designed.[44,45] There is recent evidence that interactivity is especially
beneficial for lower performing students.[46] Cutting edge interactive
visualizations demonstrate how concepts are learned through exploration [47]
and modern publishing platforms are adopting interactive figures for high
level scientific communication (Authorea)[48] as well as for the public
(e.g.  New York Times). This will enable LibreText to become a platform for
research into the benefits of interactive figures in addition to providing
authors with infinite interactive visualization possibilities to convey
concepts (see Figure 4 for examples). To do so, we will implement general
functionality for authors to easily include any type of interactive figure
through a new &amp;quot;interactive figure editor&amp;quot; that relies on the Jupyter
interactive widget system, ipywidgets.[49]&lt;/p&gt;
&lt;p&gt;Jupyter is a popular open source web application that allows users to create
and share interactive documents that contain equations, visualizations,
narrative text, and the execution of code.[50] LibreTexts authors will be
able to write high level code in the Python programming language in the
LibreTexts editing interface to generate figures. On page save, the Python
code will be sent to an external server where it will be executed in a
secure container using Jupyter to generate an entry in an open access
database of versioned interactive Javascript figures.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;By the time the grant period started, the specific goals solidified into three
primary aims and two ancillary aims:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Primary&lt;/strong&gt;&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Allow textbook authors and readers to execute code that produces passive and
interactive figures&lt;/li&gt;
&lt;li&gt;Allow any reader of a LibreTexts textbook page to execute code interactively&lt;/li&gt;
&lt;li&gt;Add Jupyter enabled textbooks and portions of textbooks to LibreTexts&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Ancillary&lt;/strong&gt;&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Provide a JupyterHub for LibreTexts and UC Davis users&lt;/li&gt;
&lt;li&gt;Train students in full stack development, system administration, and site
reliability engineering&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Below, each section describes the various things we produced to meet these
goals. Developing a system like this from scratch is an enormous task, so it is
important to note that we built everything off of the strong open source
foundation of the greater Jupyter community and various other connected
projects.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="uc-davis-kubernetes-cluster"&gt;
&lt;h2&gt;UC Davis Kubernetes Cluster&lt;/h2&gt;
&lt;p&gt;We decided to build and run our own &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Bare-metal_server"&gt;bare metal&lt;/a&gt; &lt;a class="reference external" href="https://kubernetes.io/"&gt;Kubernetes&lt;/a&gt; computing
cluster.  We chose to do this instead of using cloud services because the 5-10
year cost projection seemed to be more favorable. We also had the expertise and
existing hardware available to pilot the system. After two build and test
iterations, we now have a 19 node cluster that runs JupyterHub and BinderHub on
top of Kubernetes for UC Davis and LibreTexts users. The cluster has several
notable features:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Puppet based deployment that allows us to  tear down and rebuild the cluster
with one command&lt;/li&gt;
&lt;li&gt;Monitoring and alerts via Prometheus and Grafana&lt;/li&gt;
&lt;li&gt;Large redundant ZFS data storage node&lt;/li&gt;
&lt;li&gt;High availability entry point server pair&lt;/li&gt;
&lt;li&gt;Custom user abuse sensors and process killers&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="UCD cluster racks." src="https://objects-us-east-1.dream.io/mechmotum/ucd-kube-cluster.png" /&gt;
&lt;p class="caption"&gt;The cluster humming away in the server room.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="jupyterhub"&gt;
&lt;h2&gt;JupyterHub&lt;/h2&gt;
&lt;p&gt;We run JupyterHub on the cluster that defaults to the latest JupyterLab
interface for interacting with the available programming languages. The
JupyterHub is accessible at both &lt;a class="reference external" href="https://jupyter.libretexts.org"&gt;https://jupyter.libretexts.org&lt;/a&gt; and
&lt;a class="reference external" href="https://jupyterhub.ucdavis.edu"&gt;https://jupyterhub.ucdavis.edu&lt;/a&gt;. Anyone with a UC Davis email address can log in
and make use of the hub. We've served over 400 users over the last couple of
years, most from various UC Davis and LibreTexts courses. We developed a &lt;a class="reference external" href="https://jupyterhub.ucdavis.edu/hub/faq"&gt;FAQ&lt;/a&gt;
that provides instructions for more advanced use. We also created a section in
the LibreTexts &lt;a class="reference external" href="https://chem.libretexts.org/Courses/Remixer_University/LibreTexts_Construction_Guide/05%3A_Interactive_Elements"&gt;construction guide&lt;/a&gt; that provides guidance specifically for
LibreTexts users and authors.&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="LibreTexts UC Davis JupyterHub Login Screen" src="https://objects-us-east-1.dream.io/mechmotum/libretexts-jupyterhub-login-page.png" /&gt;
&lt;p class="caption"&gt;LibreTexts UC Davis JupyterHub Login Screen&lt;/p&gt;
&lt;/div&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="Author construction guide section about Jupyter integration" src="https://objects-us-east-1.dream.io/mechmotum/libretexts-jupyter-guide.png" /&gt;
&lt;p class="caption"&gt;Author construction guide section about Jupyter integration&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="custom-docker-image"&gt;
&lt;h2&gt;Custom Docker Image&lt;/h2&gt;
&lt;p&gt;The default &lt;a class="reference external" href="https://github.com/jupyterhub/repo2docker"&gt;repo2docker&lt;/a&gt; based docker image for our our hub includes a large
set of software. We manage the software dependencies using APT and &lt;a class="reference external" href="https://github.com/mamba-org/mamba"&gt;Mamba&lt;/a&gt;, with
most packages installed via Mamba from the &lt;a class="reference external" href="https://conda-forge.org/"&gt;conda-forge&lt;/a&gt; channel. Managing an
image with a large set of software packages in a single environment has been
rather difficult due to hard-to-solve version compatibilities, relying on
packages that languish in maintenance, user desire for different versions of
some packages, packages not being available in conda-forge, slow build times,
and large docker image sizes. We've wrestled with these issues for three years,
but things are reasonably smooth at this point. New images are immediately
cached on all of our cluster nodes so that user load times are snappy and the
vast majority of needed software is pre-installed.&lt;/p&gt;
&lt;p&gt;Our repo2docker build specs for the image can be found here:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/LibreTexts/default-env"&gt;https://github.com/LibreTexts/default-env&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This image is a nice starting image for many scientific computing situations as
it includes Python, R, Julia, Octave, C++, and Sage in the console and
notebooks as well as RStudio server access to R.&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="JupyterLab Interface" src="https://objects-us-east-1.dream.io/mechmotum/libretexts-jupyterhub-jupyterlab-launch.png" /&gt;
&lt;p class="caption"&gt;JupyterLab Interface&lt;/p&gt;
&lt;/div&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="RStudio Interface" src="https://objects-us-east-1.dream.io/mechmotum/libretexts-rstudio.png" /&gt;
&lt;p class="caption"&gt;RStudio Interface&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="ckeditor-thebe-plugin"&gt;
&lt;h2&gt;CKEditor Thebe Plugin&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/executablebooks/thebe"&gt;Thebe&lt;/a&gt; is a JavaScript application that enables live Jupyter code cells to be
integrated into an arbitrary HTML page. Viewers of the HTML page can interact
with the cells by editing and executing them. Once executed the output can be
simple text output or advanced Javascript based interactive visualizations.
Thebe was originally developed as part of Europe's &lt;a class="reference external" href="https://opendreamkit.org/"&gt;OpenDreamKit&lt;/a&gt; project and
ties into the Jupyter ecosystem. There are some alternatives to Thebe, but they
offered essentially the same features. Because of this we more-or-less flipped
a coin and chose to make use of Thebe in LibreTexts. LibreTexts uses the
CKEditor for WYSIWYG editing of textbook pages. Once we settled on using Thebe
for LibreTexts pages, we developed a plugin for &lt;a class="reference external" href="https://ckeditor.com/"&gt;CKEditor&lt;/a&gt; that allows page
authors to edit and execute code cells. The plugin can be found here:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/LibreTexts/ckeditor-binder-plugin"&gt;https://github.com/LibreTexts/ckeditor-binder-plugin&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The plugin allows authors to:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Insert code cells and run them from CKEditor to check their execution.&lt;/li&gt;
&lt;li&gt;Embed the code cell with or without the output of the cell.&lt;/li&gt;
&lt;li&gt;Embed the code cell with or without the code of the cell displayed to
readers.&lt;/li&gt;
&lt;li&gt;Set the cells to uneditable by the LibreTexts readers.&lt;/li&gt;
&lt;/ul&gt;
&lt;center&gt;
&lt;iframe width="560" height="315"
src="https://www.youtube.com/embed/dIwZ-QQ8xSs" title="YouTube video player"
frameborder="0" allow="accelerometer; autoplay; clipboard-write;
encrypted-media; gyroscope; picture-in-picture" allowfullscreen&gt;&lt;/iframe&gt;
&lt;p&gt;Video showing how to use the plugin on LibreTexts&lt;/p&gt;
&lt;/center&gt;&lt;p&gt;LibreTexts page authors can get started with the above video and the
&lt;a class="reference external" href="https://chem.libretexts.org/Courses/Remixer_University/LibreTexts_Construction_Guide/05%3A_Interactive_Elements/5.02%3A_Jupyter_Notebooks_(Executable_Programming_Code_and_Figures)"&gt;instructions&lt;/a&gt; in the guide.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="thebe-improvements"&gt;
&lt;h2&gt;Thebe Improvements&lt;/h2&gt;
&lt;p&gt;After selecting Thebe and developing the CKEditor plugin we discovered that
&lt;a class="reference external" href="https://github.com/jupyter-widgets/ipywidgets"&gt;ipywidgets&lt;/a&gt; did not fully function with Thebe. We had planned to use ipywidgets
to offer LibreTexts readers interaction with figures and visualization using
GUI widgets (sliders, buttons, input boxes, etc.). We set out to remedy this
and began contributing to Thebe. In the fall of 2020, we organized a &lt;a class="reference external" href="https://jupytercon.com/sprint/"&gt;sprint&lt;/a&gt;
for Thebe during JupyterCon which helped breathe some life into the project.
With the help of the original Thebe developer, &lt;a class="reference external" href="https://executablebooks.org"&gt;Executable Book Project&lt;/a&gt;
members, &lt;a class="reference external" href="https://curvenote.com/"&gt;Curvenote&lt;/a&gt; project members, and JupyterCon sprint attendees we knocked
out a number of outstanding issues (see the &lt;a class="reference external" href="https://github.com/executablebooks/thebe/projects/1"&gt;Github project&lt;/a&gt; for details).
Since the sprint, there have been regular contributions to the repository and
we've made three releases of Thebe that have added a number of import new
features and bug fixes. Most importantly we recently merged the fix to fully
enable ipywidgets support. Here are some of the major improvements made during
and since the sprint:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Improved the documentation, including examples of more advanced cell outputs&lt;/li&gt;
&lt;li&gt;Thebe now uses JupyterLab 3.0 APIs&lt;/li&gt;
&lt;li&gt;Added a configuration for read-only cells&lt;/li&gt;
&lt;li&gt;Improved unit testing infrastructure&lt;/li&gt;
&lt;li&gt;Thebe now persists binder sessions across pages on the same domain&lt;/li&gt;
&lt;li&gt;A &amp;quot;Restart &amp;amp; Run All&amp;quot; button is now available on each cell&lt;/li&gt;
&lt;li&gt;Each cell has a &amp;quot;busy indicator&amp;quot; to give the user feedback from the server&lt;/li&gt;
&lt;li&gt;Enabled general ipywidgets functionality&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="Example of an ipywidget controlling a matplotlib figure in Thebe." src="https://objects-us-east-1.dream.io/mechmotum/thebe-ipywidgets.gif" style="height: 600px;" /&gt;
&lt;p class="caption"&gt;Example of an ipywidget controlling a matplotlib figure in Thebe.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;You can see examples many of the rich Jupyter outputs on this LibreTexts page:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://query.libretexts.org/Sandboxes/jupyterteam_at_ucdavis.edu"&gt;https://query.libretexts.org/Sandboxes/jupyterteam_at_ucdavis.edu&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="supporting-classes"&gt;
&lt;h2&gt;Supporting Classes&lt;/h2&gt;
&lt;p&gt;We piloted the JupyterHub and LibreTexts in several courses over the last three
years:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;GEL 56: Introduction to Geophysics, GEL 161: Geophysical Field Methods (Prof.
Magali Billen, UC Davis)&lt;/li&gt;
&lt;li&gt;GEL 160: Geological Data Analysis (Prof. Max Rudolph, UC Davis)&lt;/li&gt;
&lt;li&gt;GEL 298 (Profs. Sarah Stewart &amp;amp; Max Rudolph, UC Davis)&lt;/li&gt;
&lt;li&gt;STS 101: Introduction to Data Studies (Prof. Lindsay Nicole Poirier)&lt;/li&gt;
&lt;li&gt;ENG 122: Introduction to Mechanical Vibrations, MAE 223: Multibody Dynamics
(Prof. Jason K. Moore, UC Davis)&lt;/li&gt;
&lt;li&gt;Cheminformatics OLCC (Prof. Robert Belford et al., University of Arkansas at
Little Rock)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The cheminformatics course was a collaboration among several universities and
partners. This published paper details more about that effort:&lt;/p&gt;
&lt;blockquote&gt;
Kim et al. (2020), Teaching Cheminformatics through a Collaborative
Intercollegiate Online Chemistry Course (OLCC), Journal of Chemical
Education, &lt;a class="reference external" href="https://doi.org/10.1021/acs.jchemed.0c01035"&gt;https://doi.org/10.1021/acs.jchemed.0c01035&lt;/a&gt;&lt;/blockquote&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="Conference poster about the cheminformatics project." src="https://objects-us-east-1.dream.io/mechmotum/libretexts-cheminformatics-poster.png" /&gt;
&lt;p class="caption"&gt;Conference poster about the cheminformatics project.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="ngshare"&gt;
&lt;h2&gt;ngshare&lt;/h2&gt;
&lt;p&gt;During our efforts to get professors to adopt the hub at UC Davis, we found out
that many wanted to use &lt;a class="reference external" href="https://github.com/jupyter/nbgrader"&gt;nbgrader&lt;/a&gt; for auto-grading of Jupyter notebooks. But
nbgrader was only built for servers that had a standard shared user space
storage with a UNIX permission model. Thus, nbgrader could not function in a
JupyterHub running on a distributed system like Kubernetes. Computer science
professor, Christopher Nitta, and I proposed a computer science capstone BSc
project and attracted a talented group of students. This group invented
&lt;strong&gt;ngshare&lt;/strong&gt;, which solves the problem by running a data exchange database on a
Kubernetes pod that can be swapped out for nbgrader's traditional shared disk
space. This resulted in three code repositories with the software required to
run the service:&lt;/p&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;&lt;a class="reference external" href="https://github.com/LibreTexts/ngshare"&gt;ngshare&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Primary repository containing the ngshare application.&lt;/dd&gt;
&lt;dt&gt;&lt;a class="reference external" href="https://github.com/LibreTexts/ngshare-helm-repo"&gt;ngshare-helm-repo&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;A ready made Helm chart for deploying to kubernetes.&lt;/dd&gt;
&lt;dt&gt;&lt;a class="reference external" href="https://github.com/LibreTexts/ngshare_exchange"&gt;ngshare_exchange&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Exchange used to run ngshare on single user space systems (non distributed
systems).&lt;/dd&gt;
&lt;/dl&gt;
&lt;center&gt;
&lt;iframe width="560" height="315"
src="https://www.youtube.com/embed/SEJCaqD7xXQ" title="YouTube video player"
frameborder="0" allow="accelerometer; autoplay; clipboard-write;
encrypted-media; gyroscope; picture-in-picture" allowfullscreen&gt;&lt;/iframe&gt;
&lt;p&gt;Demo video of ngshare&lt;/p&gt;
&lt;/center&gt;&lt;/div&gt;
&lt;div class="section" id="libretexts-textbooks-using-jupyter-integration"&gt;
&lt;h2&gt;LibreTexts Textbooks Using Jupyter Integration&lt;/h2&gt;
&lt;p&gt;There are at least 10 textbooks now on LibreTexts that make use of the Jupyter
integration for a variety of different programming languages.&lt;/p&gt;
&lt;p&gt;Python&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://geo.libretexts.org/Courses/University_of_California_Davis/GEL_056:_Introduction_to_Geophysics"&gt;Introduction to Geophysics&lt;/a&gt; (Magali Billen, University of California, Davis)&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://eng.libretexts.org/Courses/Delta_College/Introduction_to_Programming_Concepts_-_Python"&gt;Introduction to Programming Concepts - Python&lt;/a&gt; (Chuck Severance, University of Michigan)&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://math.libretexts.org/Bookshelves/Linear_Algebra/Matrix_Algebra_with_Computational_Applications_(Colbry)"&gt;Matrix Algebra with Computational Applications&lt;/a&gt; (Dirk Colbry, Michigan State University)&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://eng.libretexts.org/Bookshelves/Introduction_to_Engineering/EGR_1010:_Introduction_to_Engineering_for_Engineers_and_Scientists"&gt;Introduction to Engineering for Engineers and Scientists&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://eng.libretexts.org/Bookshelves/Computer_Science/Programming_Languages/Book%3A_Python_for_Everybody_(Severance)"&gt;Python for Everybody&lt;/a&gt; (Chuck Severance, University of Michigan)&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://chem.libretexts.org/Ancillary_Materials/Interactive_Applications/Jupyter_Notebooks"&gt;Chemistry Interactive Applications&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="Example interactive robot arm simulator from Matrix Algebra with Computational Applications (Colbry)" src="https://objects-us-east-1.dream.io/mechmotum/libretexts-robot-sim.png" /&gt;
&lt;p class="caption"&gt;Example interactive robot arm simulator from Matrix Algebra with
Computational Applications (Colbry)&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;R&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://chem.libretexts.org/Courses/Intercollegiate_Courses/Cheminformatics_OLCC_(2019)"&gt;Cheminformatics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://stats.libretexts.org/Bookshelves/Introductory_Statistics/Book:_Visual_Statistics_Use_R_(Shipunov)"&gt;Visual Statistics Use R&lt;/a&gt; (Alexey Shipunov, Minot State University)&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://stats.libretexts.org/Bookshelves/Applied_Statistics/Book:_Answering_Questions_with_Data_-__Introductory_Statistics_for_Psychology_Students_(Crump)"&gt;Answering Questions with Data - Introductory Statistics for Psychology Students&lt;/a&gt; (Matthew J. C. Crump, Brooklyn College of CUNY)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Julia&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://math.libretexts.org/Bookshelves/Scientific_Computing_Simulations_and_Modeling/Book:_Scientific_Computing_(Staab)"&gt;Scientific Computing&lt;/a&gt; (Peter Staab, Fitchburg State University)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Octave&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://eng.libretexts.org/Bookshelves/Industrial_and_Systems_Engineering/Book:_Introduction_to_Control_Systems_(Iqbal)"&gt;Introduction to Control Systems&lt;/a&gt; (Kamran Iqbal, University of Arkansas at Little Rock)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Shell, Python, R&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://chem.libretexts.org/Courses/Intercollegiate_Courses/Internet_of_Science_Things_(2020)"&gt;Internet of Science Things&lt;/a&gt; (Robert Belford, University of Arkansas at Little Rock)&lt;/li&gt;
&lt;/ul&gt;
&lt;center&gt;
&lt;iframe width="560" height="315"
src="https://www.youtube.com/embed/gA9s0NQRVzY" title="YouTube video player"
frameborder="0" allow="accelerometer; autoplay; clipboard-write;
encrypted-media; gyroscope; picture-in-picture" allowfullscreen&gt;&lt;/iframe&gt;
&lt;p&gt;Three of the book authors (Belford, Billen, Iqbal) present their use of
Jupyter in LibreTexts.&lt;/p&gt;
&lt;/center&gt;&lt;/div&gt;
&lt;div class="section" id="outreach"&gt;
&lt;h2&gt;Outreach&lt;/h2&gt;
&lt;p&gt;We did a number of outreach talks. This was important for disseminating what we
had done, but also in helping the students develop their presenting skills and
connecting them to the communities of practice. We presented at Jupyter Open
Studio (2019), SacPy (2020), OpenEd Week (2020), Women in Data (2020), and the
National Workshop on Data Education (2020).&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="Celine Presenting at SacPy" src="https://objects-us-east-1.dream.io/mechmotum/celine-sacpy.jpg" style="width: 600px;" /&gt;
&lt;p class="caption"&gt;Hao, Tannavee, and Celine presenting at the SacPy meetup in 2019.&lt;/p&gt;
&lt;/div&gt;
&lt;center&gt;
&lt;iframe width="560" height="315"
src="https://www.youtube.com/embed/l-OVteC4PpA" title="YouTube video player"
frameborder="0" allow="accelerometer; autoplay; clipboard-write;
encrypted-media; gyroscope; picture-in-picture" allowfullscreen&gt;&lt;/iframe&gt;
&lt;p&gt;OpenEd Week Webinar&lt;/p&gt;
&lt;/center&gt;&lt;/div&gt;
&lt;div class="section" id="the-team"&gt;
&lt;h2&gt;The Team&lt;/h2&gt;
&lt;p&gt;It is important to point out that all of the work to bring Jupyter to
LibreTexts was done by a group of amazing undergraduate students over the last
three years. Richard Feltstykket and I mentored them and couldn't have asked
for a better group. Overall, we had 12 students work from 2 quarters to a whole
year on the project. They developed their teamwork process and onboarded new
students every other quarter. Many of the the students particpated during the
height of the COVID 19 pandemic. I have been thoroughly impressed with them and
their work. They came to the project with minimal to no knowledge about the
assortment of tools and skills that they needed to solve the presented
problems. The skillset needed for them to succeed was very broad, from building
servers all the way up the stack to frontend Javascript app development. The
students vacuumed up the knowledge, learned the skills, and it wasn't before
long that they all knew way more than their two mentors (which is the agenda of
all good mentors). As far as I can tell, this has paid off for many of them.
Some have taken positions doing very similar work to what they did in this
project. And outside of the work, the students led us through an assortment of
online games during our quarterly social breaks. I'll have nightmares about
Jackbox Trivia Murder Party for some time to come :). Without further ado, here
is it the team that made all of this magic happen:&lt;/p&gt;
&lt;table border="1" class="table docutils align-center" style="width: 48%"&gt;
&lt;colgroup&gt;
&lt;col width="33%" /&gt;
&lt;col width="33%" /&gt;
&lt;col width="33%" /&gt;
&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;&lt;img alt="" class="first last" src="https://objects-us-east-1.dream.io/mechmotum/libretexts-headshot-celine.png" /&gt;
&lt;/td&gt;
&lt;td&gt;&lt;img alt="" class="first last" src="https://objects-us-east-1.dream.io/mechmotum/libretexts-headshot-hao.jpg" /&gt;
&lt;/td&gt;
&lt;td&gt;&lt;img alt="" class="first last" src="https://objects-us-east-1.dream.io/mechmotum/libretexts-headshot-henry.jpg" /&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Celine Liang (now &amp;#64; Facebook)&lt;/td&gt;
&lt;td&gt;Hao Huang (now &amp;#64; Zillow)&lt;/td&gt;
&lt;td&gt;Henry Agnew (now &amp;#64; UC San Diego)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;img alt="" class="first last" src="https://objects-us-east-1.dream.io/mechmotum/libretexts-headshot-kevin-k.png" /&gt;
&lt;/td&gt;
&lt;td&gt;&lt;img alt="" class="first last" src="https://objects-us-east-1.dream.io/mechmotum/libretexts-headshot-kevin-r.png" /&gt;
&lt;/td&gt;
&lt;td&gt;&lt;img alt="" class="first last" src="https://objects-us-east-1.dream.io/mechmotum/libretexts-headshot-mandeepika.jpg" /&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Kevin Krausse (now &amp;#64; Ekata)&lt;/td&gt;
&lt;td&gt;Kevin Rong (now &amp;#64; Zoox)&lt;/td&gt;
&lt;td&gt;Mandeepika Sani (UC Davis)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;img alt="" class="first last" src="https://objects-us-east-1.dream.io/mechmotum/libretexts-headshot-noah.png" /&gt;
&lt;/td&gt;
&lt;td&gt;&lt;img alt="" class="first last" src="https://objects-us-east-1.dream.io/mechmotum/libretexts-headshot-patrick.jpg" /&gt;
&lt;/td&gt;
&lt;td&gt;&lt;img alt="" class="first last" src="https://objects-us-east-1.dream.io/mechmotum/libretexts-headshot-tannavee.png" /&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Lyla Sanders (UC Davis)&lt;/td&gt;
&lt;td&gt;Patrick Mackle (now &amp;#64; DocuSign)&lt;/td&gt;
&lt;td&gt;Tannavee Kumar (now &amp;#64; Tempus Labs)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;img alt="" class="first last" src="https://objects-us-east-1.dream.io/mechmotum/libretexts-headshot-tim.png" /&gt;
&lt;/td&gt;
&lt;td&gt;&lt;img alt="" class="first last" src="https://objects-us-east-1.dream.io/mechmotum/libretexts-headshot-xiaochen.png" /&gt;
&lt;/td&gt;
&lt;td&gt;&lt;img alt="" class="first last" src="https://objects-us-east-1.dream.io/mechmotum/libretexts-headshot-luigi.png" /&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Tim Stewart (UC Davis)&lt;/td&gt;
&lt;td&gt;Xiaochen Zeng (now &amp;#64; Tencent)&lt;/td&gt;
&lt;td&gt;Xin Luigi Chen (now &amp;#64; VMware)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Additionally, students Kevin Rong, Lawrence Lee, Eric Li, Abigail Almanza
co-developed ngshare.&lt;/p&gt;
&lt;p&gt;Congratulations on a job well done!&lt;/p&gt;
&lt;p&gt;We also had tons of help and support from a number of folks. Special thanks
goes out to: Bob Belford &amp;amp; team, Chris Holdgraf, Christopher Nitta, Delmar
Larsen, Hongfei Wang, Lindsay Nicole Poirier, Max Rudolph, Michael Casper
Lewis, Magali Billen, Min Ragan-Kelley, Paul Ivanov, Sarah Stewart, Steve
Purves, Tim Head, Tom Neubarth, Yuvi Panda, and likely others that I am
forgetting.&lt;/p&gt;
&lt;p&gt;And I give the most special thanks to Richard Feltstykket for being an amazing
partner in this project. We couldn't have pulled it off without his extensive
knowledge and resources regarding the cluster development and system
administration. Richard had some major things to deal with outside of work
during these three years but he never showed any slowing down or loss of
enthusiasm. He has my full admiration. I'll miss working with you Richard,
hopefully we can start up something new in the future! The project is in great
hands.&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="Lab pizza social" src="https://objects-us-east-1.dream.io/mechmotum/lab-pizza-outing.png" /&gt;
&lt;p class="caption"&gt;Pre-pandemic pizza social with the team. From the left around the table:
Celine, Michael, Trevor, Henry, Jason, Hao, Luigi, Tannavee.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="the-future"&gt;
&lt;h2&gt;The Future&lt;/h2&gt;
&lt;p&gt;The future for the system and tools we've developed as a part of this grant
look good. Richard Feltstykket is taking the project forward with LibreText's
support. The cluster, JupyterHub, and LibreTexts page integration will continue
to support a variety of instructors, courses, and students. The next big step
is to scale up use for courses at UC Davis and LibreTexts participating
universities. I certainly hope to see things grow now that it is all running
smoothly.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="resources"&gt;
&lt;h2&gt;Resources&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="https://mechmotum.github.io/research/librtexts-jupyter.html"&gt;Lab project page&lt;/a&gt;&lt;/p&gt;
&lt;div class="section" id="code-repositories"&gt;
&lt;h3&gt;Code repositories&lt;/h3&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;&lt;a class="reference external" href="https://github.com/LibreTexts/ckeditor-binder-plugin"&gt;ckeditor-binder-plugin&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;CKEditor plugin that adds a button to add Jupyter code cells via Thebe.&lt;/dd&gt;
&lt;dt&gt;&lt;a class="reference external" href="https://github.com/LibreTexts/ckeditor-query-plugin"&gt;ckeditor-query-plugin&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;CKEditor plugin to add buttons for LibreTexts' Query and Adapt systems.&lt;/dd&gt;
&lt;dt&gt;&lt;a class="reference external" href="https://github.com/LibreTexts/default-env"&gt;default-env&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Our custom JupyterHub repo2docker spec.&lt;/dd&gt;
&lt;dt&gt;&lt;a class="reference external" href="https://github.com/LibreTexts/galaxy-vagrant"&gt;galaxy-vagrant&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Vagrant setup for testing our galaxy cluster&lt;/dd&gt;
&lt;dt&gt;&lt;a class="reference external" href="https://github.com/LibreTexts/jupyterhub-templates"&gt;jupyterhub-templates&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;JupyterHub HTML templates that add the About and FAQ pages.&lt;/dd&gt;
&lt;dt&gt;&lt;a class="reference external" href="https://github.com/LibreTexts/jupyterteam_widget"&gt;jupyterteam_widget&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Example Jupyter widget used for learning how Jupyter widgets work.&lt;/dd&gt;
&lt;dt&gt;&lt;a class="reference external" href="https://github.com/LibreTexts/labextension-libretexts-faq"&gt;labextension-libretexts-faq&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;JupyterLab extension that adds an FAQ link in the menu bar.&lt;/dd&gt;
&lt;dt&gt;&lt;a class="reference external" href="https://github.com/LibreTexts/metalc/"&gt;metalc&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Primary documentation and issue tracker for the project.&lt;/dd&gt;
&lt;dt&gt;&lt;a class="reference external" href="https://github.com/LibreTexts/ngshare"&gt;ngshare&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Primary repository containing the ngshare application.&lt;/dd&gt;
&lt;dt&gt;&lt;a class="reference external" href="https://github.com/LibreTexts/ngshare_exchange"&gt;ngshare_exchange&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Exchange used to run ngshare on single user space systems (non distributed&lt;/dd&gt;
&lt;dt&gt;&lt;a class="reference external" href="https://github.com/LibreTexts/ngshare-helm-repo"&gt;ngshare-helm-repo&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;A ready made Helm chart for deploying to kubernetes.&lt;/dd&gt;
&lt;dt&gt;&lt;a class="reference external" href="https://github.com/LibreTexts/protogalaxy"&gt;protogalaxy&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Puppet module bootstrapping highly available Kubernetes cluster using
kubeadm, keepalived and HAProxy&lt;/dd&gt;
&lt;dt&gt;&lt;a class="reference external" href="https://github.com/LibreTexts/widget-testing"&gt;widget-testing&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Extensive tests for various advanced Jupyter cell outputs in Thebe and
LibreTexts.&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class="section" id="prior-blog-posts"&gt;
&lt;h3&gt;Prior blog posts&lt;/h3&gt;
&lt;p&gt;The students wrote (almost-)quarterly blog posts throughout the project
duration. These have more details on the various topics discussed above. Here
are all of the prior posts:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://mechmotum.github.io/blog/libretexts-grant.html"&gt;Grant Award Announcement&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://mechmotum.github.io/blog/jupyter-winter-2019.html"&gt;Winter 2019 Update&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://mechmotum.github.io/blog/jupyter-summer-2019.html"&gt;Summer 2019 Update&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://mechmotum.github.io/blog/sacpy-slideck-2019.html"&gt;SacPy Talk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://mechmotum.github.io/blog/libretexts-jupyter-plugin.html"&gt;Spring 2020 Update&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://mechmotum.github.io/blog/jupyter-summer-2020.html"&gt;Summer 2020 Update&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://mechmotum.github.io/blog/jupyter-fall-2020.html"&gt;Fall 2020 Update&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://mechmotum.github.io/blog/jupyter-summer-2021.html"&gt;Summer 2021 Update&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
</content><category term="education"></category><category term="jupyter"></category><category term="libretexts"></category><category term="computation"></category><category term="education"></category><category term="oer"></category><category term="textbooks"></category></entry><entry><title>Postdoctoral Researcher Opening: Bicycle of the Future</title><link href="https://mechmotum.github.io/blog/bicycle-of-the-future-postdoc.html" rel="alternate"></link><published>2021-09-10T00:00:00-07:00</published><updated>2021-09-10T00:00:00-07:00</updated><author><name>Jason K. Moore</name></author><id>tag:mechmotum.github.io,2021-09-10:/blog/bicycle-of-the-future-postdoc.html</id><summary type="html">&lt;div class="alert alert-warning topic"&gt;
&lt;p class="topic-title"&gt;Filled&lt;/p&gt;
&lt;p&gt;This job has been filled and is no longer open.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="TU Delft &amp;amp; Gazelle Steer Assist Bicycle" src="https://objects-us-east-1.dream.io/mechmotum/gazelle-steer-assist-bicycle.jpg" style="width: 600px;" /&gt;
&lt;p class="caption"&gt;Steer Assist Bicycle: an example bicycle technology developed at the TU
Delft Bicycle lab with Gazelle.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="job-description"&gt;
&lt;h2&gt;Job description&lt;/h2&gt;
&lt;p&gt;The TU Delft Bicycle Lab is seeking a postdoctoral researcher for a &lt;strong&gt;12
month&lt;/strong&gt; full time contract &lt;a class="footnote-reference" href="#footnote-1" id="footnote-reference-1"&gt;[1]&lt;/a&gt; with a starting …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;div class="alert alert-warning topic"&gt;
&lt;p class="topic-title"&gt;Filled&lt;/p&gt;
&lt;p&gt;This job has been filled and is no longer open.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="TU Delft &amp;amp; Gazelle Steer Assist Bicycle" src="https://objects-us-east-1.dream.io/mechmotum/gazelle-steer-assist-bicycle.jpg" style="width: 600px;" /&gt;
&lt;p class="caption"&gt;Steer Assist Bicycle: an example bicycle technology developed at the TU
Delft Bicycle lab with Gazelle.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="job-description"&gt;
&lt;h2&gt;Job description&lt;/h2&gt;
&lt;p&gt;The TU Delft Bicycle Lab is seeking a postdoctoral researcher for a &lt;strong&gt;12
month&lt;/strong&gt; full time contract &lt;a class="footnote-reference" href="#footnote-1" id="footnote-reference-1"&gt;[1]&lt;/a&gt; with a starting date before the end of 2021.
The researcher will develop and execute an engineering research project for the
&amp;quot;Bicycle of the Future&amp;quot; grant which is supported by ClickNL
(&lt;a class="reference external" href="https://www.clicknl.nl"&gt;https://www.clicknl.nl&lt;/a&gt;) and Royal Dutch Gazelle
(&lt;a class="reference external" href="https://www.gazellebikes.com"&gt;https://www.gazellebikes.com&lt;/a&gt;). The aim of the TU Delft and Gazelle
collaboration is to arrive at design solutions that make the bicycle both safer
and more employable in society.&lt;/p&gt;
&lt;p&gt;You will work on a project co-developed with the bicycle lab and Royal Dutch
Gazelle that fits into one or more of these three topics:&lt;/p&gt;
&lt;div class="section" id="bicycle-safety-solutions"&gt;
&lt;h3&gt;Bicycle safety solutions&lt;/h3&gt;
&lt;p&gt;Making the bicycle safer from design changes, braking and traction control, and
tailoring the design and assistance to the skills of the rider. Solutions that
prolong and increase bicycling by the elderly are of particular interest.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="smart-mobility-solutions"&gt;
&lt;h3&gt;Smart mobility solutions&lt;/h3&gt;
&lt;p&gt;Cloud connected electric bicycles open the opportunity to use data collected
from a variety of sensors (accelerometers, gyroscopes, GNSS receiver, torque
load cells, etc.) to improve transportation safety, efficiency,
personalization, and many other aspects. This topic should use this technology
to bring computer intelligence to bicycle transportation with a focus on the
vehicle's use of this information.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="advanced-transport-solutions"&gt;
&lt;h3&gt;Advanced transport solutions&lt;/h3&gt;
&lt;p&gt;Electric bicycles are being widely used to transport goods within urban
environments. This topic should develop and showcase new technology to the
design of electric cargo bicycles to improve the logistics and supply chain in
urban cargo delivery.&lt;/p&gt;
&lt;p&gt;Development of proof-of-concept prototype vehicles and vehicle technologies is
a desired outcome of the proposed research projects.&lt;/p&gt;
&lt;p&gt;You will work at TU Delft in the 3ME Faculty, mostly in the TU Delft Bicycle
Laboratory. You will work closely with and be mentored by Jason K. Moore and
Arend L. Schwab. You will also work with and collaborate with Gazelle
employees. Lastly, you will work with BSc, MSc, and PhD candidates of the lab.&lt;/p&gt;
&lt;p&gt;Opportunities for growing your academic career will be available, such as
mentoring BSc/Students and PhD candidates, conference presentation, networking,
and grant writing.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="requirements"&gt;
&lt;h2&gt;Requirements&lt;/h2&gt;
&lt;p&gt;You have a PhD degree in engineering in mechanical or biomechanical or related
discipline by the start date of the position. If a related discipline please
justify in your cover letter. Excellent command of the English language is
required, as well as excellent communication skills.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="to-apply"&gt;
&lt;h2&gt;To Apply&lt;/h2&gt;
&lt;p&gt;To apply, please submit (in PDF format) a 1 page cover letter explaining your
fit for the position and motivation, a C.V., an example peer reviewed
scientific publication where you are the primary author, and a 1 page project
proposal by 30 September 2021 via the application button.&lt;/p&gt;
&lt;p&gt;The proposal will be reviewed for novelty, feasibility, and alignment with the
stated project topics. The idea in the proposal will be used as a starting
point in developing your project with the TU Delft Bicycle Lab and Royal Dutch
Gazelle if hired.&lt;/p&gt;
&lt;p&gt;Visit TU Delft's website to find more employment details and apply for the
position (vacancy number: TUD01463):&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://www.tudelft.nl/over-tu-delft/werken-bij-tu-delft/vacatures/details?jobId=4015&amp;amp;jobTitle=Postdoctoral%20Researcher%20Bicycle%20of%20the%20Future"&gt;https://www.tudelft.nl/over-tu-delft/werken-bij-tu-delft/vacatures/details?jobId=4015&amp;amp;jobTitle=Postdoctoral%20Researcher%20Bicycle%20of%20the%20Future&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Applications Due September 30, 2021&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="additional-information"&gt;
&lt;h2&gt;Additional information&lt;/h2&gt;
&lt;p&gt;For more information about this vacancy, please contact Jason K. Moore,
Assistant Professor, email: &lt;a class="reference external" href="mailto:j.k.moore&amp;#64;tudelft.nl"&gt;j.k.moore&amp;#64;tudelft.nl&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For information about the application procedure, please contact Ms. Anita van
Vianen, email: &lt;a class="reference external" href="mailto:application-3me&amp;#64;tudelft.nl"&gt;application-3me&amp;#64;tudelft.nl&lt;/a&gt;.&lt;/p&gt;
&lt;table class="docutils footnote" frame="void" id="footnote-1" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#footnote-reference-1"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;We originally advertised a 10 month appointment and the official
application page also reflects that, but we have obtained approval for the
extra 2 months. The position will be 12 months.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
</content><category term="jobs"></category><category term="bicycle"></category><category term="postdoc"></category><category term="engineering"></category></entry><entry><title>Postdoctoral Researcher Opening: Bicycle of the Future</title><link href="https://mechmotum.github.io/blog/bicycle-of-the-future-postdoc.html" rel="alternate"></link><published>2021-09-10T00:00:00-07:00</published><updated>2021-09-10T00:00:00-07:00</updated><author><name>Jason K. Moore</name></author><id>tag:mechmotum.github.io,2021-09-10:/blog/bicycle-of-the-future-postdoc.html</id><summary type="html">&lt;div class="alert alert-warning topic"&gt;
&lt;p class="topic-title"&gt;Filled&lt;/p&gt;
&lt;p&gt;This job has been filled and is no longer open.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="TU Delft &amp;amp; Gazelle Steer Assist Bicycle" src="https://objects-us-east-1.dream.io/mechmotum/gazelle-steer-assist-bicycle.jpg" style="width: 600px;" /&gt;
&lt;p class="caption"&gt;Steer Assist Bicycle: an example bicycle technology developed at the TU
Delft Bicycle lab with Gazelle.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="job-description"&gt;
&lt;h2&gt;Job description&lt;/h2&gt;
&lt;p&gt;The TU Delft Bicycle Lab is seeking a postdoctoral researcher for a &lt;strong&gt;12
month&lt;/strong&gt; full time contract &lt;a class="footnote-reference" href="#footnote-1" id="footnote-reference-1"&gt;[1]&lt;/a&gt; with a starting …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;div class="alert alert-warning topic"&gt;
&lt;p class="topic-title"&gt;Filled&lt;/p&gt;
&lt;p&gt;This job has been filled and is no longer open.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="TU Delft &amp;amp; Gazelle Steer Assist Bicycle" src="https://objects-us-east-1.dream.io/mechmotum/gazelle-steer-assist-bicycle.jpg" style="width: 600px;" /&gt;
&lt;p class="caption"&gt;Steer Assist Bicycle: an example bicycle technology developed at the TU
Delft Bicycle lab with Gazelle.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="job-description"&gt;
&lt;h2&gt;Job description&lt;/h2&gt;
&lt;p&gt;The TU Delft Bicycle Lab is seeking a postdoctoral researcher for a &lt;strong&gt;12
month&lt;/strong&gt; full time contract &lt;a class="footnote-reference" href="#footnote-1" id="footnote-reference-1"&gt;[1]&lt;/a&gt; with a starting date before the end of 2021.
The researcher will develop and execute an engineering research project for the
&amp;quot;Bicycle of the Future&amp;quot; grant which is supported by ClickNL
(&lt;a class="reference external" href="https://www.clicknl.nl"&gt;https://www.clicknl.nl&lt;/a&gt;) and Royal Dutch Gazelle
(&lt;a class="reference external" href="https://www.gazellebikes.com"&gt;https://www.gazellebikes.com&lt;/a&gt;). The aim of the TU Delft and Gazelle
collaboration is to arrive at design solutions that make the bicycle both safer
and more employable in society.&lt;/p&gt;
&lt;p&gt;You will work on a project co-developed with the bicycle lab and Royal Dutch
Gazelle that fits into one or more of these three topics:&lt;/p&gt;
&lt;div class="section" id="bicycle-safety-solutions"&gt;
&lt;h3&gt;Bicycle safety solutions&lt;/h3&gt;
&lt;p&gt;Making the bicycle safer from design changes, braking and traction control, and
tailoring the design and assistance to the skills of the rider. Solutions that
prolong and increase bicycling by the elderly are of particular interest.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="smart-mobility-solutions"&gt;
&lt;h3&gt;Smart mobility solutions&lt;/h3&gt;
&lt;p&gt;Cloud connected electric bicycles open the opportunity to use data collected
from a variety of sensors (accelerometers, gyroscopes, GNSS receiver, torque
load cells, etc.) to improve transportation safety, efficiency,
personalization, and many other aspects. This topic should use this technology
to bring computer intelligence to bicycle transportation with a focus on the
vehicle's use of this information.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="advanced-transport-solutions"&gt;
&lt;h3&gt;Advanced transport solutions&lt;/h3&gt;
&lt;p&gt;Electric bicycles are being widely used to transport goods within urban
environments. This topic should develop and showcase new technology to the
design of electric cargo bicycles to improve the logistics and supply chain in
urban cargo delivery.&lt;/p&gt;
&lt;p&gt;Development of proof-of-concept prototype vehicles and vehicle technologies is
a desired outcome of the proposed research projects.&lt;/p&gt;
&lt;p&gt;You will work at TU Delft in the 3ME Faculty, mostly in the TU Delft Bicycle
Laboratory. You will work closely with and be mentored by Jason K. Moore and
Arend L. Schwab. You will also work with and collaborate with Gazelle
employees. Lastly, you will work with BSc, MSc, and PhD candidates of the lab.&lt;/p&gt;
&lt;p&gt;Opportunities for growing your academic career will be available, such as
mentoring BSc/Students and PhD candidates, conference presentation, networking,
and grant writing.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="requirements"&gt;
&lt;h2&gt;Requirements&lt;/h2&gt;
&lt;p&gt;You have a PhD degree in engineering in mechanical or biomechanical or related
discipline by the start date of the position. If a related discipline please
justify in your cover letter. Excellent command of the English language is
required, as well as excellent communication skills.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="to-apply"&gt;
&lt;h2&gt;To Apply&lt;/h2&gt;
&lt;p&gt;To apply, please submit (in PDF format) a 1 page cover letter explaining your
fit for the position and motivation, a C.V., an example peer reviewed
scientific publication where you are the primary author, and a 1 page project
proposal by 30 September 2021 via the application button.&lt;/p&gt;
&lt;p&gt;The proposal will be reviewed for novelty, feasibility, and alignment with the
stated project topics. The idea in the proposal will be used as a starting
point in developing your project with the TU Delft Bicycle Lab and Royal Dutch
Gazelle if hired.&lt;/p&gt;
&lt;p&gt;Visit TU Delft's website to find more employment details and apply for the
position (vacancy number: TUD01463):&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://www.tudelft.nl/over-tu-delft/werken-bij-tu-delft/vacatures/details?jobId=4015&amp;amp;jobTitle=Postdoctoral%20Researcher%20Bicycle%20of%20the%20Future"&gt;https://www.tudelft.nl/over-tu-delft/werken-bij-tu-delft/vacatures/details?jobId=4015&amp;amp;jobTitle=Postdoctoral%20Researcher%20Bicycle%20of%20the%20Future&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Applications Due September 30, 2021&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="additional-information"&gt;
&lt;h2&gt;Additional information&lt;/h2&gt;
&lt;p&gt;For more information about this vacancy, please contact Jason K. Moore,
Assistant Professor, email: &lt;a class="reference external" href="mailto:j.k.moore&amp;#64;tudelft.nl"&gt;j.k.moore&amp;#64;tudelft.nl&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For information about the application procedure, please contact Ms. Anita van
Vianen, email: &lt;a class="reference external" href="mailto:application-3me&amp;#64;tudelft.nl"&gt;application-3me&amp;#64;tudelft.nl&lt;/a&gt;.&lt;/p&gt;
&lt;table class="docutils footnote" frame="void" id="footnote-1" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#footnote-reference-1"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;We originally advertised a 10 month appointment and the official
application page also reflects that, but we have obtained approval for the
extra 2 months. The position will be 12 months.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
</content><category term="jobs"></category><category term="bicycle"></category><category term="postdoc"></category><category term="engineering"></category></entry><entry><title>JupyterTeam Progress Summer 2021</title><link href="https://mechmotum.github.io/blog/jupyter-summer-2021.html" rel="alternate"></link><published>2021-09-08T00:00:00-07:00</published><updated>2021-09-08T00:00:00-07:00</updated><author><name>Lyla Sanders</name></author><id>tag:mechmotum.github.io,2021-09-08:/blog/jupyter-summer-2021.html</id><summary type="html">&lt;p class="first last"&gt;Blog post on the progress made by JupyterTeam since winter 2020 through summer 2021&lt;/p&gt;
</summary><content type="html">&lt;div class="section" id="improvements-and-progress"&gt;
&lt;h2&gt;Improvements and Progress&lt;/h2&gt;
&lt;p&gt;Since winter quarter of 2020, the JupyterTeam has fixed a long standing issue
where Thebe, the JavaScript package that we use to display and run code on
libretexts.org, would not properly work with the entire interactive Jupyter
widget ecosystem. By migrating from the Jupyter HTML Manager package to the Lab
Manager, we are now able to run all ipywidget interactive widgets, which
greatly expands the possibilities for textbook authors.&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="IPyWidgets Used in Thebe" src="https://objects-us-east-1.dream.io/mechmotum/thebe-ipywidgets.gif" style="height: 600px;" /&gt;
&lt;p class="caption"&gt;Example of an ipywidget controlling a matplotlib figure in Thebe.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;In terms of cluster reliability, we have added a second router to be highly
available with the already existing one; If the master router fails for any
reason, then the backup one will take its place until the master comes back
online. Furthermore, we configured the routers to act as TFTP servers so that
they we may use Ubuntu netboot to load Ubuntu on all nodes from scratch. As
compared to the previous method, this way is more effective and utilizes
existing infastructure better.&lt;/p&gt;
&lt;p&gt;We completed the migration of our default-env computing environment to
JupyterLab 3.0, which includes new features which are great for widgets and
their JavaScript extensions. Additionally, we added a new Adapt plugin to
supplement our already existing Query plugin on libretexts.org.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="in-the-works"&gt;
&lt;h2&gt;In the Works&lt;/h2&gt;
&lt;p&gt;For the future, we are planning to develop a Ceph cluster to replace our
NFS-client-provisioner as the storage solution for users on the JupyterHub. We
also intend to extend the cluster with GPU nodes and provide more specialized
computing enviornments.  Feel free to use our Binder plugin on &lt;a class="reference external" href="https://libretexts.org/"&gt;libretexts.org&lt;/a&gt;, and check out our &lt;a class="reference external" href="https://jupyterhub.ucdavis.edu"&gt;JupyterHub&lt;/a&gt; if you are a UC Davis member!&lt;/p&gt;
&lt;/div&gt;
</content><category term="education"></category><category term="oer"></category><category term="education"></category><category term="jupyter"></category><category term="textbooks"></category><category term="libretexts"></category></entry><entry><title>CZI Grant Awarded to SymPy Computational Biomechanics Project</title><link href="https://mechmotum.github.io/blog/czi-grant.html" rel="alternate"></link><published>2021-09-01T00:00:00-07:00</published><updated>2021-09-01T00:00:00-07:00</updated><author><name>Jason K. Moore</name></author><id>tag:mechmotum.github.io,2021-09-01:/blog/czi-grant.html</id><summary type="html">&lt;table border="1" class="table docutils align-center" style="width: 41%"&gt;
&lt;colgroup&gt;
&lt;col width="50%" /&gt;
&lt;col width="50%" /&gt;
&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;&lt;img alt="czi-logo" src="https://objects-us-east-1.dream.io/mechmotum/czi-logo.png" style="height: 100px;" /&gt;&lt;/td&gt;
&lt;td&gt;&lt;img alt="sympy-logo" src="https://objects-us-east-1.dream.io/mechmotum/sympy-logo.png" style="height: 100px;" /&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;The TU Delft Bicycle Lab has been awarded approximately one third of a $350k
grant to the &lt;a class="reference external" href="https://www.sympy.org"&gt;SymPy&lt;/a&gt; project from the Chan-Zuckerberg Foundation as part of
their &amp;quot;Essential Open Source Software for Science&amp;quot; program. SymPy is joining a
host of exciting open source software projects in this program. This is …&lt;/p&gt;</summary><content type="html">&lt;table border="1" class="table docutils align-center" style="width: 41%"&gt;
&lt;colgroup&gt;
&lt;col width="50%" /&gt;
&lt;col width="50%" /&gt;
&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;&lt;img alt="czi-logo" src="https://objects-us-east-1.dream.io/mechmotum/czi-logo.png" style="height: 100px;" /&gt;&lt;/td&gt;
&lt;td&gt;&lt;img alt="sympy-logo" src="https://objects-us-east-1.dream.io/mechmotum/sympy-logo.png" style="height: 100px;" /&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;The TU Delft Bicycle Lab has been awarded approximately one third of a $350k
grant to the &lt;a class="reference external" href="https://www.sympy.org"&gt;SymPy&lt;/a&gt; project from the Chan-Zuckerberg Foundation as part of
their &amp;quot;Essential Open Source Software for Science&amp;quot; program. SymPy is joining a
host of exciting open source software projects in this program. This is SymPy's
first large funding injection in its 15 year history. Here at TU Delft, we'll
be hiring a postdoctoral researcher in the coming months for a 1 FTE position
for a year to focus on improving SymPy's code generation tools and
demonstrating the power of the code generation on an advanced bicycle control
neuromuscular model.&lt;/p&gt;
&lt;p&gt;Check back here for the postdoc job posting in the coming months. If you are
interested in the position, feel free to send a message to &lt;a class="reference external" href="mailto:j.k.moore&amp;#64;tudelft.nl"&gt;j.k.moore&amp;#64;tudelft.nl&lt;/a&gt;
and we will inform you of the posting.&lt;/p&gt;
&lt;p&gt;More information:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://chanzuckerberg.com/newsroom/czi-awards-16-million-for-foundational-open-source-software-tools-essential-to-biomedicine/"&gt;CZI primary award announcement&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://chanzuckerberg.com/eoss/proposals/sympy-improving-foundational-open-source-symbolic-mathematics-for-science/"&gt;CZI SymPy project description&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://groups.google.com/g/sympy/c/vYsavewGj1w/m/CQKTSznPAgAJ"&gt;Aaron Meurer's announcement on the SymPy mailing list&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content><category term="news"></category><category term="sympy"></category><category term="biomechanics"></category><category term="computation"></category><category term="bicycle"></category></entry><entry><title>Marco Reijne Featured on Hart Van Nederland about Dutch Olympic Track Bike Design</title><link href="https://mechmotum.github.io/blog/marco-olympic-track-bike.html" rel="alternate"></link><published>2021-08-30T00:00:00-07:00</published><updated>2021-08-30T00:00:00-07:00</updated><author><name>Jason K. Moore</name></author><id>tag:mechmotum.github.io,2021-08-30:/blog/marco-olympic-track-bike.html</id><content type="html">&lt;p&gt;See this link for the video and article (in Dutch):&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://www.hartvannederland.nl/nieuws/olympische-spelen/ontwerper-fiets-baanwielrenners-trots-op-gouden-plak"&gt;https://www.hartvannederland.nl/nieuws/olympische-spelen/ontwerper-fiets-baanwielrenners-trots-op-gouden-plak&lt;/a&gt;&lt;/p&gt;
</content><category term="news"></category><category term="olympics"></category><category term="bicycle"></category><category term="sports"></category></entry><entry><title>Joris Kuiper Successfully Defends His MSc Thesis</title><link href="https://mechmotum.github.io/blog/joris-kuiper-graduates.html" rel="alternate"></link><published>2021-06-30T17:28:00-07:00</published><updated>2021-06-30T17:28:00-07:00</updated><author><name>Jason K. Moore</name></author><id>tag:mechmotum.github.io,2021-06-30:/blog/joris-kuiper-graduates.html</id><content type="html">&lt;p&gt;Joris Kuiper successfully defended &amp;quot;&lt;a class="reference external" href="http://resolver.tudelft.nl/uuid:171087f3-4ff5-458c-9065-334958ca7b72"&gt;Development of an Integrated Bicycle
Accident Detection System: Introducing ALARM: Accident Localisation And
Recognition Method&lt;/a&gt;&amp;quot;.  His
system is designed for future Gazelle electric bikes. Joris has accepted a
position at &lt;a class="reference external" href="https://gearboxinnovations.com"&gt;Gearbox&lt;/a&gt; to develop agricultural robots following graduation.
Congrats to Joris!&lt;/p&gt;
&lt;table border="1" class="table docutils align-center" style="width: 80%"&gt;
&lt;colgroup&gt;
&lt;col width="50%" /&gt;
&lt;col width="50%" /&gt;
&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;&lt;img alt="headshot" src="https://objects-us-east-1.dream.io/mechmotum/headshot-kuiper-joris.jpg" style="width: 200px;" /&gt;&lt;/td&gt;
&lt;td&gt;&lt;img alt="cover" src="https://objects-us-east-1.dream.io/mechmotum/thesis-cover-kuiper.png" style="width: 400px;" /&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</content><category term="news"></category><category term="bicycle"></category><category term="engineering"></category></entry><entry><title>Jan Groenhuis Successfully Defends His MSc Thesis</title><link href="https://mechmotum.github.io/blog/jan-groenhuis-graduates.html" rel="alternate"></link><published>2021-06-16T13:08:00-07:00</published><updated>2021-06-16T13:08:00-07:00</updated><author><name>Jason K. Moore</name></author><id>tag:mechmotum.github.io,2021-06-16:/blog/jan-groenhuis-graduates.html</id><content type="html">&lt;img alt="Jan Groenhuis Headshot" class="align-center" src="https://objects-us-east-1.dream.io/mechmotum/headshot-groenhuis-jan.jpg" /&gt;
&lt;p&gt;Jan Groenhuis successfully defended &amp;quot;&lt;a class="reference external" href="http://resolver.tudelft.nl/uuid:a75adcc1-4dd2-4bda-9abc-bf4a4aea17ef"&gt;Experimental data-tracking of the BMX SX
gate start using biomechanical modeling and trajectory optimization&lt;/a&gt;&amp;quot;.
Everyone at the bicycle lab is very proud of Jan and will miss him! Jan is off
to European bicycle tour as his first new venture.&lt;/p&gt;
</content><category term="news"></category><category term="bicycle"></category><category term="engineering"></category></entry><entry><title>New Preprint on Ski Jump Safety and skijumpdesign Software Update</title><link href="https://mechmotum.github.io/blog/ski-jump-analysis.html" rel="alternate"></link><published>2021-04-01T00:00:00-07:00</published><updated>2021-04-01T00:00:00-07:00</updated><author><name>Jason K. Moore</name></author><id>tag:mechmotum.github.io,2021-04-01:/blog/ski-jump-analysis.html</id><summary type="html">&lt;p&gt;Yesterday, we posted a new preprint to &lt;a class="reference external" href="https://engrxiv.org"&gt;engrXiv&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
J. K. Moore, B. Cloud, M. Hubbard, and C. A. Brown, &amp;quot;Analysis and Ethical
Design of Terrain Park Jumps for Snow Sports,&amp;quot; Preprint, Mar. 2021.
[Online]. Available: &lt;a class="reference external" href="https://doi.org/10.31224/osf.io/sq7u9"&gt;https://doi.org/10.31224/osf.io/sq7u9&lt;/a&gt;.&lt;/blockquote&gt;
&lt;p&gt;The abstract reads:&lt;/p&gt;
&lt;blockquote&gt;
Most American snowsport resorts …&lt;/blockquote&gt;</summary><content type="html">&lt;p&gt;Yesterday, we posted a new preprint to &lt;a class="reference external" href="https://engrxiv.org"&gt;engrXiv&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
J. K. Moore, B. Cloud, M. Hubbard, and C. A. Brown, &amp;quot;Analysis and Ethical
Design of Terrain Park Jumps for Snow Sports,&amp;quot; Preprint, Mar. 2021.
[Online]. Available: &lt;a class="reference external" href="https://doi.org/10.31224/osf.io/sq7u9"&gt;https://doi.org/10.31224/osf.io/sq7u9&lt;/a&gt;.&lt;/blockquote&gt;
&lt;p&gt;The abstract reads:&lt;/p&gt;
&lt;blockquote&gt;
Most American snowsport resorts now have terrain parks and decades-long
epidemiological evidence correlates terrain park use with injuries.
Engineering design of jumps could reduce injuries by limiting equivalent
fall heights (EFHs), which indicate dissipated landing impact energy. No
evidence refutes making terrain park jumps safer in this way. We discuss
case studies illustrating that large EFHs are significant factors in
traumatic injuries on terrain park jumps. Standards and design tools for
builders can make jumps safer. We introduce a tool that can evaluate
existing jumps as well as design jump profiles with safer equivalent EFHs to
reduce injuries.&lt;/blockquote&gt;
&lt;p&gt;In the paper, we attempt to strengthen the arguments for adopting jump design
standards for public use snow sports jumps. We show how bad jumps can be
through two case studies that resulted in two individuals being paralyzed. We
then highlight the large amount of epidemiological studies that continue to
show the high dangers associated with these jumps and point out that the
scientific literature is also polluted with studies that attempt to cloud the
reality of the dangers; favoring ski industry and insurance companies desires.
Lastly, we discuss the latest release of our software, &lt;a class="reference external" href="https://skijumpdesign.readthedocs.io"&gt;skijumpdesign&lt;/a&gt;, which
has new features that let jump builders analyze existing or planned jumps by
equivalent fall height calculations. These features were used to analyse the
two case studies in the paper.&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="Equivalent fall height plot of the Salvini case study." src="https://objects-us-east-1.dream.io/mechmotum/salvini-v-snoqualmie.png" style="width: 600px;" /&gt;
&lt;p class="caption"&gt;Example equivalent fall height analysis of a dangerous snow sport jump taken
from the paper.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="figure align-center"&gt;
&lt;a class="reference external image-reference" href="http://www.skijumpdesign.info/analysis"&gt;&lt;img alt="Screenshot of the skijumpdesign app's analysis page." src="https://objects-us-east-1.dream.io/mechmotum/skijumpdesign-1.4.0-analysis-screenshot.png" style="width: 600px;" /&gt;&lt;/a&gt;
&lt;p class="caption"&gt;Screenshot of the new &amp;quot;analysis&amp;quot; page of the web app. Click the image to go
to the app.&lt;/p&gt;
&lt;/div&gt;
</content><category term="research"></category><category term="skiing"></category><category term="snowboarding"></category><category term="safety"></category><category term="sports"></category><category term="engineering"></category><category term="ethics"></category></entry><entry><title>JupyterTeam Progress Fall 2020</title><link href="https://mechmotum.github.io/blog/jupyter-fall-2020.html" rel="alternate"></link><published>2021-01-14T00:00:00-08:00</published><updated>2021-01-14T00:00:00-08:00</updated><author><name>Lyla Sanders</name></author><id>tag:mechmotum.github.io,2021-01-14:/blog/jupyter-fall-2020.html</id><summary type="html">&lt;p class="first last"&gt;Blog post on the progress made by JupyterTeam over the fall of 2020&lt;/p&gt;
</summary><content type="html">&lt;div class="section" id="summary"&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;During the fall quarter of 2020 the JupyterTeam attended JupyterCon and was
able to make improvements to Thebe which our &lt;a class="reference external" href="https://github.com/LibreTexts/ckeditor-binder-plugin"&gt;CKEditor Binder Plugin&lt;/a&gt; depends on.
Furthermore, we expanded LibreTexts's CKEditor with a new Query Plugin to
enable authors to embed interactive problems into their textbook pages for
readers to solve. Finally, we went through most of the process of migrating the
Flock kubernetes cluster to Galaxy, which contains many improvements.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="jupytercon-2020"&gt;
&lt;h2&gt;JupyterCon 2020&lt;/h2&gt;
&lt;p&gt;Jupyter Team attended a JupyterCon sprint to improve &lt;a class="reference external" href="https://github.com/executablebooks/thebe/"&gt;Thebe&lt;/a&gt;, an open source project which we
use to insert executable code blocks into LibreTexts textbook pages.&lt;/p&gt;
&lt;p&gt;Additions to Thebe made by the team include:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Documenting how to display various &lt;a class="reference external" href="https://github.com/jupyter-widgets/ipywidgets/"&gt;ipywidgets&lt;/a&gt; in Thebe code blocks.
Without including scripts such as &lt;a class="reference external" href="https://requirejs.org/"&gt;RequireJS&lt;/a&gt; and
&lt;a class="reference external" href="https://fontawesome.com/v4.7.0/"&gt;Font Awesome 4&lt;/a&gt;, many ipywidgets would
not display properly. Some example pages for widgets created include &lt;a class="reference external" href="https://thebe.readthedocs.io/en/latest/examples/bqplot_example.html"&gt;bqplot&lt;/a&gt;,
&lt;a class="reference external" href="https://thebe.readthedocs.io/en/latest/examples/ipyleaflet_example.html"&gt;ipyleaflet&lt;/a&gt;,
and &lt;a class="reference external" href="https://thebe.readthedocs.io/en/latest/examples/plotly-example.html"&gt;plotly&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/executablebooks/thebe/pull/274"&gt;Adding a read-only option to code blocks&lt;/a&gt;, allowing users to
disable editing on rendered code blocks.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/executablebooks/thebe/pull/266"&gt;Persisting Binder sessions across pages&lt;/a&gt;, which decreases the
time to connect to a Binder pod if a user has already requested a previous
session.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/executablebooks/thebe/pull/297"&gt;Simplifying Jest tests&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We plan to continue working with Thebe in order to improve how it inserts and
displays interactive JupyterLab widgets.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="ckeditor-query-plugin"&gt;
&lt;h2&gt;CKEditor Query Plugin&lt;/h2&gt;
&lt;p&gt;The &lt;a class="reference external" href="https://github.com/LibreTexts/ckeditor-query-plugin"&gt;CKEditor Query Plugin&lt;/a&gt; is a plugin added to
the LibreTexts text editor, CKEditor. The plugin allows textbook authors to
embed interactive problems into HTML pages. Just like with our CKEditor Binder
Plugin, the Query Plugin adds a small icon to CKEditor so that authors may add
answerable problems into their textbooks.  The plugin works by simply embedding
a LibreTexts Javascript template into the HTML code which constitutes the
webpage. This plugin is completely operational and deployed on libretexts.org.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="cluster-migration"&gt;
&lt;h2&gt;Cluster Migration&lt;/h2&gt;
&lt;p&gt;During the winter break, the Jupyter team migrated the previous Flock cluster
to the new Galaxy cluster. This involved various changes in networking,
hardware, and Jupyterhub.&lt;/p&gt;
&lt;p&gt;The first step was to make sure that all of the physical computers were
properly wired to each other. At the end of it all, we were able to
reconsolidate our Flock and protogalaxy clusters to where we now have 17 nodes
online. These new Galaxy nodes are running high availability programs like
metallb and HAproxy to preserve the availability of our Libretexts services and
Kubernetes control-planes which is a great improvement over the previous Flock
cluster.&lt;/p&gt;
&lt;p&gt;We improved cluster management by setting up Ubuntu cloudinit to boot the nodes
and install a Puppet agent from which we are able to configure and install all
the processes we need using a Puppet server. This creates consistency across
our nodes and makes it easier to refresh the state of the cluster if something
goes massively wrong. Both of these features were lacking in the Flock cluster
and using them now makes it much easier to remotely manage these nodes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="looking-foward"&gt;
&lt;h2&gt;Looking Foward&lt;/h2&gt;
&lt;p&gt;While there are still a few &lt;a class="reference external" href="https://github.com/LibreTexts/metalc/issues/14#issuecomment-753696732"&gt;remaining objectives&lt;/a&gt; to
complete the setup of the Galaxy cluster, our services such as JupyterHub and
BinderHub are all online and available to the public.  In fact, all UC Davis
students and faculty have now been authorized to access jupyter.libretexts.org
without needing manual permission from us to do so. We intend to continue to
expand the availability of these Jupyter services, with our next target being a
JupyterHub for high preformance computing.&lt;/p&gt;
&lt;/div&gt;
</content><category term="education"></category><category term="oer"></category><category term="education"></category><category term="jupyter"></category><category term="textbooks"></category><category term="libretexts"></category></entry><entry><title>JupyterTeam Progress Summer 2020</title><link href="https://mechmotum.github.io/blog/jupyter-summer-2020.html" rel="alternate"></link><published>2020-10-13T00:00:00-07:00</published><updated>2020-10-13T00:00:00-07:00</updated><author><name>Lyla Sanders</name></author><id>tag:mechmotum.github.io,2020-10-13:/blog/jupyter-summer-2020.html</id><summary type="html">&lt;p class="first last"&gt;Blog post on the progress made by JupyterTeam over the summer of 2020&lt;/p&gt;
</summary><content type="html">&lt;div class="section" id="summary"&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;Over the summer sessions of 2020, the JupyterTeam was able to
restructure the default-env image used by our &lt;a class="reference external" href="https://jupyter.libretexts.org/hub/login"&gt;JupyterHub
deployment&lt;/a&gt; so that it is
built by
&lt;a class="reference external" href="https://repo2docker.readthedocs.io/en/latest/"&gt;repo2docker&lt;/a&gt;,
allowing us to finally make use of our own &lt;a class="reference external" href="https://binder.libretexts.org/"&gt;Binder
deployment&lt;/a&gt; as the backend for the
&lt;a class="reference external" href="https://github.com/LibreTexts/ckeditor-binder-plugin"&gt;CKEditor Binder
plugin&lt;/a&gt; on
&lt;a class="reference external" href="https://libretexts.org/"&gt;Libretexts.org&lt;/a&gt;. This resolves the
remaining issues mentioned in the JupyterTeam's &lt;a class="reference external" href="https://mechmotum.github.io/blog/libretexts-jupyter-plugin.html#future"&gt;previous blog
post&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Additionally, we began bare-metal development on the new Galaxy
Kubernetes cluster building off of experiences with the first &lt;a class="reference external" href="https://mechmotum.github.io/blog/jupyter-summer-2019.html"&gt;flock
cluster&lt;/a&gt;
and improving on it. We also made numerous miscallaneous improvements
including a new Grafana alert setup, a more detailed FAQ page for our
JupyterHub as well as completing some much needed cluster upgrades.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="default-env-2-0"&gt;
&lt;h2&gt;default-env 2.0&lt;/h2&gt;
&lt;p&gt;A long standing complication with our previous &lt;a class="reference external" href="https://github.com/LibreTexts/default-env/tree/1.13/rich-default"&gt;rich default
default-env&lt;/a&gt;
image was that it was built using only a single, cluttered Dockerfile
and environment.yml. This led to the files being &lt;a class="reference external" href="https://github.com/LibreTexts/metalc/issues/121"&gt;quite
long&lt;/a&gt; and &lt;a class="reference external" href="https://github.com/LibreTexts/metalc/issues/130"&gt;difficult
to maintain&lt;/a&gt;. One of
the advantages of moving to a &lt;a class="reference external" href="https://github.com/LibreTexts/default-env/tree/2.0.1"&gt;repo2docker compatible
environment&lt;/a&gt; is
that it separates our image building files into more &lt;a class="reference external" href="https://repo2docker.readthedocs.io/en/latest/config_files.html"&gt;logical
parts&lt;/a&gt;.
Using repo2docker, we no longer have to include a Dockerfile and our
current environment is able to automate away much of what we previously
had to do using docker commands.&lt;/p&gt;
&lt;p&gt;Additionally, the new &lt;a class="reference external" href="https://github.com/LibreTexts/default-env"&gt;default-env
2.0&lt;/a&gt; is properly equipped
to handle &lt;a class="reference external" href="https://docs.conda.io/projects/conda/en/latest/user-guide/tasks/manage-environments.html"&gt;custom conda
environments&lt;/a&gt;.
Not only does this enable users to install their own persistent packages
on the Hub, but it also permitted us to &lt;a class="reference external" href="https://github.com/LibreTexts/metalc/issues/151"&gt;reduce the conda
channels&lt;/a&gt; necessary
to build the image down to just conda-forge/defaults and those provided
by repo2docker. Additionally, repo2docker now uses an alternative
dependency solver named &lt;a class="reference external" href="https://github.com/mamba-org/mamba"&gt;mamba&lt;/a&gt;
which reduces our conda environment build times (one part of the image
building process) down to only a few seconds. We further sought to
improve the maintainability of default-env 2.0 by including only the top
level dependencies for all of our desired packages to avoid listing
redundancies.&lt;/p&gt;
&lt;p&gt;Finally, we've fully overhauled the &lt;a class="reference external" href="https://jupyter.libretexts.org/hub/faq"&gt;LibreTexts FAQ page for
JupyterHub&lt;/a&gt; to explain these
default env changes, provide information on creating conda environments,
and more. A small
&lt;a class="reference external" href="https://github.com/LibreTexts/labextension-libretexts-faq"&gt;extension&lt;/a&gt;
was added to the JupyterLab interface so that users can directly access
the FAQ through the 'help' tab or in the Jupyter Launcher. To do this,
we consolidated the
&lt;a class="reference external" href="https://github.com/LibreTexts/jupyterhub-templates"&gt;jupyter-templates&lt;/a&gt;
and &lt;a class="reference external" href="https://github.com/LibreTexts/jupyterhub-images"&gt;jupyter-images&lt;/a&gt;
repositories into just jupyter-templates, and &lt;em&gt;all&lt;/em&gt; html pages are now
jinja templates. You can read more about the specifics from the
jupyter-templates &lt;a class="reference external" href="https://github.com/LibreTexts/jupyterhub-templates/blob/master/README.md"&gt;README.md
file&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="ckeditor-binder-plugin-and-our-kubernetes-binderhub-deployment"&gt;
&lt;h2&gt;CKEditor Binder plugin and our Kubernetes BinderHub deployment&lt;/h2&gt;
&lt;p&gt;The &lt;a class="reference external" href="https://github.com/LibreTexts/ckeditor-binder-plugin"&gt;CKEditor Binder
plugin&lt;/a&gt; helps
provide kernels to executable code cells on Libretexts.org using
&lt;a class="reference external" href="https://github.com/jupyterhub/binderhub"&gt;BinderHub&lt;/a&gt; as a backend.
While the plugin has been working for a while now and it does enable
JupyterLab-esque features on LibreTexts, the code cells would &lt;a class="reference external" href="https://github.com/LibreTexts/metalc/issues/83"&gt;often
take many minutes to load and
execute&lt;/a&gt;, if they
ever did at all. Furthermore, Binder uses repo2docker to build images
which meant that we could not use our own default-env repository as the
programming environment. As a result, we had to point CKEditor towards
external repositories where we had no control over the exact packages in
the environment. Two changes were made to fix this; we created
default-env 2.0 as outlined above, and we also brought our BinderHub
Kubernetes deployment into operation.&lt;/p&gt;
&lt;p&gt;The improvements of using our own default-env 2.0 and BinderHub in
CKEditor Binder plugin represent a huge benefit for LibreTexts. Now that
we can adjust the packages and kernels provided on LibreTexts with our
default-env 2.0, we can include additional &lt;a class="reference external" href="https://chem.libretexts.org/Courses/Remixer_University/LibreTexts_Construction_Guide/05%3A_Interactive_Elements"&gt;interactive
widgets&lt;/a&gt;
and exercise greater version control over the programming environment.
Switching to a locally maintained BinderHub allows us to cache the
images which are built by Binder on that node, dramatically increasing
loading speeds when executing code cells on LibreTexts. Pressing &amp;quot;run&amp;quot;
will now take no more than 20 seconds to connect to a Binder provided
kernel whereas before it often took minutes or longer due to the
inconsistent availability of mybinder.org. This drastic decrease in load
times makes the plugin much more accessible for both authors and
readers.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="galaxy-cluster"&gt;
&lt;h2&gt;Galaxy Cluster&lt;/h2&gt;
&lt;p&gt;The primary objectives for the new Galaxy cluster are high availability
and maintainability. Part of how we achieve high availability is by
using &lt;a class="reference external" href="https://github.com/kubernetes/kubeadm/blob/master/docs/ha-considerations.md#options-for-software-load-balancing"&gt;Keepalived and
HAproxy&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Keepalived runs as a static Kubernetes pod on each control-plane node
and it manages a virtual IP for the kube-apiserver that all of the
Kubernetes worker nodes communicate with. If the control-plane node
currently holding this Keepalived virtual IP goes down, Keepalived will
pass the virtual IP on to one of our remaining control-plane nodes so
that the rest of the Kubernetes cluster can still communicate with the
kube-apiserver.&lt;/p&gt;
&lt;p&gt;After Keepalived receives a kube-apiserver request, HAproxy (also
running as a static pod on each control-plane node) will load-balance
the request onto whichever control-plane node is chosen according to a
&lt;a class="reference external" href="https://avinetworks.com/glossary/round-robin-load-balancing/"&gt;round robin
algorithm&lt;/a&gt;.
If we did not use HAproxy, any kube-apiserver request received through
the Keepalived virtual IP would automatically be routed to that same
control-plane node, leaving the other control-plane nodes to just sit
there and do nothing. Load-balancing with HAproxy takes better advantage
of our available hardware and lowers the kube-apiserver load on any
given node.&lt;/p&gt;
&lt;p&gt;To improve the maintainability of this cluster, we use
&lt;a class="reference external" href="https://puppet.com/docs/puppet/6.18/puppet_index.html"&gt;Puppet&lt;/a&gt; to
setup Kubernetes and administrate our entire bare-metal cluster.
Although there already exists a &lt;a class="reference external" href="https://github.com/puppetlabs/puppetlabs-kubernetes"&gt;Puppet module for bootstrapping
Kubernetes&lt;/a&gt;, our
high availability setup has specific demands which required a &lt;a class="reference external" href="https://github.com/LibreTexts/protogalaxy"&gt;new
Puppet module&lt;/a&gt; to be
written. The Protogalaxy Puppet module bootstraps all of the necessary
components for Kubernetes using kubeadm like kubelet, kubelctl, and also
configures Keepalived and HAproxy as static pods. You can read more
about the module on its
&lt;a class="reference external" href="https://github.com/LibreTexts/protogalaxy/blob/master/README.md"&gt;README&lt;/a&gt;
page.&lt;/p&gt;
&lt;p&gt;Finally, we have a &lt;a class="reference external" href="https://github.com/LibreTexts/metalc/blob/master/docs/Galaxy-Control-Repo.md"&gt;Puppet
control-repo&lt;/a&gt;
which employs the ProtoGalaxy module and configures all the
non-Kubernetes components of our Galaxy cluster. Our goal is to use this
control-repo to completely reset the cluster state to a working version
in the case that something massively breaks. This would greatly improve
the maintainability of Galaxy cluster.&lt;/p&gt;
&lt;p&gt;As of now, we currently only have a development Galaxy cluster with no
public availability. We repurposed chicks11-18 from the Flock cluster
with brand new SSDs and then booted them up using IPMI. We also used
IPMI to install Ubuntu on all of these nodes because we do not have
physical access to the cluster in the midst of Covid-19.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="flock-cluster-upgrades-improvements"&gt;
&lt;h2&gt;Flock Cluster Upgrades/Improvements&lt;/h2&gt;
&lt;p&gt;At the beginning of summer, the original flock cluster went totally down
because our &lt;a class="reference external" href="https://v1-18.docs.kubernetes.io/docs/tasks/administer-cluster/kubeadm/kubeadm-certs/"&gt;kubeadm
certificates&lt;/a&gt;
expired. The reason for this was that our cluster was very behind on
Ubuntu and Kubernetes upgrades; the kube-apiserver and kubelet were on
v1.12 while the latest release was v1.18 at the time. One of the first
things we did was to upgrade the flock cluster across all the nodes, and
they now sit at a neat v1.19 for kubelet/kube-apiserver and v18.04.5 for
Ubuntu. Furthermore, we established a policy of upgrading the cluster
every 4 months so that the certificates do not meet their yearly
expiration date as they did before.&lt;/p&gt;
&lt;p&gt;Other improvements were made as well. Kubernetes
&lt;a class="reference external" href="https://cert-manager.io/docs/installation/kubernetes/"&gt;cert-manager&lt;/a&gt;
has been upgraded to v1, and &lt;a class="reference external" href="https://v3.helm.sh/"&gt;helm&lt;/a&gt; has also
been migrated over to v3. Our Grafana alerts setup has been recrafted so
that we no longer have to manually reinput our dashboards if the pod
goes down. We also enabled IPMI interfaces on all the nodes, affording
us remote adminstration tools in light of Covid-19.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="future-plans"&gt;
&lt;h2&gt;Future Plans&lt;/h2&gt;
&lt;p&gt;Our top priorities moving forward are to enhance the executable code
cell features of LibreTextsand continue development on the Galaxy
cluster. We would like to fix the current issues with ipywidgets and
other interactive plotting features currently exhibited by our CKEditor
Binder plugin. To complement this, we must bring cell-to-cell
communcation to the plugin so that adjusting the output of one cell
(such as a slider) can redraw the output of a previous cell just as it
would in JupyterLab.&lt;/p&gt;
&lt;p&gt;For the Galaxy cluster, we need to find a way to read the authentication
process of Hub users so that we can tag their pod and send them to the
high performance computing setup as needed. We will also need to
construct the physical computer setup for Galaxy, just as was done for
Flock cluster over a year ago. Stay tuned for more updates!&lt;/p&gt;
&lt;/div&gt;
</content><category term="education"></category><category term="oer"></category><category term="education"></category><category term="jupyter"></category><category term="textbooks"></category><category term="engineering"></category><category term="libretexts"></category></entry><entry><title>What Caused Chloé Dygert's Crash?</title><link href="https://mechmotum.github.io/blog/dygert-crash.html" rel="alternate"></link><published>2020-09-29T00:00:00-07:00</published><updated>2020-09-29T00:00:00-07:00</updated><author><name>Jason K. Moore</name></author><id>tag:mechmotum.github.io,2020-09-29:/blog/dygert-crash.html</id><summary type="html">&lt;p class="first last"&gt;Back of the napkin analysis and commentary on Chloé Dygert's 2020 UCI
Road World Championships crash.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Chlo%C3%A9_Dygert"&gt;Chloé Dygert&lt;/a&gt; had a race ending crash on September 24th, 2020 in the &lt;a class="reference external" href="https://en.wikipedia.org/wiki/UCI_Road_World_Championships"&gt;UCI
Road World Championships&lt;/a&gt;. The crash was caught quite clearly on video. The
bicycle starts oscillating during a right turn decent and she loses directional
control of the bicycle. She ultimately collided with a guard rail and incurred
major injuries. You can watch for yourself in the video below:&lt;/p&gt;
&lt;div style="text-align: center;"&gt;
&lt;iframe
  width="560"
  height="315"
  src="https://www.youtube.com/embed/rEzFIQmDJYU"
  frameborder="0"
  allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
  allowfullscreen&gt;
&lt;/iframe&gt;
&lt;/div&gt;&lt;p&gt;The video has made its round on the internet and collected various commentary.
For example, on the Single Track Vehicle Dynamics discussion list there are
&lt;a class="reference external" href="https://groups.google.com/forum/#!msg/stvdy/K932UhSVOAs/uUJE83YuBAAJ"&gt;several perspectives&lt;/a&gt;. As is common with videos showing oscillation of this
nature, the words &amp;quot;wobble&amp;quot; and &amp;quot;shimmy&amp;quot; are often brought up.&lt;/p&gt;
&lt;div class="section" id="what-is-wobble-and-shimmy-of-a-bicycle"&gt;
&lt;h2&gt;What is &amp;quot;wobble&amp;quot; and &amp;quot;shimmy&amp;quot; of a bicycle?&lt;/h2&gt;
&lt;p&gt;The words (speed) wobble and shimmy are both interchangeably used in academic
and popular literature without a unique or definitive definition. Both terms
are used to describe higher frequency oscillations that single track vehicles
(bicycles, motorcycles, and similar vehicles) sometimes exhibit
&lt;a class="citation-reference" href="#wikipedia2020" id="citation-reference-1"&gt;[Wikipedia2020]&lt;/a&gt;. In this case, &amp;quot;higher frequencies&amp;quot; refers to being higher
than the vehicle's weave oscillation frequency. Weave is the fundamental steer
and roll oscillation that occurs in the 0 to 4 Hz bandwidth for bicycles
traveling at speeds below 20 m/s (72 km/h, 45 mph). In addition to the
frequency differences, at higher speeds this wobble/shimmy oscillation can grow
in magnitude (unstable) whereas weave oscillations become more damped (stable)
as the speed increases.&lt;/p&gt;
&lt;p&gt;Wobble/shimmy oscillations are attributed to the effective flexibility of the
bicycle frame between the contact patches of the two tires. This flexibility is
primarily a combination of the flex in the tire carcass and structural
stiffness of the frame and wheels. On the other hand, weave oscillations are
present even if the bicycle and tires are infinitely stiff, i.e. weave is a
function purely of the assembly of rigid bodies (wheels, fork, frame, ground)
and the nature of their connections.&lt;/p&gt;
&lt;p&gt;Advanced dynamics models of bicycles are able to predict the wobble/shimmy
oscillation (&lt;a class="citation-reference" href="#plochl2012" id="citation-reference-2"&gt;[Plöchl2012]&lt;/a&gt;, &lt;a class="citation-reference" href="#klinger2014" id="citation-reference-3"&gt;[Klinger2014]&lt;/a&gt;) and, at least in these papers,
wobble &lt;em&gt;is&lt;/em&gt; specifically defined. These models show that:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;at speeds &amp;gt; 13 m/s (45 km/h) the wobble frequency of oscillation is between 8
and 12 Hz&lt;/li&gt;
&lt;li&gt;the dominant motion during wobble is the oscillation of the handle bar and
fork about the steering axis and this steer motion has an amplitude magnitude
of 3-5X that of the roll motion&lt;/li&gt;
&lt;li&gt;there is a speed threshold (2-6 m/s) at which the oscillation will tend to be
unstable and grow; above this threshold damping this oscillation is the
responsibility of the rider&lt;/li&gt;
&lt;li&gt;slowing down will dampen the oscillations&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This video shows a steer dominant high frequency oscillation that qualitatively
matches the wobble/shimmy model predictions to give an idea of what these
research papers are modeling:&lt;/p&gt;
&lt;div style="text-align: center;"&gt;
&lt;iframe
  width="560"
  height="315"
  src="https://www.youtube.com/embed/vSNjpQPdrX4?start=27"
  frameborder="0"
  allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
  allowfullscreen&gt;
&lt;/iframe&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;div class="section" id="did-chloe-dygert-experience-wobble-shimmy"&gt;
&lt;h2&gt;Did Chloé Dygert experience wobble/shimmy?&lt;/h2&gt;
&lt;p&gt;After watching Dygert's crash frame-by-frame, we make some observations:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;She's likely traveling at a speed between 9 m/s (32 km/h, 20 mph) and 13 m/s
(47 km/h, 29 mph)&lt;/li&gt;
&lt;li&gt;She is in a steady rightward turn, with a large roll angle of about 30
degrees or so.&lt;/li&gt;
&lt;li&gt;She is not pedaling during the event.&lt;/li&gt;
&lt;li&gt;She is initially bounced from her seat and the oscillation builds with her
disconnecting more and more from the seat. This left her fully connected to
the bicycle only at the time trial bars and at the pedals.&lt;/li&gt;
&lt;li&gt;The magnitudes of the steer and roll angles during oscillation are of similar
magnitude.&lt;/li&gt;
&lt;li&gt;The frequency of oscillation is approximately 4.2 Hz.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The last two points would seem to indicate that this isn't wobble/shimmy; at
least not by the definition espoused by the academic literature. The frequency
is half what it should be and it isn't steer dominant. The video of Dygert
shows clearly different oscillations than that shown in the &amp;quot;Bicycle Shimmy&amp;quot;
video above. We aren't likely seeing wobble/shimmy in Dygert's crash but the
initial jolt visible in the video surely excited an unstable oscillation. The
large bump may have played a significant role in initiating the subsequent
cascading effects. There is also the possibility of the rider effectively
causing the instability. This is well documented in aircraft as &amp;quot;pilot induced
oscillations&amp;quot;, but seems less likely as it requires more activity on the
rider's part.&lt;/p&gt;
&lt;p&gt;Here is a video that has similarities to Dygert's oscillation. In this video,
the rider's pelvis seems fairly firmly connected to the seat. The oscillations
are similar in magnitude for steer and roll and a frame-by-frame analysis
estimate gives a 2 Hz oscillation frequency, which also doesn't fit the bill to
be wobble/shimmy. Interestingly, it occurs with the more solid seat-rider
coupling and not at a hard roll angle.&lt;/p&gt;
&lt;div style="text-align: center;"&gt;
&lt;iframe
  width="560"
  height="315"
  src="https://www.youtube.com/embed/VfngbsIUSj8?start=27"
  frameborder="0"
  allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
  allowfullscreen&gt;
&lt;/iframe&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;One important assumption in the wobble/shimmy academic literature is that the
rider's pelvis is firmly connected to the seat in the models. With Dygert's
pelvis disconnected from the seat, that bicycle-rider system is thus different
than these models. The interactions of the rider's flexible body with the
bicycle in Dygert's riding position may very well destabilize the weave
oscillation. For example, &lt;a class="citation-reference" href="#moore2012a" id="citation-reference-4"&gt;[Moore2012a]&lt;/a&gt; shows that simply adding the inertial
effects of the rider's arms to the handlebars can have a destabilizing effect.&lt;/p&gt;
&lt;p&gt;A second important assumption in the models in the academic literature is that
the nominal roll angle of the bicycle is zero. At a roll angle of 30 degrees,
the predicted frequencies of wobble/shimmy oscillation could be lower and the
steer and roll amplitudes similar in magnitude. This would then better match
what we observe with Dygert's crash. At large roll angles like this, the
vehicle could also have an easily destabilized lower frequency weave
oscillation. But there are no studies of these phenomena in hard steady turns
for bicycles.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;So, what caused Chloé Dygert's crash?&lt;/strong&gt; Given the limited information and
barring there were no mechanical failures, our best idea is that a bump excited
an unstable weave-like oscillation during the descent. The high speed and large
roll angle as well as Dygert's time trial body position and her disconnection
from the seat may have all contributed to this instability.&lt;/p&gt;
&lt;p&gt;Developing a predictive model of the rider being loosely coupled to the bicycle
could help answer whether there are aspects of the bicycle's design or seating
position which could minimize the chance of this happening. Studying
perturbations around large roll angles could also offer more insight. And,
lastly, a rider control model could help determine whether there is something
the rider could actively do to stop this and regain control (besides slowing
down). These types of analyses take more time and resources, but could likely
pin down the cause more concretely.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="acknowledgements"&gt;
&lt;h2&gt;Acknowledgements&lt;/h2&gt;
&lt;p&gt;We thank Jaap Meijaard for some helpful comments as well as the folks on the
Single Track Vehicle Dynamics discussion list for providing food-for-thought.
Yumiko Henneberry contributed copy editing.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="references"&gt;
&lt;h2&gt;References&lt;/h2&gt;
&lt;table class="docutils citation" frame="void" id="wikipedia2020" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#citation-reference-1"&gt;[Wikipedia2020]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Bicycle_and_motorcycle_dynamics#Wobble"&gt;https://en.wikipedia.org/wiki/Bicycle_and_motorcycle_dynamics#Wobble&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils citation" frame="void" id="plochl2012" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;[Plöchl2012]&lt;/td&gt;&lt;td&gt;&lt;em&gt;(&lt;a class="fn-backref" href="#citation-reference-2"&gt;1&lt;/a&gt;, &lt;a class="fn-backref" href="#citation-reference-5"&gt;2&lt;/a&gt;)&lt;/em&gt; Plöchl, Manfred, Johannes Edelmann, Bernhard Angrosch, and
Christoph Ott. “On the Wobble Mode of a Bicycle.” Vehicle System Dynamics
50, no. 3 (March 1, 2012): 415–29. &lt;a class="reference external" href="https://doi.org/10.1080/00423114.2011.594164"&gt;https://doi.org/10.1080/00423114.2011.594164&lt;/a&gt;.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils citation" frame="void" id="klinger2014" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;[Klinger2014]&lt;/td&gt;&lt;td&gt;&lt;em&gt;(&lt;a class="fn-backref" href="#citation-reference-3"&gt;1&lt;/a&gt;, &lt;a class="fn-backref" href="#citation-reference-6"&gt;2&lt;/a&gt;)&lt;/em&gt; Klinger, Florian, Julia Nusime, Johannes Edelmann, and Manfred
Plöchl. “Wobble of a Racing Bicycle with a Rider Hands on and Hands off the
Handlebar.” Vehicle System Dynamics 52, no. sup1 (May 30, 2014): 51–68.
&lt;a class="reference external" href="https://doi.org/10.1080/00423114.2013.877592"&gt;https://doi.org/10.1080/00423114.2013.877592&lt;/a&gt;.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils citation" frame="void" id="moore2012a" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#citation-reference-4"&gt;[Moore2012a]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a class="reference external" href="http://moorepants.github.io/dissertation/extensions.html#rider-arms"&gt;http://moorepants.github.io/dissertation/extensions.html#rider-arms&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils citation" frame="void" id="moore2012b" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#citation-reference-7"&gt;[Moore2012b]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a class="reference external" href="http://moorepants.github.io/dissertation/parameterstudy.html#bicycles-with-riders"&gt;http://moorepants.github.io/dissertation/parameterstudy.html#bicycles-with-riders&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class="section" id="notes"&gt;
&lt;h2&gt;Notes&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Women time trial-ers average about 45 km/h (12.5 m/s), so she should have
been going faster than this going down hill (but she isn't pedaling).&lt;/li&gt;
&lt;li&gt;&lt;a class="citation-reference" href="#plochl2012" id="citation-reference-5"&gt;[Plöchl2012]&lt;/a&gt; shows wobble frequencies between 6 and 9 Hz for 0 to 20 m/s in
Figure 4. Same figure shows the wobble mode unstable from about 4 to 20 m/s.
This is for a model with rider lean and the but attached to the seat.&lt;/li&gt;
&lt;li&gt;&lt;a class="citation-reference" href="#klinger2014" id="citation-reference-6"&gt;[Klinger2014]&lt;/a&gt; shows wobble between 8 and 12 Hz for 0 to 20 m/s for leaned
over hands on handlebars (no rider lean DOF).&lt;/li&gt;
&lt;li&gt;Figure 6.10 in &lt;a class="citation-reference" href="#moore2012b" id="citation-reference-7"&gt;[Moore2012b]&lt;/a&gt; shows that the weave frequency for a bicycle
without a rider can get higher 10 rad/s (1.6 Hz) at 7 m/s, maybe it would be
close to 4 Hz at 13 m/s?? But weave should be damped and stable at these
speeds.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="dygert-crash-video"&gt;
&lt;h3&gt;Dygert Crash Video&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Going downhill&lt;/li&gt;
&lt;li&gt;Rightward curve&lt;/li&gt;
&lt;li&gt;Large lean angle to the right&lt;/li&gt;
&lt;li&gt;The magnitude of roll is dominant. The steer and roll magnitudes are similar,
more like weave that a steering dominated wobble/shimmy.&lt;/li&gt;
&lt;li&gt;Riding a custom Felt bicycle&lt;/li&gt;
&lt;li&gt;She kept cycling holding on to the time trial bars. Can you can damp
oscillations as good in that position?&lt;/li&gt;
&lt;li&gt;Can the geometry of the time trial bike and the different mass distribution
due to the different rider position have influence on the wobble frequency (a
time trial bike is definitely different in geometry than a normal racing bike
which Klungel might have used in his experiments)?&lt;/li&gt;
&lt;li&gt;Here is a map of the course by Imola:
&lt;a class="reference external" href="https://www.cyclingweekly.com/news/racing/uci-road-world-championships-465806"&gt;https://www.cyclingweekly.com/news/racing/uci-road-world-championships-465806&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;4:09 to 4:10 the seat of the bike bounces upward, maybe a bump in the road?&lt;/li&gt;
&lt;li&gt;4:10 to 4:19 She bounces once on the seat and then a second time with her
butt disconnecting from the seat. The bicycle leans further rightward during
this process.&lt;/li&gt;
&lt;li&gt;4:19 to 4:23 bounces back down on the seat&lt;/li&gt;
&lt;li&gt;4:23 to 4:27 bounces back up off the seat, bike is even further leaned hard
to the right&lt;/li&gt;
&lt;li&gt;4:27 to 5:02 connects back down to the seat (much harder it seems), bike
leans back to the left just before connecting (but still at hard right roll
angle)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The follow csv file, &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;dygert-oscillation-data.csv&lt;/span&gt;&lt;/tt&gt; gives the second and frame
number for the peak left/right motions of the seat.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;second,frame,side
4,27,right
5,01,left
5,06,right
5,10,left
5,13,right
5,16,left
5,19,right
5,23,left
5,26,right
5,29,left
6,03,right
6,06,left
6,09,right
6,13,left
6,16,right
6,20,left
6,24,right
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Some code to calculate frequency:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pandas&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;pd&lt;/span&gt;
&lt;span class="n"&gt;df&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read_csv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;dygert-oscillation-data.csv&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;fps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;
&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;time&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;second&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;frame&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;fps&lt;/span&gt;
&lt;span class="n"&gt;period&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;time&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;diff&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mean&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;frequency_hz&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;period&lt;/span&gt;
&lt;span class="n"&gt;frequency_hz&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="wintergreen-cycling-camp-video"&gt;
&lt;h3&gt;Wintergreen Cycling Camp Video&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;guy's butt is connected to the seat the whole time (much more than Dygert)&lt;/li&gt;
&lt;li&gt;downhill in dropbar position&lt;/li&gt;
&lt;li&gt;got 2.18 Hz from this video, which is half that of Dygert and also much
lowered that the expected wobble mode.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;wintergreen.csv&lt;/tt&gt; giving timings of left/right peaks of seat motion:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;second,frame,side
31,29,left
32,06,right
32,13,left
32,20,right
32,26,left
33,03,right
33,08,left
33,15,right
33,24,left
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content><category term="outreach"></category><category term="bicycle"></category><category term="wobble"></category><category term="shimmy"></category><category term="sports"></category><category term="engineering"></category></entry><entry><title>Dr. Georgios Dialynas Successfully Defends His Thesis</title><link href="https://mechmotum.github.io/blog/dialynas-passes-defense.html" rel="alternate"></link><published>2020-09-16T07:15:00-07:00</published><updated>2020-09-16T07:15:00-07:00</updated><author><name>Jason K. Moore</name></author><id>tag:mechmotum.github.io,2020-09-16:/blog/dialynas-passes-defense.html</id><summary type="html">&lt;p class="first last"&gt;Georgios Dialynas successfully defended his thesis.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;As of yesterday, George Dialynas is now Dr. George Dialynas! Congratulations to
George! He delivered very nice experimental and theoretical work on the control
of bicycles where he's added some very important findings to push forward
single track vehicle control. He also developed unique equipment that we are
excited to use in the future in the lab. He has kindly shared his defense on
Youtube. This is a nice opportunity to see a Dutch PhD defense. The defense
provides a special time for the candidate to defend his findings and be awarded
his new degree.&lt;/p&gt;
&lt;p&gt;The first video is George's presentation followed by the defense portion:&lt;/p&gt;
&lt;iframe width="560" height="315"
src="https://www.youtube.com/embed/Ql41VQm_LM4" frameborder="0"
allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope;
picture-in-picture" allowfullscreen&gt;&lt;/iframe&gt;&lt;p&gt;The second video is the award ceremony after George passed:&lt;/p&gt;
&lt;iframe width="560" height="315"
src="https://www.youtube.com/embed/kxWMlRiSnDU" frameborder="0"
allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope;
picture-in-picture" allowfullscreen&gt;&lt;/iframe&gt;&lt;p&gt;Everyone at the bicycle lab is very proud of George and will miss him!&lt;/p&gt;
</content><category term="news"></category><category term="bicycle"></category><category term="engineering"></category></entry><entry><title>Announcing Georgios Dialynas's PhD Defense</title><link href="https://mechmotum.github.io/blog/dialynas-defense-announcement.html" rel="alternate"></link><published>2020-09-14T09:47:00-07:00</published><updated>2020-09-14T09:47:00-07:00</updated><author><name>Jason K. Moore</name></author><id>tag:mechmotum.github.io,2020-09-14:/blog/dialynas-defense-announcement.html</id><summary type="html">&lt;p class="first last"&gt;Georgios Dialynas will defend his Bicycle Lab PhD thesis September 15
at 12:30 CEST.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;From Georgios:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I will be defending my Ph.D. dissertation titled &amp;quot;An experimental approach
into the quantification of steering and balance behaviour of bicyclists&amp;quot; on
Tuesday 15th September 2020 at 12.30-13:30 h in the Senaatszaal of the TU
Delft Aula. Prior to the defense, at  12.00 h, I will give a brief
presentation about my research. I invite my family and friends to join the
event via: &lt;a class="reference external" href="https://www.facebook.com/events/1012404512534541"&gt;https://www.facebook.com/events/1012404512534541&lt;/a&gt; (I decided FB
since there are no time or participants limitations for the mobile version)&lt;/p&gt;
&lt;p&gt;Thesis Aim&lt;/p&gt;
&lt;p&gt;The aim of this thesis is to derive bicycle rider control models, based on
experimental data, that mimic the rider in his balance control task at
various forward speeds. These rider control models can help to understand
bicycle falls and crashes, predict cyclist motions necessary for vehicle to
vehicle safety systems, and can guide towards the design of a bicycle with
active balance control. You can find the softcopy of my thesis here:
&lt;a class="reference external" href="https://doi.org/10.4233/uuid:3c6817fd-9d04-4461-9253-f02f0ca78a6a"&gt;https://doi.org/10.4233/uuid:3c6817fd-9d04-4461-9253-f02f0ca78a6a&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Kind Regards,
Georgios Dialynas
Ph.D. Candidate at Delft University of Technology
Department of Biomechatronics &amp;amp; Human-Machine Control&lt;/p&gt;
&lt;/blockquote&gt;
</content><category term="news"></category><category term="bicycle"></category><category term="engineering"></category></entry><entry><title>A Web Application for Analyzing Bicycle Dynamics</title><link href="https://mechmotum.github.io/blog/bicycle-dynamics-web-application.html" rel="alternate"></link><published>2020-07-03T00:00:00-07:00</published><updated>2020-07-03T00:00:00-07:00</updated><author><name>Lyla Sanders</name></author><id>tag:mechmotum.github.io,2020-07-03:/blog/bicycle-dynamics-web-application.html</id><summary type="html">&lt;p class="first last"&gt;Blog post on creating a web application to serve as a GUI for bicycle
dynamics.&lt;/p&gt;
</summary><content type="html">&lt;div class="figure align-center"&gt;
&lt;a class="reference external image-reference" href="https://bicycle-dynamics.onrender.com"&gt;&lt;img alt="" src="https://objects-us-east-1.dream.io/mechmotum/bicycle-dynamics-app.png" style="width: 800px;" /&gt;&lt;/a&gt;
&lt;p class="caption"&gt;Screenshot of the bicycle dynamics web app. Click the image to go to the app
at &lt;a class="reference external" href="https://bicycle-dynamics.onrender.com"&gt;https://bicycle-dynamics.onrender.com&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="background"&gt;
&lt;h2&gt;Background&lt;/h2&gt;
&lt;p&gt;The &lt;a class="reference external" href="https://github.com/moorepants/BicycleParameters"&gt;BicycleParameters&lt;/a&gt; Python program provides a way for users to interact with
the 27 parameters laid out by the Whipple-Carvallo bicycle model. However, its
accessibility is limited to the programming experience of the user, and it can
be unweildy to manually work with.  To make the program more accessible, the
Bicycle Dynamics Web App was created to supply a graphical user interface for
the program as well as to enable a broader range of users to access it via the
web. The web app takes heavy inspiration from &lt;a class="reference external" href="http://ruina.tam.cornell.edu/research/topics/bicycle_mechanics/JBike6_web_folder/index.htm"&gt;JBike6&lt;/a&gt;, but aims to remove the
accessibility barriers inherent to MATLAB.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="building-the-app"&gt;
&lt;h2&gt;Building the App&lt;/h2&gt;
&lt;p&gt;Given that BicycleParameters was to be used as the backend for the website, it
made sense to use another Python based program to build the frontend. &lt;a class="reference external" href="https://dash.plotly.com"&gt;Dash&lt;/a&gt;
from Plotly serves this purpose perfectly, providing us with a full set of html
components in addition to many custom made Javascript elements such as
datatables and value sliders.  Finally, the app is styled with &lt;a class="reference external" href="https://dash-bootstrap-components.opensource.faculty.ai"&gt;Dash Bootstrap
Components&lt;/a&gt;, so that only a very minimal amount of custom CSS had to be
written.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="functionality"&gt;
&lt;h2&gt;Functionality&lt;/h2&gt;
&lt;p&gt;The Bicycle Dynamics Web App provides a graphical interface with 10 different
default parameter sets, a set of editable tables where users may adjust the
parameter values as they see fit, and two plots which are generated behind the
scenes from the datatable values. The geometry plot displays the essential
schematic and centers of mass of the bicycle, while the eigenvalue plot reveals
the self-stability of the bicycle as a function of its speed. Users may toggle
the centers of mass and intertia ellipsoid on the geometry plot, and they may
adjust the speed range for the eigenvalue plot.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;The Bicycle Dynamics Web App is currently deployed at
&lt;a class="reference external" href="https://bicycle-dynamics.onrender.com"&gt;https://bicycle-dynamics.onrender.com&lt;/a&gt; and its github repository is located at
&lt;a class="reference external" href="https://github.com/moorepants/BicycleParameters"&gt;https://github.com/moorepants/BicycleParameters&lt;/a&gt;. Feel free to play around with
the app and provide suggestions or feedback!&lt;/p&gt;
&lt;/div&gt;
</content><category term="research"></category><category term="bicycle"></category><category term="web application"></category></entry><entry><title>Developing a LibreTexts Editor Plugin For Inserting Executable Code Blocks</title><link href="https://mechmotum.github.io/blog/libretexts-jupyter-plugin.html" rel="alternate"></link><published>2020-06-22T00:00:00-07:00</published><updated>2020-06-22T00:00:00-07:00</updated><author><name>Hao Huang</name></author><id>tag:mechmotum.github.io,2020-06-22:/blog/libretexts-jupyter-plugin.html</id><summary type="html">&lt;p class="first last"&gt;Blog post on creating a CKEditor plugin which could insert
executable code blocks&lt;/p&gt;
</summary><content type="html">&lt;div class="section" id="background"&gt;
&lt;h2&gt;Background&lt;/h2&gt;
&lt;p&gt;During the end of the Fall Quarter 2019 and Winter Quarter 2020, we focused on
building a &lt;a class="reference external" href="https://github.com/LibreTexts/ckeditor-binder-plugin"&gt;CKEditor Binder Plugin&lt;/a&gt; to be used on the
&lt;a class="reference external" href="https://libretexts.org"&gt;LibreTexts&lt;/a&gt; website to allow textbook authors to
insert executable code blocks. We intend for both textbook authors and readers
to have the ability to edit and run code blocks efficiently, making online
educational content more interactive.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="build-process"&gt;
&lt;h2&gt;Build Process&lt;/h2&gt;
&lt;p&gt;We started the project by &lt;a class="reference external" href="https://docs.google.com/document/d/1eV08l_4djKJ7bc8r0LPbD5bp3QT7mHTZgABUleH15H0/edit?usp=sharing"&gt;surveying&lt;/a&gt;
LibreTexts authors and readers on their most requested features.&lt;/p&gt;
&lt;div class="section" id="binderhub"&gt;
&lt;h3&gt;BinderHub&lt;/h3&gt;
&lt;p&gt;On the backend, the CKEditor Binder plugin utilizes a project called &lt;a class="reference external" href="https://binderhub.readthedocs.io/en/latest/"&gt;BinderHub&lt;/a&gt; to run code blocks. BinderHub
is developed as part of the Jupyter project and gives custom computing
environments based on a list of requirements specified through a GitHub
repository.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="thebelab"&gt;
&lt;h3&gt;Thebelab&lt;/h3&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/minrk/thebelab"&gt;Thebelab&lt;/a&gt; and  &lt;a class="reference external" href="https://github.com/ines/juniper"&gt;Juniper&lt;/a&gt; are two examples of projects which can
insert code blocks into HTML pages and running them by requesting a kernel from
a computing backend like BinderHub. We found that Juniper had some better deign
elements; however, Thebelab was more actively maintained.  We deliberated on
which project to incorporate into our plugin, and decided to use Thebelab since
the recent commits indicated that any possible need for help would be more
promptly met. To incorporate some of the streamlined design elements of
Juniper, we planned on adding syntax highlighting.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="creating-the-plugin"&gt;
&lt;h3&gt;Creating the plugin&lt;/h3&gt;
&lt;p&gt;Our plugin is based on the &lt;a class="reference external" href="https://ckeditor.com/docs/ckeditor4/latest/"&gt;CKEditor 4&lt;/a&gt;, an open source “what you see
is what you get” text editor. This is the editor authors use on the LibreTexts
website.&lt;/p&gt;
&lt;p&gt;Our approach to this plugin is to make use of a &lt;a class="reference external" href="https://ckeditor.com/docs/ckeditor4/latest/guide/widget_sdk_intro.html"&gt;widget&lt;/a&gt;, on
the editor which allows us to place all the HTML elements of Thebelab together
as one unit. In other words the widget is a component made out of multiple
separate elements that are grouped together for easy formatting and movement;
however, individual parts can be altered independently. This allows for the
CKEditor instance to easily enforce the elements. Additionally, we created a
&lt;a class="reference external" href="https://ckeditor.com/docs/ckeditor4/latest/guide/dev_howtos_dialog_windows.html"&gt;dialog window&lt;/a&gt;
for each code block so that users can modify each block whenever they want.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="mindtouch-specific-settings"&gt;
&lt;h3&gt;Mindtouch Specific Settings&lt;/h3&gt;
&lt;p&gt;One of the challenges we faced was working around Mindtouch, which sometimes
caused the plugin to function in unexpected ways. For reference, Mindtouch is
the web based wiki software that Libretexts uses and it uses a CKEditor. An
example of an obstacle we faced was that Mindtouch seemed to apply its own CSS
to the plugin.  This caused text overflow, addition of characters to the end of
each line, etc.  In order to resolve this, we added our own &lt;a class="reference external" href="https://github.com/LibreTexts/ckeditor-binder-plugin/tree/staging/src/styles"&gt;styling&lt;/a&gt;
to the plugin. If one wishes to use the CKEditor plugin on their own pages,
they can remove the extra styling in the folder.&lt;/p&gt;
&lt;p&gt;Another difference was JavaScript conflict. When we were trying to support
Jupyter Widgets, we found that it depended on Require.js. However, adding
Require.js to Mindtouch would break all the JQuery plugins. In order to fix all
the JavaScript conflicts, we created registerPlugin.js to include all Mindtouch
specific JavaScript code.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="including-different-programming-languages"&gt;
&lt;h3&gt;Including different programming languages&lt;/h3&gt;
&lt;p&gt;During development, we used &lt;a class="reference external" href="https://github.com/binder-examples"&gt;environments developed by the Jupyter project&lt;/a&gt;. Using their Binder environments helped
us test and include different languages in our editor. Eventually we will
utilize, we would utilize the same &lt;a class="reference external" href="https://github.com/libretexts/default-env"&gt;default environment&lt;/a&gt; in our JupyterHub for our
editor. This default environment contains many packages that are commonly used
and requested by students and faculty.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="github-actions"&gt;
&lt;h3&gt;Github Actions&lt;/h3&gt;
&lt;p&gt;We made use of Github Actions to automate two important tasks. After each push
on Github, it will trigger our custom linter to ensure code quality and
consistency. Additionally, if we push any code to the master branch, it will
trigger an automatic deploy to production.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="ckeditor-capabilities"&gt;
&lt;h2&gt;CKEditor Capabilities&lt;/h2&gt;
&lt;p&gt;Currently authors publishing on the LibreTexts platform have the option to
insert executable code blocks using &lt;tt class="docutils literal"&gt;Octave&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;SageMath&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;Julia&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;R&lt;/tt&gt;,
&lt;tt class="docutils literal"&gt;Python&lt;/tt&gt;, and &lt;tt class="docutils literal"&gt;C++&lt;/tt&gt;. There is a possibility that other languages may be
added in the future. Authors can choose to either copy and paste their code
into the text editor, or directly code in the text editor as they would any
other one. To ensure that it is easy for the author as well as the reader of
the textbook to view the contents within the code block, as described in the
aforementioned section, syntax highlighting is made available via
&lt;tt class="docutils literal"&gt;CodeMirror&lt;/tt&gt; for all the languages except &lt;tt class="docutils literal"&gt;SageMath&lt;/tt&gt; which is not supported
by &lt;tt class="docutils literal"&gt;CodeMirror&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;It is important to note that we suggest authors &lt;tt class="docutils literal"&gt;run&lt;/tt&gt; the sample &lt;tt class="docutils literal"&gt;Hello
World&lt;/tt&gt; print statement first to get the kernel started, once that is
successful, code can be added in the dialog box. For &lt;tt class="docutils literal"&gt;C++&lt;/tt&gt;, if the code has
already been &lt;tt class="docutils literal"&gt;run&lt;/tt&gt;, but the author wants to make any changes, they will need
to &lt;tt class="docutils literal"&gt;restart&lt;/tt&gt; the kernel in order to avoid an &lt;tt class="docutils literal"&gt;Interpreter Error&lt;/tt&gt; as any
variables will be assigned more than once in &lt;tt class="docutils literal"&gt;Binder&lt;/tt&gt; which is not allowed in
&lt;tt class="docutils literal"&gt;C++&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;Packages and libraries can be exported as they normally would; however, if an
author finds that a specific package or library that they would like to use is
not currently available they can make a request to have it added by either
sending an &lt;a class="reference external" href="mailto:jupyterteam&amp;#64;ucdavis.edu"&gt;email to the Jupyter Team&lt;/a&gt;, linked in
the dialog box, or &lt;a class="reference external" href="https://github.com/LibreTexts/ckeditor-binder-plugin/issues"&gt;open an issue&lt;/a&gt; .&lt;/p&gt;
&lt;p&gt;Once the author is ready to insert the code block into their textbook page,
they have the option to either 'Insert with code and output,' 'Insert with code
only,' or 'Insert with output only.' Selection of any of these choices depends
on how the author intends to communicate the information provided in the code
block. If the code block has already been inserted into the page, and the
author wants to make any changes, they can simply double click on that section
and the dialog box will pop back up.&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="GIF depicting an example page made using CKEditor" src="https://objects-us-east-1.dream.io/mechmotum/example-libretexts-jupyter-page.gif" style="width: 100%;" /&gt;
&lt;p class="caption"&gt;&lt;em&gt;Figure 1: Example of what and author can do with CKEditor, and what the output will look like&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="future"&gt;
&lt;h2&gt;Future&lt;/h2&gt;
&lt;p&gt;As mentioned before, a long term goal is to use &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;default-env&lt;/span&gt;&lt;/tt&gt; for the
packages, this is the same environment that is used for the LIbreTexts-UCD
JupyterHub, and by&lt;/p&gt;
&lt;p&gt;using this, authors will have a greater selection of packages and libraries to
choose from, and it will also be easier for us to maintain. We also want to
improve the execution time of the code blocks, as currently requesting a kernel
involves downloading an image from DockerHub and creating a Docker container.&lt;/p&gt;
&lt;/div&gt;
</content><category term="education"></category><category term="oer"></category><category term="education"></category><category term="jupyter"></category><category term="textbooks"></category><category term="engineering"></category><category term="libretexts"></category></entry><entry><title>The Laboratorium is Moving to TU Delft</title><link href="https://mechmotum.github.io/blog/moving-to-tudelft.html" rel="alternate"></link><published>2020-06-10T00:00:00-07:00</published><updated>2020-06-10T00:00:00-07:00</updated><author><name>Jason K. Moore</name></author><id>tag:mechmotum.github.io,2020-06-10:/blog/moving-to-tudelft.html</id><summary type="html">&lt;p class="first last"&gt;The lab is moving to TU Delft this summer.&lt;/p&gt;
</summary><content type="html">&lt;img alt="TU Delft Logo" class="align-center" src="https://objects-us-east-1.dream.io/mechmotum/tudelft-logo.png" /&gt;
&lt;p&gt;I am pleased to announce that I have accepted a position as an Assistant
Professor in the &lt;a class="reference external" href="https://www.tudelft.nl/en/3me/about/departments/biomechanical-engineering/"&gt;Biomechanical Engineering Department&lt;/a&gt; of the &lt;a class="reference external" href="https://www.tudelft.nl/en/3me/"&gt;Mechanical,
Maritime, and Materials Engineering (3mE) Faculty&lt;/a&gt; at &lt;a class="reference external" href="https://www.tudelft.nl"&gt;Delft University of
Technology&lt;/a&gt; where I will join the Biomechatronics &amp;amp; Human-Machine Control
group. At TU Delft I will be leading a research laboratory and effort focusing
on bicycle engineering and related technologies. I will be teaching courses in
dynamics, multibody dynamics, and computational engineering to compliment this
effort and support the students in the department and faculty.&lt;/p&gt;
&lt;p&gt;So, this means that the Laboratorium for Marvelous Mechanical Motum will be
moving with me to the Netherlands. Over the next few years the lab will be
reimagined as it merges with the existing TU Delft &lt;a class="reference external" href="http://bicycle.tudelft.nl/schwab/"&gt;Bicycle Dynamics Lab&lt;/a&gt;. The
primary initial topics of research will be:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Data driven vehicle and biomechanical modeling of the bicycle-rider system&lt;/li&gt;
&lt;li&gt;Data driven manual control characterization and identification in bicycle
balance and navigation&lt;/li&gt;
&lt;li&gt;Design and augmented/autonomous control for improvements in bicycling safety
and handling&lt;/li&gt;
&lt;li&gt;Development of the next generation of bicycle designs for improvements to
transportation&lt;/li&gt;
&lt;li&gt;Application of vehicle dynamics to influence transportation infrastructure
design&lt;/li&gt;
&lt;li&gt;Performance and safety improvements in the sport of cycling&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These are described more in the &lt;a class="reference external" href="https://github.com/moorepants/application-materials/blob/gh-pages/2019/tudelft/research-statement.pdf"&gt;research statement&lt;/a&gt; I developed for my
application and presented in the slides from the job talk below:&lt;/p&gt;
&lt;iframe
src="https://docs.google.com/presentation/d/e/2PACX-1vThi6LQvvs6Xw6AFr3HJTzGPSv2EOo5r1vSBlmqEsHK6WvDMqMKVi1DVMGm9U-rRspRPU76dCX33-DZ/embed?start=false&amp;loop=false&amp;delayms=3000"
frameborder="0" width="960" height="569" allowfullscreen="true"
mozallowfullscreen="true" webkitallowfullscreen="true"&gt;&lt;/iframe&gt;&lt;p&gt;I start the new position on August 1st, 2020; so look for changes and new
announcements as I ramp up activity. I'll soon be looking for TU Delft MSc
students for various projects and will be reaching out to researchers,
companies, and organizations in Europe to develop new collaborations. Feel free
to contact me if you are interested in working with me and the new lab.&lt;/p&gt;
&lt;p&gt;I am going to miss UC Davis. I've been here for the vast majority of the last
15 years and have learned so much from the faculty, students, and colleagues.
It is a bittersweet departure, but an exciting new adventure awaits!&lt;/p&gt;
</content><category term="news"></category><category term="bicycle"></category><category term="biomechanics"></category><category term="control"></category><category term="education"></category><category term="engineering"></category><category term="sports"></category></entry><entry><title>Rowing Performance Estimation Paper Published</title><link href="https://mechmotum.github.io/blog/rowing-estimation-paper-published.html" rel="alternate"></link><published>2019-12-30T21:00:00-08:00</published><updated>2019-12-30T21:00:00-08:00</updated><author><name>Jason K. Moore</name></author><id>tag:mechmotum.github.io,2019-12-30:/blog/rowing-estimation-paper-published.html</id><summary type="html">&lt;p class="first last"&gt;Our 2019 rowing performance estimation paper is now published in Plos
One.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;We've been working on this project and paper for two years and it was finally
published in Plos One on December 5, 2019. The citation is:&lt;/p&gt;
&lt;blockquote&gt;
Cloud B, Tarien B, Liu A, Shedd T, Lin X, Hubbard M, et al. (2019) Adaptive
smartphone-based sensor fusion for estimating competitive rowing kinematic
metrics. PLoS ONE 14(12): e0225690. &lt;a class="reference external" href="https://doi.org/10.1371/journal.pone.0225690"&gt;https://doi.org/10.1371/journal.pone.0225690&lt;/a&gt;&lt;/blockquote&gt;
&lt;a class="reference external image-reference" href="https://doi.org/10.1371/journal.pone.0225690"&gt;&lt;img alt="Screenshot of the Plos One paper." class="align-center" src="https://objects-us-east-1.dream.io/mechmotum/row-plos-screenshot.png" style="width: 80%;" /&gt;&lt;/a&gt;
&lt;p&gt;The abstract reads:&lt;/p&gt;
&lt;blockquote&gt;
Competitive rowing highly values boat position and velocity data for
real-time feedback during training, racing and post-training analysis. The
ubiquity of smartphones with embedded position (GPS) and motion
(accelerometer) sensors motivates their possible use in these tasks. In this
paper, we investigate the use of two real-time digital filters to achieve
highly accurate yet reasonably priced measurements of boat speed and
distance traveled. Both filters combine acceleration and location data to
estimate boat distance and speed; the first using a complementary frequency
response-based filter technique, the second with a Kalman filter formalism
that includes adaptive, real-time estimates of effective accelerometer bias.
The estimates of distance and speed from both filters were validated and
compared with accurate reference data from a differential GPS system with
better than 1 cm precision and a 5 Hz update rate, in experiments using two
subjects (an experienced club-level rower and an elite rower) in two
different boats on a 300 m course. Compared with single channel (smartphone
GPS only) measures of distance and speed, the complementary filter improved
the accuracy and precision of boat speed, boat distance traveled, and
distance per stroke by 44%, 42%, and 73%, respectively, while the Kalman
filter improved the accuracy and precision of boat speed, boat distance
traveled, and distance per stroke by 48%, 22%, and 82%, respectively. Both
filters demonstrate promise as general purpose methods to substantially
improve estimates of important rowing performance metrics.&lt;/blockquote&gt;
&lt;p&gt;Congratulations to everyone involved in making this happen! We hope this work
helps others progress in sports performance estimation and other related
topics.&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="Rowing performance estimation project team." src="https://objects-us-east-1.dream.io/mechmotum/row-research-team.png" style="width: 80%;" /&gt;
&lt;p class="caption"&gt;Research team members Li Wang, Ada Liu, Thomas Shedd, Paul Crawford, Britt
Tarien, and Bryn Cloud&lt;/p&gt;
&lt;/div&gt;
</content><category term="papers"></category><category term="rowing"></category><category term="sports"></category><category term="engineering"></category><category term="estimation"></category><category term="kalman filter"></category></entry><entry><title>Updated Implementation of a PID Controller for Controlling The Speed of an Instrumented Ebike</title><link href="https://mechmotum.github.io/blog/ebike-controller-implementation-updated.html" rel="alternate"></link><published>2019-12-30T15:00:00-08:00</published><updated>2019-12-30T15:00:00-08:00</updated><author><name>Trevor Metz</name></author><id>tag:mechmotum.github.io,2019-12-30:/blog/ebike-controller-implementation-updated.html</id><summary type="html">&lt;p class="first last"&gt;Updated blog post on the implementation of a PID controller on an
instrumented ebike&lt;/p&gt;
</summary><content type="html">&lt;p&gt;&lt;em&gt;This is an updated version of a previous blog post on the implementation of a
PID controller on an instrumented ebike which can be&lt;/em&gt; &lt;a class="reference external" href="https://mechmotum.github.io/blog/ebike-controller-implementation.html"&gt;found here&lt;/a&gt;.
&lt;em&gt;Updates include sections 5.4-5.5 discussing the added dead man's switch and
throttle relay and minor fixes throughout.&lt;/em&gt;&lt;/p&gt;
&lt;div class="contents floatcon local topic" id="table-of-contents"&gt;
&lt;p class="topic-title"&gt;Table of Contents&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference internal" href="#introduction" id="toc-entry-1"&gt;1.0 Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#system-operation-functionality" id="toc-entry-2"&gt;2.0 System Operation &amp;amp; Functionality&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#system-architecture" id="toc-entry-3"&gt;3.0 System Architecture&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="#control-architecture" id="toc-entry-4"&gt;3.1 Control Architecture&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#physical-architecture" id="toc-entry-5"&gt;3.2 Physical Architecture&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#software" id="toc-entry-6"&gt;4.0 Software&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="#code-libraries" id="toc-entry-7"&gt;4.1 Code Libraries&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#hardware-hook-up-and-design" id="toc-entry-8"&gt;5.0 Hardware Hook Up and Design&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="#instrumented-ebike-platform" id="toc-entry-9"&gt;5.1 Instrumented Ebike Platform&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#electrical-hook-up" id="toc-entry-10"&gt;5.2 Electrical Hook Up&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#electronics-housings" id="toc-entry-11"&gt;5.3 Electronics Housings&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#dead-mans-switch" id="toc-entry-12"&gt;5.4 Dead Man’s Switch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#throttle-relay-planned" id="toc-entry-13"&gt;5.5 Throttle Relay (Planned)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#bill-of-materials" id="toc-entry-14"&gt;6.0 Bill of Materials&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#suggested-improvements" id="toc-entry-15"&gt;7.0 Suggested Improvements&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#acknowledgements" id="toc-entry-16"&gt;8.0 Acknowledgements&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="introduction"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#toc-entry-1"&gt;1.0 Introduction&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The overall goal of this project is to design and implement a cruise control
system for an instrumented ebike used for conducting bicycle handling
experiments. A previous blog post &lt;a class="reference external" href="https://mechmotum.github.io/blog/ebike-controller-design.html"&gt;(found here)&lt;/a&gt; outlines the design and analysis of a
continuous time PID controller for controlling the speed of the ebike. This
blog post tells the story of how the designed PID controller was implemented
digitally on the instrumented ebike through an Arduino Nano and how it fits
into the ebike cruise control system that was developed to make functional use
of the PID controller.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="system-operation-functionality"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#toc-entry-2"&gt;2.0 System Operation &amp;amp; Functionality&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The implementation of the cruise control system on the electric bike was
fundamentally informed by the interactions the user would have with the system.
A typical user interaction with the system is outlined in Figure 1 below.&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="User Interaction." src="https://objects-us-east-1.dream.io/mechmotum/UserInteractionFlowChart.jpg" style="width: 60%;" /&gt;
&lt;p class="caption"&gt;&lt;em&gt;Figure 1. A typical user interaction with the system.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;This user interaction flowchart was used to help better understand the problem
of implementing the cruise control system and sculpt the concepts for the
hardware and software portions of the cruise control system.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="system-architecture"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#toc-entry-3"&gt;3.0 System Architecture&lt;/a&gt;&lt;/h2&gt;
&lt;div class="section" id="control-architecture"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#toc-entry-4"&gt;3.1 Control Architecture&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The control architecture is a simple negative feedback design that computes the
error between a user defined setpoint and the actual speed of the ebike. Figure
2 graphically shows how the control architecture is implemented on the ebike.&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="Control Architecture." src="https://objects-us-east-1.dream.io/mechmotum/BlogPost2ControlArchitecture.jpg" style="width: 60%;" /&gt;
&lt;p class="caption"&gt;&lt;em&gt;Figure 2. Control architecture as implemented on the ebike.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="physical-architecture"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#toc-entry-5"&gt;3.2 Physical Architecture&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;At the heart of the cruise control system’s physical architecture is its
integration into the instrumented ebike’s powertrain. Figure 3 shows this
integration by highlighting the input/output and geometric relationships
between existing components of the ebike and the additional components needed
to implement the cruise control system.&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="System Architecture." src="https://objects-us-east-1.dream.io/mechmotum/ControlSystemGeometricLayout.jpg" style="width: 75%;" /&gt;
&lt;p class="caption"&gt;&lt;em&gt;Figure 3. Geometric layout of the system components showing relative size,
location, information flow, and type of each component. Components called
out with a triangle are existing components on the ebike. Components called
out with a circle are components that are introduced to the ebike system to
implement the cruise control.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;The fundamental interaction between the control system and the existing ebike
powertrain system occurs at the interface between the Arduino nano and the
ebike motor controller. While the cruise control is engaged, the function of
the Arduino is to take control of the throttle signal away from the user by
passing the calculated output of the control loop to the motor controller
instead of the throttle position commanded by the rider. When the cruise
control is disengaged, the Arduino simply reads the user commanded throttle
position and passes it directly to the motor controller. Figure 4, below,
graphically shows this interaction.&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="Arduino's Main Function." src="https://objects-us-east-1.dream.io/mechmotum/ArduinoThrottleSchematic.jpg" style="width: 40%;" /&gt;
&lt;p class="caption"&gt;&lt;em&gt;Figure 4. Schematic showing the Arduino’s function as a throttle emulator.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;em&gt;Note: Testing of the cruise control system has shown the implementation method
shown in Figure 4 to be inadequate while the cruise control is disengaged. The
time required for the Arduino to read and then write the signal it receives
from the throttle leads to unresponsive manual speed control while the cruise
control is disengaged. A fix to this issue is proposed in section 5.5 of this
blog post.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="software"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#toc-entry-6"&gt;4.0 Software&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The cruise control system software was written in C using the Arduino IDE.
Based on user inputs from two momentary pushbuttons, the software decides
whether or not to pass the throttle signal as an output or compute a throttle
output based on the PID controller. The software also updates the user on the
current status of the system via an LCD and logs diagnostic information to an
SD card.&lt;/p&gt;
&lt;p&gt;Figure 5, below, shows a high level view of the logic flow of the code.&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="Code Logic Flowchart." src="https://objects-us-east-1.dream.io/mechmotum/ControlSystemCodeLogicFlowChart.jpg" style="width: 100%;" /&gt;
&lt;p class="caption"&gt;&lt;em&gt;Figure 5. Basic logic flowchart of the cruise control software.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Source code, and more details about it, can be found on the Laboratorium’s
Github repository &lt;a class="reference external" href="https://github.com/mechmotum/eBikeSpdController"&gt;found here&lt;/a&gt;.&lt;/p&gt;
&lt;div class="section" id="code-libraries"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#toc-entry-7"&gt;4.1 Code Libraries&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The continuous time PID controller derived in part one of this blog post series
was digitized on the Arduino Nano using Brett Beauregard’s PID_v1 library
&lt;a class="reference external" href="https://github.com/br3ttb/Arduino-PID-Library"&gt;(found here)&lt;/a&gt;. This library
was developed by Brett to implement continuous time PID controllers on Arduino
microcontrollers.&lt;/p&gt;
&lt;p&gt;Brett’s library was chosen to implement the PID controller because of its many
robust features such as Derivative Kick and Initialization. Additionally, this
library contains fantastic documentation which can be &lt;a class="reference external" href="http://brettbeauregard.com/blog/2011/04/improving-the-beginners-pid-introduction/"&gt;found here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To avoid slowing the code’s main loop, interrupts were used to manage the
change in setpoint brought on by a press of the speed increment decrement
buttons. Using interrupts free’s up the Arduino’s processor from having to
check whether or not there’s been a button press on every loop iteration.
Instead, the processor reacts to pin changes and interrupts the execution of
the main code to perform the function tied to the interrupt pin. However, the
Arduino Nano only has a limited number of pins that can be used as interrupts.
A library, written by GreyGnome &lt;a class="reference external" href="https://github.com/GreyGnome/PinChangeInt"&gt;(found here)&lt;/a&gt;, enables the use of interrupts
on any pin of the Arduino Nano. This library was used to free up pin real
estate for the many components that are wired up to the Arduino.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="hardware-hook-up-and-design"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#toc-entry-8"&gt;5.0 Hardware Hook Up and Design&lt;/a&gt;&lt;/h2&gt;
&lt;div class="section" id="instrumented-ebike-platform"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#toc-entry-9"&gt;5.1 Instrumented Ebike Platform&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Jason Moore, the lab’s PI, originally began constructing the instrumented ebike
platform in 2009 from a large Surly single speed off road steel frame bicycle
converted to an ebike with a conversion kit sold by Amped Bikes. The Amped
Bikes kit consists of a brushless direct drive hub motor driven by a motor
controller and powered by a 36V Li ion battery. More information on the build
and the bike’s instrumentation system can be found in Jason’s dissertation
&lt;a class="reference external" href="http://moorepants.github.io/dissertation/davisbicycle.html"&gt;found here&lt;/a&gt;.&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="Instrumented Ebike." src="https://objects-us-east-1.dream.io/mechmotum/TheInstrumentedEbike.JPG" style="width: 45%;" /&gt;
&lt;p class="caption"&gt;&lt;em&gt;Figure 6. The instrumented ebike today.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="electrical-hook-up"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#toc-entry-10"&gt;5.2 Electrical Hook Up&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The electrical components of the control system revolve around an Arduino Nano
which is the central processor for the hardware and logic of the cruise control
system. Table 1, below, shows a complete list of the hardware used in this
build.&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;caption&gt;&lt;em&gt;Table 1. Table of components used in the control system. Prices and sources for each component can be found in the Bill of Materials in section 6.0.&lt;/em&gt;&lt;/caption&gt;
&lt;colgroup&gt;
&lt;col width="40%" /&gt;
&lt;col width="40%" /&gt;
&lt;col width="20%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;Component Name&lt;/th&gt;
&lt;th class="head"&gt;Details&lt;/th&gt;
&lt;th class="head"&gt;Function&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;Arduino Nano&lt;/td&gt;
&lt;td&gt;ATmega328P Processor&lt;/td&gt;
&lt;td&gt;Main   Processor&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Wheel Speed Sensor&lt;/td&gt;
&lt;td&gt;DC generator in contact with rear tire &lt;a class="reference external" href="http://moorepants.github.io/dissertation/davisbicycle.html"&gt;(Click here for more information)&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Control Loop Input&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Voltage Divider&lt;/td&gt;
&lt;td&gt;Used to step down wheel speed sensor voltage to a range measurable by the Arduino&lt;/td&gt;
&lt;td&gt;Wheel Speed Sensor Signal Conditioning&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Pushbuttons&lt;/td&gt;
&lt;td&gt;Momentary pushbuttons to get user input&lt;/td&gt;
&lt;td&gt;User Input&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Battery&lt;/td&gt;
&lt;td&gt;7.2V NiCd&lt;/td&gt;
&lt;td&gt;System Power&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;LCD&lt;/td&gt;
&lt;td&gt;16x2 character LCD&lt;/td&gt;
&lt;td&gt;User Feedback&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Motor Controller&lt;/td&gt;
&lt;td&gt;Amped Bikes motor controller&lt;/td&gt;
&lt;td&gt;Control Loop Output&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;SD Card Module&lt;/td&gt;
&lt;td&gt;SPI SD card module for Arduino&lt;/td&gt;
&lt;td&gt;Data Logging&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;The Arduino Nano and the voltage divider circuits were soldered to a small 3&amp;quot; x
1&amp;quot; piece of protoboard. Wires (22 AWG) were soldered to the protoboard to
connect the external components to the Nano. Figure 7 shows the completed
Arduino board.&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="Arduino Board." src="https://objects-us-east-1.dream.io/mechmotum/ArduinoBoardWiredUp.JPG" style="width: 60%;" /&gt;
&lt;p class="caption"&gt;&lt;em&gt;Figure 7. The Arduino board with wires attached.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;With many of the components located on the handlebars, a majority of these
wires were routed together along the top tube, up the head tube and stretched
across to the handlebars. This task was facilitated using spiral wound cable
housings, zip ties, and a 15 pin Molex connector. Once on the handlebars, wires
were connected to header pins on the LCD and pushbuttons with Dupont
connectors.&lt;/p&gt;
&lt;p&gt;T-tap wire splices were used to cleanly splice power signals from the NiCd
battery above the Arduino near the top tube and from the wheel speed sensor
near the bottom bracket.&lt;/p&gt;
&lt;p&gt;A complete wiring schematic of the cruise control system can be found on the
laboratorium’s github &lt;a class="reference external" href="https://github.com/mechmotum/eBikeSpdController"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="electronics-housings"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#toc-entry-11"&gt;5.3 Electronics Housings&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Housings for the Arduino Nano, pushbuttons and LCD were designed and 3D printed
to enclose the electrical components and mount them to the ebike. Figure 8
shows the CAD model design of the Arduino housing. The housing’s design
includes pins for press fitting the Arduino stripboard to the mount. Slots on
the sides and top of the housing allow for wires to exit towards their
destinations on the ebike. Threaded inserts on the base are used to secure the
top cover using M3 screws.&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="Arduino Housing." src="https://objects-us-east-1.dream.io/mechmotum/ArduinoHousingDesign.jpg" style="width: 100%;" /&gt;
&lt;p class="caption"&gt;&lt;em&gt;Figure 8. Arduino housing design.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;The Arduino housing is clamped to the downtube of the ebike by a socket head
screw as shown in Figure 9.&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="Arduino Mounting." src="https://objects-us-east-1.dream.io/mechmotum/ArduinoHousingMountingPoints.JPG" style="width: 80%;" /&gt;
&lt;p class="caption"&gt;&lt;em&gt;Figure 9. Arduino housing mounting point.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Both the LCD and button housings were 3D printed and designed to mount to the
handlebars using a clamshell style mount used for securing GoPro cameras to
bikes. Each mount had a pair of “bunny ears&amp;quot; designed to interface with the
GoPro style mount. The LCD housing, shown in Figure 10 below, is a simple
rectangular two-piece enclosure joined by button head screws.&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="LCD Housing." src="https://objects-us-east-1.dream.io/mechmotum/LCDHousingDesign.jpg" style="width: 75%;" /&gt;
&lt;p class="caption"&gt;&lt;em&gt;Figure 10. LCD housing design.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Similar to the LCD housing, the button housing is a two-piece, enclosure joined
by screws. Inside the housing is a small piece of protoboard that the
pushbuttons are soldered to. To make pressing the mini momentary pushbuttons
more convenient for the user, larger button parts were 3D printed and offset
from each mini momentary pushbutton using a compression spring as shown in
Figure 11 below.&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="Button Housing." src="https://objects-us-east-1.dream.io/mechmotum/ButtonHousingDesign.jpg" style="width: 100%;" /&gt;
&lt;p class="caption"&gt;&lt;em&gt;Figure 11. Button housing design.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;As shown in Figure 12, the button housing is mounted on the right side of the
handlebars near the throttle and brake lever for convenient access.&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="Button Housing Mount." src="https://objects-us-east-1.dream.io/mechmotum/ButtonHousingPosition.JPG" style="width: 80%;" /&gt;
&lt;p class="caption"&gt;&lt;em&gt;Figure 12. Button housing position on the handlebars.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="dead-mans-switch"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#toc-entry-12"&gt;5.4 Dead Man’s Switch&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;For safety reasons, a dead man’s switch was added to the cruise control system.
The dead man’s switch works by cutting power from the Li+ battery through a
mechanical relay. The relay’s coil is connected to a power circuit having a
Reed switch. The Reed switch is actuated by a magnet strapped to the rider’s
ankle. If the rider were to remove their ankle from the foot peg, separating
the ankle magnet from the Reed switch, power to relay’s coil would be
interrupted, opening the Li+ battery circuit. Sheet five of the master
electrical schematic shows how the switch is wired up to the ebike’s
powertrain.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="throttle-relay-planned"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#toc-entry-13"&gt;5.5 Throttle Relay (Planned)&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Currently, when cruise control is disengaged, the time it takes the Arduino to
read the throttle signal and then write it to the motor controller is leading
to a jerky ride. This is likely due to the intermittency in the throttle signal
output to the motor controller produced by the delay in reading and writing the
throttle signal through the Arduino. Placing a relay in line with the throttle
signal will provide a continuous signal flow to the motor controller by
eliminating the need to read and then write that signal when it passes through
the Arduino. A continuous signal flow will eliminate the intermittency issues
that make the bike feel jerky when the cruise control is disengaged.&lt;/p&gt;
&lt;p&gt;Current plans for the relay have it placed inline with the throttle signal wire
and switched by the Arduino through its digital write function. The proposed
changes to the wiring schematic and software can be found on the project’s
Github repository under the “relay” branch. Plans for the physical
implementation of the relay include placing the relay on a piece of protoboard
mounted to the bike’s top tube,inside the upper head tube triangle.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="bill-of-materials"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#toc-entry-14"&gt;6.0 Bill of Materials&lt;/a&gt;&lt;/h2&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="Bill of Materials." src="https://objects-us-east-1.dream.io/mechmotum/ControlSystemBillofMaterials.jpg" style="width: 100%;" /&gt;
&lt;p class="caption"&gt;&lt;em&gt;Table 2. Bill of materials (BOM) showing each part of project, where it was
purchased, what quantity was purchased and its cost.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="suggested-improvements"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#toc-entry-15"&gt;7.0 Suggested Improvements&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Throughout the implementation of this design, I've made note of some
improvements to the system's hardware design that could be made to address
known issues. I have listed these below:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Use a display that communicates via the SPI protocol to reduce the number of
wires used&lt;/li&gt;
&lt;li&gt;For the Arduino board, use a custom PCB and connectors to increase the
robustness of the board&lt;/li&gt;
&lt;li&gt;Implement a throttle relay (See section 5.5)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here are some avenues for improving the accuracy and precision of the cruise
control:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Set a faster sampling time in the PID Arduino library&lt;/li&gt;
&lt;li&gt;Replace DC generator wheel speed sensor with a rotary encoder for smoother
speed input (and preservation of the rear tire)&lt;/li&gt;
&lt;li&gt;Experiment with manual PID parameter tuning during outdoor testing to improve
output surging while cruise control is engaged&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="acknowledgements"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#toc-entry-16"&gt;8.0 Acknowledgements&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I would like to thank &lt;a class="reference external" href="https://github.com/ngchan"&gt;Nicholas Chan&lt;/a&gt; for writing
the camera gimbal software that my speed control software is based off of. I’d
also like to thank &lt;a class="reference external" href="https://github.com/br3ttb"&gt;Brett Beuaregard&lt;/a&gt; for writing
the PID library and it’s excellent documentation that is the heart of the speed
control software. Finally, I’d like to thank Jason Moore for his support and
mentorship throughout this project.&lt;/p&gt;
&lt;/div&gt;
</content><category term="research"></category><category term="bicycle"></category><category term="engineering"></category><category term="controller implementation"></category><category term="arduino"></category></entry><entry><title>Slidedeck From Our Recent SacPy Talk</title><link href="https://mechmotum.github.io/blog/sacpy-slideck-2019.html" rel="alternate"></link><published>2019-11-17T00:00:00-08:00</published><updated>2019-11-17T00:00:00-08:00</updated><author><name>Jason K. Moore</name></author><id>tag:mechmotum.github.io,2019-11-17:/blog/sacpy-slideck-2019.html</id><summary type="html">&lt;p class="first last"&gt;Our slides from our November SacPy talk.&lt;/p&gt;
</summary><content type="html">&lt;iframe
src="https://docs.google.com/presentation/d/e/2PACX-1vQpprGVUh86uBUcpdQO-BD9-HQc0zit0vhf2O3z8Izs4aeYKcb8FxSX8gc43CeVM0-x_5JhIj03vRM0/embed?start=false&amp;loop=false&amp;delayms=3000"
frameborder="0" width="960" height="569" allowfullscreen="true"
mozallowfullscreen="true" webkitallowfullscreen="true"&gt;&lt;/iframe&gt;&lt;div class="figure align-center"&gt;
&lt;img alt="Celine presenting at SacPy." src="https://objects-us-east-1.dream.io/mechmotum/celine-sacpy.jpg" style="width: 800px;" /&gt;
&lt;p class="caption"&gt;Celine presenting at SacPy.&lt;/p&gt;
&lt;/div&gt;
</content><category term="education"></category><category term="oer"></category><category term="education"></category><category term="jupyter"></category><category term="textbooks"></category><category term="engineering"></category><category term="python"></category></entry><entry><title>Creating a Kubernetes Bare-Metal Cluster for JupyterHub</title><link href="https://mechmotum.github.io/blog/jupyter-summer-2019.html" rel="alternate"></link><published>2019-11-01T00:00:00-07:00</published><updated>2019-11-01T00:00:00-07:00</updated><author><name>Xin Luigi Chen</name></author><id>tag:mechmotum.github.io,2019-11-01:/blog/jupyter-summer-2019.html</id><summary type="html">&lt;p class="first last"&gt;Blog post on setting up JupyterHub on a Kubernetes bare-metal cluster&lt;/p&gt;
</summary><content type="html">&lt;div class="section" id="background"&gt;
&lt;h2&gt;Background&lt;/h2&gt;
&lt;p&gt;During the spring quarter and summer sessions, we focused on creating a
Kubernetes bare-metal cluster to deploy JupyterHub, BinderHub, and other
services.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="virtual-machine-cluster"&gt;
&lt;h2&gt;Virtual Machine Cluster&lt;/h2&gt;
&lt;p&gt;During spring quarter, Kevin and Celine worked on creating the bare metal
Kubernetes cluster. We first created a cluster of virtual machines (VMs) A
Linux test server served as the master node and host machine, while virtual
machines served as the child nodes. We used Vagrant to create these child nodes
and Ansible to provision them.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/LibreTexts/metalc/tree/master/dev-env"&gt;This folder in our main repository&lt;/a&gt; contains
instructions for setting up this development environment.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="bare-metal-cluster"&gt;
&lt;h2&gt;Bare-Metal Cluster&lt;/h2&gt;
&lt;p&gt;Our original bare-metal cluster consists of one master node named chick0 and 11
children named chick1 through chick10 sequentially. It also contains a
management node called rooster, which acts as a DHCP server, a TFTP server for
NetBoot and a proxy between the Internet and the Kubernetes cluster. The
Kubernetes cluster is under a private network, so the only way to access the
Kubernetes cluster is by connecting through rooster.&lt;/p&gt;
&lt;p&gt;The following diagram describes our networking setup.&lt;/p&gt;
&lt;img alt="Kubernetes diagram of cluster" src="https://objects-us-east-1.dream.io/mechmotum/kubediagram.png" style="width: 600px;" /&gt;
&lt;p&gt;The private network is under the &lt;tt class="docutils literal"&gt;10.0.0.0/8&lt;/tt&gt;. Kubernetes uses this network
for its resources to communicate.  Rooster has a public IP address of
&lt;tt class="docutils literal"&gt;128.120.136.26&lt;/tt&gt;, which serves multiple services based on the domain name
entered by the user.&lt;/p&gt;
&lt;p&gt;All servers are connected to a smart switch. The ZFS server is also connected
to the switch and provides persistent storage of JupyterHub users' files.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://wiki.debian.org/PXEBootInstall#Preface"&gt;PXEBoot&lt;/a&gt; used a preseed
file and a DHCP server to install Ubuntu Server 18.04 on the servers more
efficiently. Each new server pulls the preseed and installation files via a
TFTP server set up on rooster.&lt;/p&gt;
&lt;p&gt;As done in the development environment, the nodes were provisioned using
&lt;a class="reference external" href="https://github.com/LibreTexts/metalc/tree/master/ansible/playbooks"&gt;Ansible scripts&lt;/a&gt;.
Unlike the development environment, the bare-metal cluster &lt;a class="reference external" href="https://medium.com/&amp;#64;jain.sm/flannel-vs-calico-a-battle-of-l2-vs-l3-based-networking-5a30cd0a3ebd"&gt;uses Calico instead
of Flannel&lt;/a&gt;
for pod networking. This was chosen because Calico doesn't require software
bridges or IP tunneling like Flannel does. When communicating from pod to pod,
Flannel requires the pod's IP to be &amp;quot;packaged&amp;quot; in another IP (IP tunneling) to
send to the other pod. Calico, on the other hand, uses BGP protocol and
conserves the original pod IP.&lt;/p&gt;
&lt;p&gt;When we first setup our bare-metal cluster, we used rooster for our storage
needs by running a NFS server on it. Once we started getting ready for
production, we decided that we needed a more robust and redundant option for
our storage needs. With that in mind, we met with Mike and Dean, folks from the
Bioinformatics Core at the Genome Center here at UC Davis, to discuss the best
storage setup for our needs. After a couple of meetings, we came to the
conclusion that a ZFS setup would make the most sense, this decision was
reached mostly because of factors such as hardware already available and the
experience on ZFS that Dean and Mike brought to the table.&lt;/p&gt;
&lt;p&gt;Thanks to a retired ZFS server called the 'Hyperserver', we didn't have to
spend time and money ordering parts for our design. The 'Hyperserver' was quite
fitting of its name as it was a behemoth compared to the other nodes that we
were used to working with. The 'Hyperserver' was a 4U rack with enough slots in
the front to fit 24 drives, and 12 additional slots in the back for more. With
the help of Mike and Dean, we updated the firmware on the motherboard, drives,
and IPMI controller before we installed 24 storage drives in the front, and 2
RAID1 OS drives, 2 zil caches and 2 hot spares in the back. We used 4 stripes
of 6 drives each with raidz2 for our data storage drives, the goal was to
maximize speed and redundancy.  With raidz2, each stripe could lose a maximum
of 2 disks at once and the ZFS would still work. We then hooked up the ZFS to
our smart-switch where the Kubernetes network lives.  We made use of the
10Gib/s intel network card with a short range transceiver and 10M copper wire.
After we finished setting the ZFS server up, we renamed it to 'hen' to go along
with our naming theme for our cluster. Anyone can check out our extensive
&lt;a class="reference external" href="https://github.com/LibreTexts/metalc/blob/master/docs/Bare-Metal/ZFS.md"&gt;documentation&lt;/a&gt;
for more information regarding how we setup our ZFS.&lt;/p&gt;
&lt;p&gt;For security, we mainly followed the guide, &lt;a class="reference external" href="https://github.com/imthenachoman/How-To-Secure-A-Linux-Server"&gt;How to Secure a Linux Server&lt;/a&gt; written by
GitHub user &lt;a class="reference external" href="https://github.com/imthenachoman"&gt;iamthenachoman&lt;/a&gt;. Using the
guide, we implemented SSHing into rooster using only an SSH public/private key
pair, cleaned up short keys and UFW rules, and added intrusion detection for
iptables, SSH, and rootkits. You could find more information on our security
implementation in &lt;a class="reference external" href="https://github.com/LibreTexts/metalc/blob/master/docs/Bare-Metal/baremetal.md#securing-the-cluster"&gt;this section&lt;/a&gt;
of our documentation.&lt;/p&gt;
&lt;p&gt;Later, we added more chicks and upgraded the RAM of almost all chicks. We
increased the number of worker nodes from 10 to 18, and upgraded the RAM on
most chicks from 16GB to 64GB. These efforts prepared the cluster for handling
new classes in the fall quarter.&lt;/p&gt;
&lt;p&gt;Our &lt;a class="reference external" href="https://github.com/LibreTexts/metalc/blob/master/docs/Bare-Metal/baremetal.md"&gt;documentation&lt;/a&gt;
details our setup further and describes the actions taken to build the cluster
from scratch.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="customizing-jupyterhub"&gt;
&lt;h2&gt;Customizing JupyterHub&lt;/h2&gt;
&lt;p&gt;We made many modifications to JupyterHub, including redesigning the website,
adding new default environments, and more.&lt;/p&gt;
&lt;p&gt;JupyterHub pages is customizable using the &lt;a class="reference external" href="https://jinja.palletsprojects.com/en/2.10.x/templates/"&gt;Jinja2 templating system&lt;/a&gt; .  There are two
ways to add custom HTML files to JupyterHub (as described in &lt;a class="reference external" href="https://discourse.jupyter.org/t/customizing-jupyterhub-on-kubernetes/1769"&gt;this Discourse
post&lt;/a&gt;):&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Through &lt;a class="reference external" href="https://kubernetes.io/docs/concepts/workloads/pods/init-containers/"&gt;InitContainers&lt;/a&gt; that
pull repositories of template files before the hub starts,&lt;/li&gt;
&lt;li&gt;Or through mounting &lt;a class="reference external" href="https://kubernetes.io/docs/tasks/configure-pod-container/configure-pod-configmap/"&gt;ConfigMaps&lt;/a&gt;
to the template file directory.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We chose the former option and have repositories for &lt;a class="reference external" href="https://github.com/LibreTexts/jupyterhub-templates"&gt;custom HTML files&lt;/a&gt; and &lt;a class="reference external" href="https://github.com/LibreTexts/jupyterhub-images"&gt;additional images&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This is a screenshot of how the login page looks now.&lt;/p&gt;
&lt;img alt="Screenshot of the redesigned JupyterHub login page" src="https://objects-us-east-1.dream.io/mechmotum/jupyterhubscreenshot.png" style="width: 600px;" /&gt;
&lt;p&gt;Additionally, more spawner options are included. We modified the default
environment to include many packages requested by professors and students. The
Dockerfile for the default environment is maintained in &lt;a class="reference external" href="https://github.com/LibreTexts/default-env"&gt;this repository&lt;/a&gt;.  The environment includes
Python 2 and 3, Octave, R, Julia, and SageMath.  The default environment mainly
installs software and packages via apt and conda for security reasons.&lt;/p&gt;
&lt;img alt="Screenshot of the redesigned JupyterHub spawner page" src="https://objects-us-east-1.dream.io/mechmotum/jupyterhubspawner.png" style="width: 600px;" /&gt;
&lt;p&gt;The default environment includes Python 2 and 3, Octave, R, Julia, and
SageMath.  Note that SageMath requires Python 2, so changing the Python path
inside the SageMath configuration files is required. &lt;a class="reference external" href="https://bytesofcomputerwisdom.home.blog/2019/03/31/jupyter-notebook-running-the-wrong-python-version/"&gt;This article&lt;/a&gt;
contains more information on how this was accomplished. This fix is automated
in the Dockerfile.&lt;/p&gt;
&lt;p&gt;RStudio is also offered alongside JupyterLab, since deploying web applications
using packages such as &lt;tt class="docutils literal"&gt;shiny&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;shiny-dashboard&lt;/span&gt;&lt;/tt&gt; require RStudio and do
not run in Jupyter Notebooks.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="interesting-nuggets"&gt;
&lt;h2&gt;Interesting Nuggets&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Our Nginx server serves as a proxy to direct packets from public ips to ips
that metallb assigns to services on our cluster. When we setup HTTPS for
JupyterHub, Nginx started complaing as it would try to decrypt the traffic
meant for JupyterHub. We solved the problem by using the stream block, which
streams packet to the backend without trying to decrypt anything.&lt;/li&gt;
&lt;li&gt;A service on the cluster can be connected to a ingress controller(for example
Nginx) to make it accessible from outside the cluster. The ingress controller
is not to be confused with the Nginx proxy that we have running outside the
cluster, an ingress controller is a service running on Kubernetes that allows
host or URL based HTTP routing from outside the cluster to services on the
cluster.&lt;/li&gt;
&lt;li&gt;cert-manager is a very useful helm chart that can be deployed on Kubernetes
to automatically manage and issue TLS certificates from various issuing
sources. This alongside an ingress controller like Nginx can be a very useful
setup.&lt;/li&gt;
&lt;li&gt;Grafana and Prometheus is a good solution for setting up basic monitoring and
alerting on a Kubernetes cluster. They currently have a bug that erases all
the saved data when the Grafana pod is deleted for some reason. A workaround
is to save the json of the dashboards.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="future"&gt;
&lt;h2&gt;Future&lt;/h2&gt;
&lt;p&gt;In the future, we plan to create another cluster including, but not limited, to
the following:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Having multiple master nodes and using two HAproxy servers instead of a
single Nginx server to avoid single points of failure.&lt;/li&gt;
&lt;li&gt;Assigning GPU's to different users.&lt;/li&gt;
&lt;li&gt;Assigning different networks based on organization.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="education"></category><category term="oer"></category><category term="education"></category><category term="jupyter"></category><category term="textbooks"></category><category term="engineering"></category><category term="libretexts"></category></entry><entry><title>Electric Bicycle Speed Controller Presented at the 2019 Bicycle and Motorcycle Dynamics Conference</title><link href="https://mechmotum.github.io/blog/ebike-controller-bmd-presentation.html" rel="alternate"></link><published>2019-10-03T00:00:00-07:00</published><updated>2019-10-03T00:00:00-07:00</updated><author><name>Trevor Metz</name></author><id>tag:mechmotum.github.io,2019-10-03:/blog/ebike-controller-bmd-presentation.html</id><summary type="html">&lt;p class="first last"&gt;Sharing the presentation of the speed controller project at the 2019
Bicycle and Motorcycle Dynamics Conference.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;From September 9th to the 11th, the design and implementation of the electric
bicycle speed controller project was presented in a poster exhibition hall
during the 2019 Bicycle and Motorcycle Dynamics Conference held in Padova,
Italy.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://doi.org/10.6084/m9.figshare.9883154.v1"&gt;Download the poster&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://doi.org/10.6084/m9.figshare.9937091.v1"&gt;Download the paper&lt;/a&gt;.&lt;/p&gt;
</content><category term="conferences"></category><category term="controls"></category><category term="BMD2019"></category><category term="engineering"></category></entry><entry><title>Practical Realization of a Theoretical Optimal-Handling Bicycle Results</title><link href="https://mechmotum.github.io/blog/practical-realization-of-a-theoretical-optimal-handling-bicycle-results.html" rel="alternate"></link><published>2019-10-03T00:00:00-07:00</published><updated>2019-10-03T00:00:00-07:00</updated><author><name>Anthony Toribio</name></author><id>tag:mechmotum.github.io,2019-10-03:/blog/practical-realization-of-a-theoretical-optimal-handling-bicycle-results.html</id><summary type="html">&lt;p class="first last"&gt;Blog post on the design and fabrication of a theoretically optimal
handling bicycle&lt;/p&gt;
</summary><content type="html">&lt;p&gt;The goal of this research is to design and fabricate a theoretically optimal
lateral handling bicycle based on a dynamics based algorithm written by
Professor Moore. Lateral handling is quantified using the Handling Quality
Metric (HQM) where lower peak values indicate better handling. This
optimization algorithm takes into account physical bicycle properties including
geometry, mass, moments of inertia and speed. In particular, the geometry
defining the bicycle's trail, wheelbase, steer axis tilt, and front wheel
radius are optimized for the target speed.&lt;/p&gt;
&lt;p&gt;Our measure of lateral handling difficulty is the theoretical handling quality
metric (HQM). HQM is a function of frequency and quantifies the human control
effort needed to stabilize and direct a given bicycle based on quantifying the
rider's roll rate sensing activity. We then followed an iterative design
process to develop physically realizable wheels, frame, and fork that will
produce parameter values as close as possible to the target optimal parameter
values. We then fabricated and test rode the resulting bicycle.&lt;/p&gt;
&lt;p&gt;A theoretical target bicycle design has been found using the algorithm at a
speed of 3m/s with an HQM of 1.2 as compared to a standard bicycle's HQM of 7.8
at the same speed. Once a realizable model was created in CAD, the HQM was seen
to rise from 1.2 to 2.45. This value far surpasses the standard bicycle.
However, the fabrication of the design proved to be rather challenging. Issues
were encountered with tolerances and therefore error propagation as well as
issues with deflection under loading. These issues in combination created a
fabricated bicycle dissimilar to the original model. The fabricated bicycle
yielded an HQM with close-loop instability meaning that the handling could not
be evaluated using the algorithm.&lt;/p&gt;
&lt;p&gt;The bicycle was test ridden by Stasia and determined to have characteristics
described as &amp;quot;stable and effortless to ride when the intent is not to steer in
a particular direction&amp;quot;. Riding the bicycle felt &amp;quot;stable, as if you are sitting
in a cart&amp;quot;. Even though the bicycle is unstable in the algorithm, a real rider
can control it. For more information on the current status of this research,
please see the attached paper and media below. Future work on this research
will be to evaluate the handling of the bicycle both subjectively and
objectively.&lt;/p&gt;
&lt;p&gt;Paper: &lt;a class="reference external" href="https://doi.org/10.6084/m9.figshare.9883328.v1"&gt;https://doi.org/10.6084/m9.figshare.9883328.v1&lt;/a&gt;&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="3ms Fabricated." src="https://objects-us-east-1.dream.io/mechmotum/3ms-fabricated.jpg" style="width: 50%;" /&gt;
&lt;p class="caption"&gt;&lt;em&gt;Figure 1. Fabricated model of optimal bicycle for 3 m/s.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="3ms Fabricated Rider." src="https://objects-us-east-1.dream.io/mechmotum/3ms-fabricated-rider.jpg" style="width: 50%;" /&gt;
&lt;p class="caption"&gt;&lt;em&gt;Figure 2. Fabricated model of optimal bicycle for 3 m/s with rider.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;iframe width="560" height="315"
src="https://www.youtube.com/embed/oDPssZu9Uso" frameborder="0"
allow="accelerometer; autoplay; encrypted-media; gyroscope;
picture-in-picture" allowfullscreen&gt;&lt;/iframe&gt;</content><category term="research"></category><category term="bicycle"></category><category term="design"></category><category term="handling qualities"></category><category term="control"></category><category term="optimization"></category><category term="fabrication"></category></entry><entry><title>Creating Linux Servers for JupyterHub</title><link href="https://mechmotum.github.io/blog/jupyter-winter-2019.html" rel="alternate"></link><published>2019-05-03T00:00:00-07:00</published><updated>2019-05-03T00:00:00-07:00</updated><author><name>Celine Liang</name></author><id>tag:mechmotum.github.io,2019-05-03:/blog/jupyter-winter-2019.html</id><summary type="html">&lt;p class="first last"&gt;Blog post on setting up JupyterHub for a future computing cluster&lt;/p&gt;
</summary><content type="html">&lt;div class="section" id="background"&gt;
&lt;h2&gt;Background&lt;/h2&gt;
&lt;p&gt;As part of the &lt;a class="reference external" href="libretexts-grant.rst"&gt;$5M grant&lt;/a&gt; awarded to the LibreTexts
project last year, our team had two goals: to integrate Jupyter into the
LibreTexts website and to create a computing cluster running JupyterHub to
serve LibreTexts and UC Davis users. This quarter, we focused on researching
how to create the cluster through building test servers.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="virtual-machine-environment"&gt;
&lt;h2&gt;Virtual Machine Environment&lt;/h2&gt;
&lt;p&gt;The first step in our journey to building a cluster was to familiarize
ourselves with how to setup a single server. It was crucial for us to really
understand all the details on how to setup a single server, as we would need
the knowledge to setup each and every single node in the cluster. We decided to
use VirtualBox as our starting playground so we had an easily disposable
environments to learn from.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="raid1-and-lvm"&gt;
&lt;h2&gt;RAID1 and LVM&lt;/h2&gt;
&lt;p&gt;We started adding more features to the installations that we would eventually
use in our cluster configuration. We started by adding a software RAID1 to our
installations to familiarize ourselves with the process, and then we moved on
to adding LVM too.&lt;/p&gt;
&lt;p&gt;Redundant Array of Independent Disks, also known as RAID, provides multiple
ways of orchestrating and synchronizing multiple hard drives in a computer
network to establish reliable data storage within the network. We decided to
use RAID1, which consists of an exact copy of a set of data on two or more
disks. We chose RAID1 because it allows us to switch a drive while the server
is live, in case a drive fails.&lt;/p&gt;
&lt;p&gt;Logical Volume Manager, also known as LVM, is a device mapper target that
provides logical volume management for the Linux kernel. The benefits of using
LVM is the ability to use and manage &amp;quot;dynamic partitions&amp;quot;. When using LVM
&amp;quot;partitions&amp;quot;, known just as logical volumes, we can manage them very easily
through the command line if we wanted to either create additional partitions,
or resize/delete any existing partitions.&lt;/p&gt;
&lt;p&gt;While installing Ubuntu Live Server 18.04 with RAID1, we ran into an issue
where the server failed to start. According to the &lt;a class="reference external" href="https://wiki.ubuntu.com/BionicBeaver/ReleaseNotes#Server_installer"&gt;Ubuntu 18.04.02 Release
Notes&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The next generation Subiquity server installer, brings the comfortable live
session and speedy install of Ubuntu Desktop to server users at last.&lt;/p&gt;
&lt;p&gt;N.B., If you require multipath, full-disk encryption, or the ability to
re-using existing partitions, you will want to continue to use the alternate
installer which can be downloaded from
&lt;a class="reference external" href="http://cdimage.ubuntu.com/releases/18.04/release/"&gt;http://cdimage.ubuntu.com/releases/18.04/release/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;As of 18.04.1, the Subiquity server installer now supports LVM, RAID, vlans,
and bonds.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;After some researching, we learned however that &lt;a class="reference external" href="https://bugs.launchpad.net/subiquity/+bug/1785332"&gt;a bug&lt;/a&gt; from the Ubuntu Live
Server image caused the installer to fail to mount the boot partition,
preventing the installation of Ubuntu on RAID1. We instead used this &lt;a class="reference external" href="http://cdimage.ubuntu.com/releases/18.04.2/release/ubuntu-18.04.2-server-amd64.iso"&gt;alternate
installer (non-live server image file)&lt;/a&gt;
to successfully install Ubuntu Server 18.04 with RAID1 on the virtual machines.&lt;/p&gt;
&lt;p&gt;When installing Ubuntu Server with RAID1 and LVM on our virtual machines, we
did not allot enough space on our hard disks for the operating system and
JupyterHub combined. We determined that in total, the operating system and
JupyterHub required about 15 GB of storage. To be safe, we now recommend to
create two 20 GB virtual hard disks for setting up JupyterHub.&lt;/p&gt;
&lt;p&gt;Our individual setups varied between each test server. In one successful setup,
each hard disk contained two partitions. One partition contained 2.0 GB and was
mounted on &lt;tt class="docutils literal"&gt;/boot&lt;/tt&gt; as the boot partition. The other partition contained 19.5
GB, serving as primary storage.&lt;/p&gt;
&lt;p&gt;We plan to have a stack of Ubuntu 18, RAID1, and LVM as our standard setup for
each node in the cluster.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="jupyterhub-bare-metal"&gt;
&lt;h2&gt;JupyterHub Bare-Metal&lt;/h2&gt;
&lt;p&gt;Our next step was trying to setup a bare-metal verion of JupyterHub in our
virtual machines.  We followed the instructions provided in the repository,
&lt;a class="reference external" href="https://github.com/mechmotum/jupyterhub-deploy-teaching"&gt;jupyterhub-deploy-teaching&lt;/a&gt;, to install
JupyterHub on our virtual machines and connect to it through the browser. The
repository is a &amp;quot;light fork&amp;quot; from the JupyterHub's &lt;a class="reference external" href="https://github.com/jupyterhub/jupyterhub-deploy-teaching"&gt;original
jupyterhub-deploy-teaching&lt;/a&gt; repository,
intended for UC Davis usage.&lt;/p&gt;
&lt;p&gt;We ran into a few issues during the installation process.  The Ansible script
in the repository was missing some required installations.  The package
&lt;cite&gt;python3-distutils&lt;/cite&gt; is required by JupyterHub but was not installed. The
package was a part of Ubuntu 16.04, so the Ansible script did not need to
specify installing &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;python3-disutils&lt;/span&gt;&lt;/tt&gt; previously. This was fixed in the
Ansible Playbook via &lt;a class="reference external" href="https://github.com/mechmotum/jupyterhub-deploy-teaching/commit/51b070a9ae3223d1919ec56323411ef455d642e5"&gt;this commit&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;We also encountered Conda errors while installing JupyterHub. We suspect that
this is due to the submodules from the &lt;a class="reference external" href="https://github.com/UDST/ansible-conda/tree/f26ac9f82bb96035d9d96a1531d62456c959229d"&gt;ansible-conda&lt;/a&gt;
repository, which are fixed by running their updates in our automatic
configuration and deploying script, &lt;tt class="docutils literal"&gt;setup.sh&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;After succeeding in setting up JupyterHub on our virtual machines, we
incorporated the changes into the configuration files and completed
&lt;tt class="docutils literal"&gt;setup.sh&lt;/tt&gt; to automate the installation process, testing it to make sure that
it worked. The script &lt;tt class="docutils literal"&gt;setup.sh&lt;/tt&gt; automates the following configuration tasks:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Adds submodules from the &lt;a class="reference external" href="https://github.com/UDST/ansible-conda/tree/f26ac9f82bb96035d9d96a1531d62456c959229d"&gt;ansible-conda&lt;/a&gt;
repository.&lt;/li&gt;
&lt;li&gt;Adds the current user to as an admin and user.&lt;/li&gt;
&lt;li&gt;Generates a proxy_auth_token and inputs it into the configuration file.&lt;/li&gt;
&lt;li&gt;Generates a self-signed SSL certificate and cookie secret.&lt;/li&gt;
&lt;li&gt;Names the &lt;cite&gt;hosts&lt;/cite&gt; and &lt;cite&gt;jupyter_hosts&lt;/cite&gt; files properly from &lt;cite&gt;hosts.example&lt;/cite&gt;
and &lt;cite&gt;jupyter_hosts.example&lt;/cite&gt; respectively.&lt;/li&gt;
&lt;li&gt;Runs Ansible Playbook.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Users can now save time by running the script to configure and deploy
JupyterHub, rather than complete the above tasks manually. Using the script
should be less error-prone compared to the manual setup.&lt;/p&gt;
&lt;/div&gt;
</content><category term="education"></category><category term="oer"></category><category term="education"></category><category term="jupyter"></category><category term="textbooks"></category><category term="engineering"></category><category term="libretexts"></category></entry><entry><title>Laboratorium Represented at the UC Davis Undergraduate Research Conference</title><link href="https://mechmotum.github.io/blog/urc-2019.html" rel="alternate"></link><published>2019-04-30T00:00:00-07:00</published><updated>2019-04-30T00:00:00-07:00</updated><author><name>Jason K. Moore</name></author><id>tag:mechmotum.github.io,2019-04-30:/blog/urc-2019.html</id><summary type="html">&lt;p class="first last"&gt;Bryn Cloud and Trevor Metz Presented at the 2019 UC Davis
Undergraduate Research Conference&lt;/p&gt;
</summary><content type="html">&lt;p&gt;Two of the undergraduate researchers in the Laboratorium presented their past
year's work at the UC Davis Undergraduate Research Conference on April 26,
2019. Congratulations on this accomplishment!&lt;/p&gt;
&lt;div class="section" id="design-of-an-electric-bicycle-speed-controller"&gt;
&lt;h2&gt;Design of an Electric Bicycle Speed Controller&lt;/h2&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="Trevor Metz standing beside his poster at the conference." src="https://objects-us-east-1.dream.io/mechmotum/urc2019-metz-photo.jpg" style="width: 80%;" /&gt;
&lt;p class="caption"&gt;Trevor Metz beside his poster.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="Trevor Metz's poster." src="https://objects-us-east-1.dream.io/mechmotum/urc2019-metz-poster.png" style="width: 80%;" /&gt;
&lt;p class="caption"&gt;Trevor Metz's poster. &lt;a class="reference external" href="https://objects-us-east-1.dream.io/mechmotum/urc2019-poster-metz.pdf"&gt;[Download bicycle poster PDF]&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="smartphone-based-sensor-fusion-for-estimating-rowing-kinematic-metrics"&gt;
&lt;h2&gt;Smartphone-based Sensor Fusion for Estimating Rowing Kinematic Metrics&lt;/h2&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="Bryn Cloud standing beside her poster at the conference." src="https://objects-us-east-1.dream.io/mechmotum/urc2019-cloud-photo.jpg" style="width: 80%;" /&gt;
&lt;p class="caption"&gt;Bryn Cloud beside her poster.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="Bryn Cloud's poster." src="https://objects-us-east-1.dream.io/mechmotum/urc2019-cloud-poster.png" style="width: 80%;" /&gt;
&lt;p class="caption"&gt;Bryn Cloud's poster. &lt;a class="reference external" href="https://objects-us-east-1.dream.io/mechmotum/urc2019-poster-cloud.pdf"&gt;[Download rowing poster PDF]&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content><category term="conferences"></category><category term="sports"></category><category term="biomechanics"></category><category term="rowing"></category><category term="bicycles"></category></entry><entry><title>Ski Jump Design Software to Analyze User Inputted Jumps</title><link href="https://mechmotum.github.io/blog/skijumpdesign-analysis.html" rel="alternate"></link><published>2019-04-18T00:00:00-07:00</published><updated>2019-04-18T00:00:00-07:00</updated><author><name>Bryn Cloud</name></author><id>tag:mechmotum.github.io,2019-04-18:/blog/skijumpdesign-analysis.html</id><summary type="html">&lt;p class="first last"&gt;Blog post on adding page to skijumpdesign app to analyze user inputted
ski jumps for equivalent fall height.&lt;/p&gt;
</summary><content type="html">&lt;div class="section" id="introduction"&gt;
&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;The goal of this work is to add a new page to the &lt;a class="reference external" href="http://www.skijumpdesign.info"&gt;Ski Jump Design Tool&lt;/a&gt;
that allows users to input a measured jump profile and get a depiction of
the equivalent fall height (EFH) for their jump. Figure 1 illustrates the
components of a terrain park using common terminology.&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="Ski Jump Terminology." src="https://objects-us-east-1.dream.io/mechmotum/ski-figure-01.png" style="width: 80%;" /&gt;
&lt;p class="caption"&gt;&lt;em&gt;Figure 1. Components of standard terrain park jump from [Levy]_.
Reprinted with the author's permission.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;p&gt;The software is designed for users with little to no technical background,
and guides the users through correct implementation.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="calculating-equivalent-fall-height"&gt;
&lt;h2&gt;Calculating Equivalent Fall Height&lt;/h2&gt;
&lt;p&gt;The theory of equivalent fall height calculations has been discussed by &lt;a class="citation-reference" href="#levy" id="citation-reference-1"&gt;[Levy]&lt;/a&gt;.
EFH can be expressed as follows:&lt;/p&gt;
&lt;div class="math"&gt;
\begin{equation*}
h = \frac{v_j^2sin^2(\theta_J - \theta_L)}{2g}
\end{equation*}
&lt;/div&gt;
&lt;p&gt;where &lt;span class="math"&gt;\(v_j\)&lt;/span&gt; is the jumper's landing speed, &lt;span class="math"&gt;\(\theta_J\)&lt;/span&gt; is the
jumper's landing angle, &lt;span class="math"&gt;\(\theta_L\)&lt;/span&gt; is the slope angle and &lt;span class="math"&gt;\(g\)&lt;/span&gt; is
gravity. This calculation was added to the skijumpdesign software to evaluate
the EFH of any surface. A takeoff angle, skier instance, and a takeoff point
relative to the surface are user inputs to the function. Then, the function
uses these inputs to find the skier's impact velocity at each point along the
surface and extracts the skier's landing speed and landing angle. The slope
angle is calculated using the slope along the surface.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="measuring-a-jump-s-profile"&gt;
&lt;h2&gt;Measuring A Jump's Profile&lt;/h2&gt;
&lt;p&gt;A jump has been measured using the three following methods.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Use a tape measure and level to find the surface distance and angle at
defined points along the jump. Then, convert the values to planar Cartesian
coordinate system that lies on the jumps cross section.&lt;/li&gt;
&lt;li&gt;Mount a high precision differential GPS to a snowboard and slowly walk the
snowboard along the jump.&lt;/li&gt;
&lt;li&gt;Mount a differential GPS on a helmet and have a skier ski along the jump as
slowly as possible.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We spent time this quarter testing the latter. A Piksi differential GPS system
was used for the experiments. This system uses two receivers, the base and the
rover, and calculates the relative position between the two. This referencing
allows the differential GPS to have a one centimeter accuracy. The GNSS antenna
was mounted to a bike helmet by drilling a hole through the top and fastening
it down with a nut and bolt. The cable that connects the antenna to the rover
evaluation board was fed down the profile of the helmet and into a backpack.&lt;/p&gt;
&lt;p&gt;Preliminary tests were gathered using the helmet/backpack setup while a rider
biked around a neighborhood in Davis. We found that while the rider was biking,
there were a lot of obstructions that would make the rover and base station
lose their fixed position when they were more than ~400 meters apart. This
meant that we were still able to locate the rover, but it had a less accurate
reading. We felt confident that we could maintain a fixed, accurate position
for at least 350 meters, so we spent the next weekend testing the setup at
Sierra at Tahoe ski resort.&lt;/p&gt;
&lt;p&gt;The skier went down four different jumps while the recorder was with the base
station left at the bottom of the resort. After the recorder started recording,
the skier slowly rode up the takeoff of the jump. Once at the top of takeoff,
the skier stopped and side stepped the takeoff lip. This method was used so
that it is easier to take note of where the takeoff point of the jump is when
we analyzed the data. After the sidestep, the skier stepped off the takeoff lip
and slowly rode down the landing profile. We tested 2 jump lines, one
approximately 200 meters from the base station, and one 1000 meters from the
base station. We found that the differential GPS accurately measured at both
locations, which was a pleasant surprise after the testing on a bike. This data
shows promise for this jump profiling method. Figure 2 shows me (the skier)
with the differential GPS ski helmet, and the backpack strapped to my chest.&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="Differential GPS Skier Helmet." src="https://objects-us-east-1.dream.io/mechmotum/ski-figure-02.jpg" style="width: 50%;" /&gt;
&lt;p class="caption"&gt;&lt;em&gt;Figure 2. A differential GPS mounted to a helmet for testing at Sierra at Tahoe.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="ski-jump-application-update"&gt;
&lt;h2&gt;Ski Jump Application Update&lt;/h2&gt;
&lt;p&gt;The new version of the ski jump web application has launched and is available
at &lt;a class="reference external" href="http://www.skijumpdesign.info"&gt;http://www.skijumpdesign.info&lt;/a&gt;. A home page was added to keep it user
friendly. This is shown below.&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="Ski Jump Tool Home Page." src="https://objects-us-east-1.dream.io/mechmotum/ski-figure-03.png" style="width: 50%;" /&gt;
&lt;p class="caption"&gt;&lt;em&gt;Figure 3. New Ski Jump Web Application - Home Page.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;The buttons centered in the middle of this page will direct users to the ski
jump design or the new analysis page shown in Figure 4.&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="Ski Jump Tool Analysis." src="https://objects-us-east-1.dream.io/mechmotum/ski-figure-06.png" style="width: 50%;" /&gt;
&lt;p class="caption"&gt;&lt;em&gt;Figure 4. New Ski Jump Web Application - Analysis Page.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;An example of a jump designed with a takeoff angle of 10 degrees and maximum
equivalent fall height of 0.8 m is displayed when the page is loaded. The user
can see the jump profile, EFH value, and knee collapse and possible soft
landing EFH values. The calculation shows a constant EFH value of 0.8 m until
it reaches the landing transition surface. Instead, the ski jump design app
limits the acceleration felt by the skier - which is the reason for the spike
in EFH.  From there, the user can scroll down to the input box to upload their
own jump. This input box is shown in Figure 5 with a sample csv file uploaded.&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="Analysis Input Box." src="https://objects-us-east-1.dream.io/mechmotum/ski-figure-07.png" style="width: 50%;" /&gt;
&lt;p class="caption"&gt;&lt;em&gt;Figure 5. Analysis Page Input Box.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;A function was added to the skijumpdesign software to calculate the equivalent
fall height of a surface. A differential GPS mounted on a skier's helmet is a
promising way to measure a jump profile because it is portable and efficient.
The ski jump web application has expanded to showcase three pages: a home page,
design page, and analysis page. Further work is needed to speed up the
calculations, determine the best methods for users to measure a jump, and make
the new web app user friendly.&lt;/p&gt;
&lt;p&gt;Other related information:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Web application: &lt;a class="reference external" href="http://www.skijumpdesign.info"&gt;http://www.skijumpdesign.info&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Software repository: &lt;a class="reference external" href="https://gitlab.com/moorepants/skijumpdesign"&gt;https://gitlab.com/moorepants/skijumpdesign&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Software documentation: &lt;a class="reference external" href="http://skijumpdesign.readthedocs.io"&gt;http://skijumpdesign.readthedocs.io&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="references"&gt;
&lt;h2&gt;References&lt;/h2&gt;
&lt;table class="docutils citation" frame="void" id="levy" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#citation-reference-1"&gt;[Levy]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Levy, D., Hubbard, M., McNeil, J.A. et al. Sports Eng (2015) 18: 227.
&lt;a class="reference external" href="https://doi.org/10.1007/s12283-015-0182-6"&gt;https://doi.org/10.1007/s12283-015-0182-6&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;script type='text/javascript'&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML';

    var configscript = document.createElement('script');
    configscript.type = 'text/x-mathjax-config';
    configscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        availableFonts: ['STIX', 'TeX']," +
        "        preferredFont: 'STIX'," +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";

    (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript);
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content><category term="research"></category><category term="ski"></category><category term="sports"></category><category term="engineering"></category><category term="safety"></category></entry><entry><title>Implementation of a PID Controller for Controlling The Speed of an Instrumented Ebike</title><link href="https://mechmotum.github.io/blog/ebike-controller-implementation.html" rel="alternate"></link><published>2019-04-05T00:00:00-07:00</published><updated>2019-04-05T00:00:00-07:00</updated><author><name>Trevor Metz</name></author><id>tag:mechmotum.github.io,2019-04-05:/blog/ebike-controller-implementation.html</id><summary type="html">&lt;p class="first last"&gt;Blog post on the implementation of a PID controller on an
instrumented ebike&lt;/p&gt;
</summary><content type="html">&lt;p&gt;&lt;em&gt;This blog post has been updated in a newer blog post. Please see the updated version of this blog post for the most up to date information.&lt;/em&gt;&lt;/p&gt;
&lt;div class="contents floatcon local topic" id="table-of-contents"&gt;
&lt;p class="topic-title"&gt;Table of Contents&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference internal" href="#introduction" id="toc-entry-1"&gt;1.0 Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#system-operation-functionality" id="toc-entry-2"&gt;2.0 System Operation &amp;amp; Functionality&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#system-architecture" id="toc-entry-3"&gt;3.0 System Architecture&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="#control-architecture" id="toc-entry-4"&gt;3.1 Control Architecture&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#physical-architecture" id="toc-entry-5"&gt;3.2 Physical Architecture&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#software" id="toc-entry-6"&gt;4.0 Software&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="#code-libraries" id="toc-entry-7"&gt;4.1 Code Libraries&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#hardware-hook-up-and-design" id="toc-entry-8"&gt;5.0 Hardware Hook Up and Design&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="#instrumented-ebike-platform" id="toc-entry-9"&gt;5.1 Instrumented Ebike Platform&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#electrical-hook-up" id="toc-entry-10"&gt;5.2 Electrical Hook Up&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#electronics-housings" id="toc-entry-11"&gt;5.3 Electronics Housings&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#bill-of-materials" id="toc-entry-12"&gt;6.0 Bill of Materials&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#lessons-learned-and-suggested-improvements" id="toc-entry-13"&gt;7.0 Lessons Learned and Suggested Improvements&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#acknowledgements" id="toc-entry-14"&gt;8.0 Acknowledgements&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="introduction"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#toc-entry-1"&gt;1.0 Introduction&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The overall goal of this project is to design and implement a control system
for an instrumented ebike used in bicycle handling experimentation. A previous
blog post found &lt;a class="reference external" href="ebike-controller-design"&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;outlines the design and analysis of a PID controller that meets the steady
state error goal of +/- 0.1m/s. This blog post tells the story of how the
designed PID controller was implemented on the instrumented ebike using an
Arduino Nano.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="system-operation-functionality"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#toc-entry-2"&gt;2.0 System Operation &amp;amp; Functionality&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The implementation of the PID controller on the electric bike was fundamentally
informed by the interactions that the user would have with the system. A
typical user interaction with the system is outlined in Figure 1 below.&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="User Interaction." src="https://objects-us-east-1.dream.io/mechmotum/UserInteractionFlowChart.jpg" style="width: 60%;" /&gt;
&lt;p class="caption"&gt;&lt;em&gt;Figure 1. A typical user interaction with the system.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;This user interaction flowchart was used to help better understand the problem
and sculpt the concept for the hardware and software design of the speed
control system.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="system-architecture"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#toc-entry-3"&gt;3.0 System Architecture&lt;/a&gt;&lt;/h2&gt;
&lt;div class="section" id="control-architecture"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#toc-entry-4"&gt;3.1 Control Architecture&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The control architecture is a simple feedback design that computes the error
between a user defined setpoint and compares it to the speed of the ebike as
measured via a DC generator wheel speed sensor (more on this in section 5.2).
Figure 2, shows how this error is inputted to the control algorithm encoded in
the Arduino Nano resulting in an output variable used to control the speed of
the ebike.&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="Control Architecture." src="https://objects-us-east-1.dream.io/mechmotum/BlogPost2ControlArchitecture.jpg" style="width: 60%;" /&gt;
&lt;p class="caption"&gt;&lt;em&gt;Figure 2. Control architecture.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="physical-architecture"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#toc-entry-5"&gt;3.2 Physical Architecture&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;At the heart of the control system’s physical architecture is its integration
into the existing instrumented ebike platform.  Figure 3, below, shows this
integration by highlighting the input/output and geometric relationships
between existing components of the ebike and the additional control system
components.&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="System Architecture." src="https://objects-us-east-1.dream.io/mechmotum/ControlSystemGeometricLayout.jpg" style="width: 75%;" /&gt;
&lt;p class="caption"&gt;&lt;em&gt;Figure 3. Geometric layout of the system components showing relative size,
location, information flow, and type of each component. Components called
out with a triangle are existing components on the ebike. Components called
out with a circle are components that are introduced to the ebike system to
implement the controller.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;The fundamental interaction between the control system and the existing ebike
powertrain system occurs at the interface between the Arduino nano and the
ebike motor controller. While the cruise control is engaged, the function of
the Arduino is to take control of the throttle signal away from the user and
pass it through the control algorithm before sending it to the motor
controller. When the cruise control is disengaged, the Arduino simply reads the
user commanded throttle position and passes it directly to the motor
controller.  Figure 4, below, graphically shows this interaction.&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="Arduino's Main Function." src="https://objects-us-east-1.dream.io/mechmotum/ArduinoThrottleSchematic.jpg" style="width: 40%;" /&gt;
&lt;p class="caption"&gt;&lt;em&gt;Figure 4. Schematic showing the Arduino’s function as a throttle emulator.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="software"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#toc-entry-6"&gt;4.0 Software&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The control system software was written in C using the Arduino IDE. Based on
user inputs from two momentary pushbuttons, the software decides whether or not
to pass the throttle signal as an output or compute a throttle output based on
the PID controller. The software also updates the user on the current status of
the system via an LCD and logs diagnostic information to an SD card.&lt;/p&gt;
&lt;p&gt;Figure 5, below, shows the logic flow of the code.&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="Code Logic Flowchart." src="https://objects-us-east-1.dream.io/mechmotum/ControlSystemCodeLogicFlowChart.jpg" style="width: 100%;" /&gt;
&lt;p class="caption"&gt;&lt;em&gt;Figure 5. Code logic flowchart.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;The software, and more details about it, can be found on the Laboratorium’s
Github repository &lt;a class="reference external" href="https://github.com/mechmotum/eBikeSpdController"&gt;found here&lt;/a&gt;.&lt;/p&gt;
&lt;div class="section" id="code-libraries"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#toc-entry-7"&gt;4.1 Code Libraries&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The continuous time PID controller derived in part one of this blog post series
was digitized on the Arduino Nano using Brett Beauregard’s PID_v1 library
&lt;a class="reference external" href="https://github.com/br3ttb/Arduino-PID-Library"&gt;(found here)&lt;/a&gt;. This library
was developed by Brett to implement PID controllers on an Arduino
microcontroller.&lt;/p&gt;
&lt;p&gt;Brett’s library was chosen to implement the PID controller because of its many
robust features such as Derivative Kick and Initialization.  Additionally, this
library contains fantastic documentation which can be &lt;a class="reference external" href="http://brettbeauregard.com/blog/2011/04/improving-the-beginners-pid-introduction/"&gt;found here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To avoid slowing the code’s main loop, interrupts were used to manage the
change in setpoint brought on by a press of the speed increment decrement
buttons. Using interrupts free’s up the Arduino’s processor from having to
check whether or not there’s been a button press on every loop iteration.
Instead, the processor reacts to pin changes and interrupts the execution of
the main code to perform the function tied to the interrupt pin. However, the
Arduino Nano only has a limited number of pins that can be used as interrupts.
A library, written by GreyGnome &lt;a class="reference external" href="https://github.com/GreyGnome/PinChangeInt"&gt;(found here)&lt;/a&gt;, enables the use of interrupts
on any pin of the Arduino Nano.  This library was used to free up pin real
estate for the many components that are wired up to the Arduino.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="hardware-hook-up-and-design"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#toc-entry-8"&gt;5.0 Hardware Hook Up and Design&lt;/a&gt;&lt;/h2&gt;
&lt;div class="section" id="instrumented-ebike-platform"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#toc-entry-9"&gt;5.1 Instrumented Ebike Platform&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Jason Moore, the lab’s PI, originally began constructing the instrumented ebike
platform in 2009 from a large Surly single speed off road steel frame bicycle
converted to an ebike with a conversion kit sold by Amped Bikes. The Amped
Bikes kit consists of a brushless direct drive hub motor driven by a motor
controller and a 36V Li ion battery. More information on the build and the
bike’s instrumentation system can be found in Jason’s dissertation &lt;a class="reference external" href="http://moorepants.github.io/dissertation/davisbicycle.html"&gt;found here&lt;/a&gt;.&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="Instrumented Ebike." src="https://objects-us-east-1.dream.io/mechmotum/TheInstrumentedEbike.JPG" style="width: 45%;" /&gt;
&lt;p class="caption"&gt;&lt;em&gt;Figure 6. The instrumented ebike today.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="electrical-hook-up"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#toc-entry-10"&gt;5.2 Electrical Hook Up&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The electrical components of the control system revolve around an Arduino Nano
which is used to process inputs and outputs to human interface hardware,
actuators, and logging hardware. Table 1, below, shows a complete list of the
hardware used in this build.&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;caption&gt;&lt;em&gt;Table 1. Table of components used in the control system. Prices and sources for each component can be found in the Bill of Materials in section 6.0.&lt;/em&gt;&lt;/caption&gt;
&lt;colgroup&gt;
&lt;col width="40%" /&gt;
&lt;col width="40%" /&gt;
&lt;col width="20%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;Component Name&lt;/th&gt;
&lt;th class="head"&gt;Details&lt;/th&gt;
&lt;th class="head"&gt;Function&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;Arduino Nano&lt;/td&gt;
&lt;td&gt;ATmega328P Processor&lt;/td&gt;
&lt;td&gt;Main   Processor&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Wheel Speed Sensor&lt;/td&gt;
&lt;td&gt;DC generator in contact with rear tire &lt;a class="reference external" href="http://moorepants.github.io/dissertation/davisbicycle.html"&gt;(Click here for more information)&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Control Loop Input&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Voltage Divider&lt;/td&gt;
&lt;td&gt;Used to step down wheel speed sensor voltage to a range measurable by the Arduino&lt;/td&gt;
&lt;td&gt;Wheel Speed Sensor Signal Conditioning&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Pushbuttons&lt;/td&gt;
&lt;td&gt;Momentary pushbuttons to get user input&lt;/td&gt;
&lt;td&gt;User Input&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Battery&lt;/td&gt;
&lt;td&gt;7.2V NiCd&lt;/td&gt;
&lt;td&gt;System Power&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;LCD&lt;/td&gt;
&lt;td&gt;16x2 character LCD&lt;/td&gt;
&lt;td&gt;User Feedback&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Motor Controller&lt;/td&gt;
&lt;td&gt;Amped Bikes motor controller&lt;/td&gt;
&lt;td&gt;Control Loop Output&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;SD Card Module&lt;/td&gt;
&lt;td&gt;SPI SD card module for Arduino&lt;/td&gt;
&lt;td&gt;Data Logging&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Figure 7, below, shows a Fritzing diagram of the electrical system.&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="Electrical Hookup." src="https://objects-us-east-1.dream.io/mechmotum/ControlSystemWiringDiagram.jpg" style="width: 60%;" /&gt;
&lt;p class="caption"&gt;&lt;em&gt;Figure 7. Fritzing diagram of control system electronics. Note that the
motor controller is represented by a DC motor and the 7.2V NiCd battery is
represented by a 1S LiPo battery.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;The Arduino Nano and the voltage divider circuits were soldered to a small 3&amp;quot; x
1.1&amp;quot; piece of stripboard. Wires, braided 22AWG, were soldered to the stripboard
to connect the external components to the Nano. Figure 8, below, shows the
completed Arduino board.&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="Arduino Board." src="https://objects-us-east-1.dream.io/mechmotum/ArduinoBoardWiredUp.JPG" style="width: 60%;" /&gt;
&lt;p class="caption"&gt;&lt;em&gt;Figure 8. The Arduino board with wires attached.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;With many of the components located on the handlebars, a majority of these
wires were routed together along the top tube, up the head tube and stretched
across to the handlebars. This task was facilitated using spiral wound cable
housings, zip ties, and a 15 pin Molex connector. Once on the handlebars, wires
were connected to header pins on the LCD and pushbuttons with Dupont
connectors.&lt;/p&gt;
&lt;p&gt;Rearward of the Arduino, T-tap wire splices were used to cleanly splice power
signals from the NiCd battery above the Arduino near the top tube and from the
wheel speed sensor near the bottom bracket.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="electronics-housings"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#toc-entry-11"&gt;5.3 Electronics Housings&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Housings for the Arduino Nano, pushbuttons and LCD were designed and 3D printed
to enclose the electrical components and mount them to the ebike. Figure 9,
below, shows the CAD model design of the Arduino housing. The housing’s design
includes pins for press fitting the Arduino stripboard to the mount. Slots on
the sides and top of the housing allow for wires to exit towards their
destinations on the ebike. Threaded inserts on the base are used to secure the
top cover using M3 screws.&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="Arduino Housing." src="https://objects-us-east-1.dream.io/mechmotum/ArduinoHousingDesign.jpg" style="width: 100%;" /&gt;
&lt;p class="caption"&gt;&lt;em&gt;Figure 9.  Arduino housing design.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;This housing is clamped to the downtube of the ebike by a socket head screw as
shown in Figure 10.&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="Arduino Mounting." src="https://objects-us-east-1.dream.io/mechmotum/ArduinoHousingMountingPoints.JPG" style="width: 80%;" /&gt;
&lt;p class="caption"&gt;&lt;em&gt;Figure 10. Arduino housing mounting point.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Both the LCD and button housings were 3D printed and designed to mount to the
handlebars using a clamshell style mount used for securing GoPro cameras to
bikes. Each mount had a pair of “bunny ears&amp;quot; designed to interface with the
GoPro style mount. The LCD housing, shown in Figure 11 below, is a simple
rectangular two-piece enclosure joined by button head screws.&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="LCD Housing." src="https://objects-us-east-1.dream.io/mechmotum/LCDHousingDesign.jpg" style="width: 75%;" /&gt;
&lt;p class="caption"&gt;&lt;em&gt;Figure 11. LCD housing design.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Similar to the LCD housing, the button housing is a two-piece, enclosure joined
by screws. Inside the housing is a small piece of stripboard that the
pushbuttons are soldered to. To make pressing the mini momentary pushbuttons
more convenient for the user, larger button parts were 3D printed and offset
from each mini momentary pushbutton using a compression spring as shown in
Figure 12 below.&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="Button Housing." src="https://objects-us-east-1.dream.io/mechmotum/ButtonHousingDesign.jpg" style="width: 100%;" /&gt;
&lt;p class="caption"&gt;&lt;em&gt;Figure 12. Button housing design.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;As shown in Figure 13, the button housing is mounted on right side of the
handlebars near the throttle and brake lever for convenient access.&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="Button Housing Mount." src="https://objects-us-east-1.dream.io/mechmotum/ButtonHousingPosition.JPG" style="width: 80%;" /&gt;
&lt;p class="caption"&gt;&lt;em&gt;Figure 13. Button housing position on the handlebars.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="bill-of-materials"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#toc-entry-12"&gt;6.0 Bill of Materials&lt;/a&gt;&lt;/h2&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="Bill of Materials." src="https://objects-us-east-1.dream.io/mechmotum/ControlSystemBillofMaterials.jpg" style="width: 100%;" /&gt;
&lt;p class="caption"&gt;&lt;em&gt;Table 2. Bill of materials (BOM) showing each part of project, where it was
purchased, what quantity was purchased and its cost.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="lessons-learned-and-suggested-improvements"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#toc-entry-13"&gt;7.0 Lessons Learned and Suggested Improvements&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Throughout the process of implementing this controller, I learned some helpful
lessons when it comes to designing electronics  housings and doing electrical
hookups.&lt;/p&gt;
&lt;p&gt;Some lessons learned include the following:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;It is important to account for the minimum bend radius of each wire inside of
an electrical enclosure&lt;/li&gt;
&lt;li&gt;It is important to follow &lt;a class="reference external" href="https://www.lulzbot.com/learn/tutorials/heat-set-inserts-tips-and-tricks"&gt;best practices&lt;/a&gt;
when designing for heat set threaded inserts&lt;/li&gt;
&lt;li&gt;Iteration is required in order to achieve a design intent when 3D printing&lt;/li&gt;
&lt;li&gt;Test the assembly and function of electrical connections on scrap wire before
commiting changes&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Throughout the implementation of this design, I've made note of some
improvements to the system's design that could be made. I have listed these
below:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;A larger momentary pushbutton could be used to reduce the complexity of the
button housing and improve its functionality&lt;/li&gt;
&lt;li&gt;Use a display that communicates via the SPI protocol to reduce the number of
wires used&lt;/li&gt;
&lt;li&gt;For the Arduino board, use a custom PCB to increase the robustness of the
board&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="acknowledgements"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#toc-entry-14"&gt;8.0 Acknowledgements&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I would like to thank &lt;a class="reference external" href="https://github.com/ngchan"&gt;Nicholas Chan&lt;/a&gt; for writing
the camera gimbal software that my speed control software is based off of. I’d
also like to thank &lt;a class="reference external" href="https://github.com/br3ttb"&gt;Brett Beuaregard&lt;/a&gt; for writing
the PID library and it’s excellent documentation that is the heart of the speed
control software. Finally, I’d like to thank Jason Moore for his support and
mentorship throughout this project.&lt;/p&gt;
&lt;p&gt;Stay tuned for part three of this series: Testing and Validation&lt;/p&gt;
&lt;/div&gt;
</content><category term="research"></category><category term="bikes"></category><category term="engineering"></category><category term="controller implementation"></category><category term="arduino"></category></entry><entry><title>Double Pendulum Human Controller Robot: GUI Development</title><link href="https://mechmotum.github.io/blog/double-pendulum-robot.html" rel="alternate"></link><published>2019-02-11T00:00:00-08:00</published><updated>2019-02-11T00:00:00-08:00</updated><author><name>Jonathan Blaze Cubanski</name></author><id>tag:mechmotum.github.io,2019-02-11:/blog/double-pendulum-robot.html</id><summary type="html">&lt;p class="first last"&gt;Blog post on creating a new interface to test different controller
designs for the Double Pendulum Robot.&lt;/p&gt;
</summary><content type="html">&lt;div class="section" id="introduction-and-background"&gt;
&lt;h2&gt;Introduction and background&lt;/h2&gt;
&lt;p&gt;The Double Pendulum Biomimetic Project has the overarching goal of developing a
desktop-controlled inverted double pendulum with actuators in each joint to
serve as a model for a human balancing on a moving platform (i.e. a
skateboard), where the degrees of freedom is limited to the human’s waist and
ankle joints. This model is illustrated in Figure 1 below.&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="Image depicting visual model showing the dynamics of the double pendulum robot" src="https://objects-us-east-1.dream.io/mechmotum/pendulum-fbd.png" style="width: 80%;" /&gt;
&lt;p class="caption"&gt;&lt;em&gt;Figure 1: Double Pendulum Reference (Photo created by Erich Baur, Todd Sweeney, Jiahao Wei, Greg McDonald)&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;There are two key applications for such a device. Firstly, it can assist in
controller identification, helping bridge the gap between the simulation of
human movements and real-world data collection. Secondly, the project is done
in collaboration with the Dr. Zhaodan Kong and the Cyber Human Physical Systems
Lab— Dr. Kong intends to use the device to demonstrate the fundamentals of
control theory to school students.&lt;/p&gt;
&lt;p&gt;The pendulum hardware was developed previously by EME 185 students, as well as
some preliminary Arduino code to enable robot movement. The primary objectives
were now to bring this hardware to life with UI software with an interactive
GUI for the robot, and improve upon the embedded Arduino code. Additional
objectives included restoring and improving the electromechanical hardware as
needed, and allow data collection from the onboard encoders.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="software-development"&gt;
&lt;h2&gt;Software Development&lt;/h2&gt;
&lt;p&gt;The following presents a high-level overview of the software solutions that
were implemented. To make the code modular and user-friendly, 4 custom
libraries were developed to encapsulate all needed functionality. General
system operation functions and interrupts governing writing PWM signals,
tracking encoder positions, enforcing position limits, and computing system
states were isolated in a general functionality library. A separate library for
controllers allows the user to add or modify controllers for all actuators. In
order to send position and angle commands as a function of time, the user can
directly write mathematical functions into a dedicated position library in
inches, degrees, and seconds. It was determined that the educational value of
the system and the overall functionality would greatly benefit from real-time
gain updates and user control. To facilitate this, a serial processing library
was established and using the IDE Processing, a GUI was created. The GUI, as
shown below, has a startup and swing-up buttons which enable the user to safely
start system operation when ready. The user can select the desired motor
controller and update the gains in real time.&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="Operating GUI." src="https://objects-us-east-1.dream.io/mechmotum/pendulum-gui.png" style="width: 50%;" /&gt;
&lt;p class="caption"&gt;&lt;em&gt;Figure 2. Operating GUI for Double Pendulum Operation&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="results-and-discussion"&gt;
&lt;h2&gt;Results and Discussion&lt;/h2&gt;
&lt;p&gt;The system currently is operating with PID controllers for each actuator and
the aforementioned functionality. The custom designed GUI successfully augments
the controller values and output response of the double pendulum robot. In the
video below, the robot is set to remain positioned perpendicular to the ground
as different external inputs are enacted onto the robot. The different PID
gains inputted into the GUI clearly affect its ability to return to that
position after being offset by external forces. Here is a link to a video that
showcases its performance.&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/nCciGgxlK24" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;
&lt;div class="section" id="further-work"&gt;
&lt;h2&gt;Further Work&lt;/h2&gt;
&lt;p&gt;The current limiting factors of this system primarily relate to the state of
the hardware and certain design decisions. Testing of serial communication
indicates that there may be a systematic shielding issue, and the
microprocessor should be moved away from high voltage lines. It is also unclear
if the code is operating fast enough to achieve optimal performance. Thorough
testing of performance while increasing the delay between each loop is needed
to understand the effects of this. Including a feature to allow enter custom
controller algorithms to save, access and port these into the microcontroller
was also difficult to achieve within the time constraints allotted.&lt;/p&gt;
&lt;p&gt;Data collection using a serial monitoring application is currently possible by
printing encoder data to the terminal, however, this slows down the code since
serial writing is relatively slow. Without a clear understanding of the effects
of changing loop time, it is not possible to draw clear conclusions about the
implications of this. A viable solution would be to have a second Arduino
running in parallel which only prints serial data and does not command the
robot. More testing is needed.&lt;/p&gt;
&lt;p&gt;Here is the link to our GitHub Repository where you can find the Arduino .ino
code, the custom libraries to operate the robot, and the Processing IDE code
for the GUI controller.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/mechmotum/DoublePendulumCode"&gt;https://github.com/mechmotum/DoublePendulumCode&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="thank-you"&gt;
&lt;h2&gt;Thank you&lt;/h2&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="This image displays the two students that worked on this project over the Fall 2018 Quarter, Dorian Crutcher and Jonathan Blaze Cubanski" src="https://objects-us-east-1.dream.io/mechmotum/dorian-blaze.jpg" style="width: 80%;" /&gt;
&lt;p class="caption"&gt;&lt;em&gt;Figure 3: Left: Dorian Crutcher   Right: Jonathan Blaze Cubanski&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content><category term="research"></category><category term="controller"></category><category term="double pendulum"></category><category term="gui"></category></entry><entry><title>BMD, ISSS, and ISB/ASB Abstract Submissions</title><link href="https://mechmotum.github.io/blog/bmd-isss-isb-asb-abstracts.html" rel="alternate"></link><published>2019-02-01T00:00:00-08:00</published><updated>2019-02-01T00:00:00-08:00</updated><author><name>Jason K. Moore</name></author><id>tag:mechmotum.github.io,2019-02-01:/blog/bmd-isss-isb-asb-abstracts.html</id><summary type="html">&lt;p class="first last"&gt;Blog post to share recent conference abstract submissions.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;The lab has just submitted a series of abstracts for three upcoming conferences
in 2019.&lt;/p&gt;
&lt;p&gt;We submitted an abstract on the &lt;a class="reference external" href="https://engrxiv.org/nykuh"&gt;soon to be submitted rowing biomechanics paper&lt;/a&gt; to the &lt;a class="reference external" href="https://isb2019.com"&gt;International Society of Biomechanics &amp;amp;
American Society of Biomechanics meeting&lt;/a&gt; in Calgary in
late July.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&amp;quot;Adaptive smartphone-based sensor fusion for estimating competitive rowing
kinematic metrics&amp;quot; is on work done by undergraduates Bryn Cloud, Britt
Tarien, Ada Liu, and Thomas Shedd during 2018. &lt;a class="reference external" href="https://objects-us-east-1.dream.io/mechmotum/isb2019-abstract.pdf"&gt;[PDF]&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We also submitted three abstracts to the &lt;a class="reference external" href="https://bmd2019.org/"&gt;Bicycle and Motorcycle Dynamics
conference in Padova, Italy&lt;/a&gt; in September.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&amp;quot;Practical Realization of a Theoretical Optimal-Handling Bicycle&amp;quot; is on work
done by undergraduate Roy Gilboa this past summer.  &lt;a class="reference external" href="https://objects-us-east-1.dream.io/mechmotum/bmd2019-abstract-gilboa.pdf"&gt;[PDF]&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&amp;quot;Design of an Electric Bicycle Speed Controller&amp;quot; is on work done by
undergraduate Trevor Metz since this past June.  &lt;a class="reference external" href="https://objects-us-east-1.dream.io/mechmotum/bmd2019-abstract-metz.pdf"&gt;[PDF]&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&amp;quot;Expanded Optimization for Discovering Optimal Lateral Handling Bicycle&amp;quot; is
on work Mont, Ron, and I are continuing on optimal handling bicycles.  &lt;a class="reference external" href="https://objects-us-east-1.dream.io/mechmotum/bmd2019-abstract-moore.pdf"&gt;[PDF]&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And finally, we submitted an abstract on our work about ski jump design to the
&lt;a class="reference external" href="https://www.isss2019.com/"&gt;International Society of Skiing Safety meeting&lt;/a&gt;
at Squaw Valley in April.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&amp;quot;Accessible, Open-source Computational Analysis and Design of Terrain Park
Ski Jumps&amp;quot; based on work done by Bryn Cloud, Britt Tarien, Mont Hubbard and
me. &lt;a class="reference external" href="https://objects-us-east-1.dream.io/mechmotum/isss2019-abstract.pdf"&gt;[PDF]&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We are crossing our fingers for acceptance! Thanks for all the hard work from
the students!&lt;/p&gt;
</content><category term="conferences"></category><category term="sports"></category><category term="biomechanics"></category><category term="bicycles"></category><category term="handling"></category><category term="optimization"></category><category term="design"></category><category term="mechatronics"></category><category term="ski"></category></entry><entry><title>Estimating Competition Rowing Metrics</title><link href="https://mechmotum.github.io/blog/estimating-rowing-metrics.html" rel="alternate"></link><published>2019-01-18T13:25:00-08:00</published><updated>2019-01-18T13:25:00-08:00</updated><author><name>Bryn Cloud</name></author><id>tag:mechmotum.github.io,2019-01-18:/blog/estimating-rowing-metrics.html</id><summary type="html">&lt;p class="first last"&gt;Our paper on the sensor fusion of iPhone sensor streams is
currently available for preprint at &lt;a class="reference external" href="https://engrxiv.org/nykuh"&gt;https://engrxiv.org/nykuh&lt;/a&gt;.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;This blog post provides a brief description of the primary ideas and results
that will be found in the paper, &amp;quot;Adaptive smartphone-based sensor fusion for
estimating competitive rowing kinematic metrics&amp;quot;.&lt;/p&gt;
&lt;div class="section" id="goal"&gt;
&lt;h2&gt;Goal&lt;/h2&gt;
&lt;p&gt;Competitive rowing highly values boat position and velocity data for real-time
feedback during training, racing and post-training analysis.  The ubiquity of
smartphones with embedded position (GPS) and motion (accelerometer) sensors
motivates their possible use in these tasks. We investigate the use of two
real-time digital filters to achieve extremely accurate but reasonably priced
measures of boat speed and distance per stroke.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="problem"&gt;
&lt;h2&gt;Problem&lt;/h2&gt;
&lt;p&gt;Rowers are primarily concerned with maximizing the speed of their boat and the
distance they can cover in each stroke. For this reason, we focus on increasing
the accuracy of these two metrics. The GPS from the iPhone samples about once
every three seconds, so there is not enough resolution to see what happens
within a stroke (which takes about 2 seconds). The accelerometer has an
acceptable sampling frequency of 100 Hz, but since rowers are interested in
speed and position, it must be integrated or double integrated which introduces
a steep low-frequency drift.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="solution"&gt;
&lt;h2&gt;Solution&lt;/h2&gt;
&lt;div class="section" id="complementary-filter"&gt;
&lt;h3&gt;Complementary Filter&lt;/h3&gt;
&lt;p&gt;The integrated acceleration is high-pass filtered to get rid of the
low-frequency drift, but keeps the high-frequency resolution within each
stroke. The GPS is low-pass filtered to get rid of any high-frequency noise.
These two signals are then summed together.&lt;/p&gt;
&lt;p&gt;To get a more accurate result, we apply a linear extrapolation of the previous
two GPS position points to get a more accurate prediction between the 0.3 Hz
data points.&lt;/p&gt;
&lt;p&gt;We use an optimization on each of our 16 data files to generate the optimal low
and high cutoff frequencies. We are then able to use the average values over
all runs in the filter. With the cutoff frequencies already built in, the
filter only needs the previous two data points to operate and runs in real
time.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="kalman-filter"&gt;
&lt;h3&gt;Kalman Filter&lt;/h3&gt;
&lt;p&gt;The Kalman filter algorithm fuses data collected from different sensors with
the outputs of a predictive dynamic physical model to estimate the target
time-varying variables of interest, known as states. In our case, the
body-fixed longitudinal acceleration of the boat is measured and used as an
input to a kinematic model to predict the displacement and speed of the boat
along its path. The predictions are then compared with the smartphone
GPS-derived distance traveled and speed measurement and the error is used as
feedback to adjust the estimation in real time. The Kalman gain can be tuned to
balance the sensor and model uncertainty to achieve optimal accuracy.&lt;/p&gt;
&lt;p&gt;The smartphone's accelerometer axis is not, in general, parallel to the boat's
horizontal travel path. If we want to use the smartphone acceleration for the
kinematic model, we must compensate for the sensor misalignment along with
varying boat pitch during rowing. This can be done by augmenting the
accelerometer's reading (&lt;span class="math"&gt;\(\phi_k\)&lt;/span&gt;).&lt;/p&gt;
&lt;p&gt;Therefore, the kinematic model for the Kalman Filter is as follows:&lt;/p&gt;
&lt;div class="math"&gt;
\begin{align*}
d_{k+1} = d_k+ v_k \Delta t \\
v_{k+1} = v_k + (\alpha_{y,k} - \phi_k) \Delta t
\end{align*}
&lt;/div&gt;
&lt;p&gt;This bias term now becomes a new state to be estimated by the filter which will
effectively account for drift due to integration error accumulation.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="experimental-validation"&gt;
&lt;h3&gt;Experimental Validation&lt;/h3&gt;
&lt;p&gt;We used a differential GPS system (accurate to ~3mm) to define our &amp;quot;ground
truth&amp;quot; data.  We simultaneously logged data on the differential GPS and the
iPhone while a rower performed passes at various speeds up and down a lake. We
collected data on two different rower-boat configuration: a single scull boat
(one seat) with an elite rower, and a double scull boat (two seats) with a
single amateur rower.  These offered two very different styles of rowing, so if
our filters can perform well on both, then we know they are robust.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="results"&gt;
&lt;h2&gt;Results&lt;/h2&gt;
&lt;p&gt;The figure below compares the distance per stroke estimation computed from the
smartphone GPS, complementary filter, and Kalman filter through the relative
error with respect to the the distance per stroke computed from the
differential GPS measurements.&lt;/p&gt;
&lt;img alt="Distance Per Stroke Figure" class="align-center" src="https://objects-us-east-1.dream.io/mechmotum/dps.png" style="width: 50%;" /&gt;
&lt;p&gt;Example boat speed estimates over 30 seconds during a typical trial comparing
smartphone GPS derived speed and the complementary filter and Kalman filter
outputs against the differential GPS is shown in Figure 2.  RMSE is calculated
with respect to the sampling rate of the accelerometer, 100 Hz.&lt;/p&gt;
&lt;img alt="Speed Estimation" class="align-center" src="https://objects-us-east-1.dream.io/mechmotum/speed-example.png" style="width: 50%;" /&gt;
&lt;/div&gt;
&lt;div class="section" id="discussion"&gt;
&lt;h2&gt;Discussion&lt;/h2&gt;
&lt;p&gt;We have presented two methods to estimate the speed and distance per stroke
along a rowing boat's path in real time that provide high accuracy and
precision from the relatively low accuracy sensors from a single smartphone
attached to the boat. These estimates provide an intimate view of the rower's
performance. These improved estimates can be used to create a more detailed
analysis of the rower's performance. Specifically, we show that the distance
per stroke can be estimated to an accuracy of 50~si{centimeter}, which is an
improvement over smartphone estimates but still insufficient for detailed
stroke-by-stroke level differentiation of boats in a racing event with
relatively close elapsed times.  Additionally, the inter-stroke view of boat
speed that our methods provide are better than any inexpensive commercial
on-board boat speed measurement device and compares favorably to very accurate
differential GPS systems without the need for more than one GPS receiver.&lt;/p&gt;
&lt;p&gt;The complementary filter has a disadvantage in that the filter cutoff
frequencies aren't updated to optimal values in real time, and the optimal
offline values we make use of do not robustly handle all stroke rates for the
two rowers and boats used. This makes the Kalman filter more attractive because
the bias term is adaptively updated for every rower and boat. The filter tunes
itself. Both filters take time to converge to a steady error from a zero speed
start, so the first strokes in a race will produce less accurate results. A
future study could look into minimizing the startup time by tuning the filters
further, but there is likely a tradeoff in accuracy and precision of the
estimations.&lt;/p&gt;
&lt;p&gt;Other related information:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Preprint: &lt;a class="reference external" href="https://engrxiv.org/nykuh"&gt;https://engrxiv.org/nykuh&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Software repository: &lt;a class="reference external" href="https://gitlab.com/mechmotum/row_filter"&gt;https://gitlab.com/mechmotum/row_filter&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;script type='text/javascript'&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML';

    var configscript = document.createElement('script');
    configscript.type = 'text/x-mathjax-config';
    configscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        availableFonts: ['STIX', 'TeX']," +
        "        preferredFont: 'STIX'," +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";

    (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript);
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content><category term="papers"></category><category term="rowing"></category><category term="sports"></category><category term="engineering"></category><category term="estimation"></category><category term="kalman filter"></category></entry><entry><title>Finding the Efficiency of the Xylem and Money Maker Treadle Pumps</title><link href="https://mechmotum.github.io/blog/treadle-pump-experiment.html" rel="alternate"></link><published>2018-12-27T00:00:00-08:00</published><updated>2018-12-27T00:00:00-08:00</updated><author><name>Aaron Shaw</name></author><id>tag:mechmotum.github.io,2018-12-27:/blog/treadle-pump-experiment.html</id><summary type="html">&lt;p class="first last"&gt;Blog post on conducting efficiency experiments with treadle pumps.&lt;/p&gt;
</summary><content type="html">&lt;div class="section" id="introduction"&gt;
&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Small scale farmers use human-powered water pumps in rural areas to increase
crop yields beyond subsistence levels. Different designs utilize various
biomechanical motions. One of the most popular and proven designs for
human-powered water pumps is the treadle pump, which is operated via a stepping
motion (Figure 1).&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="Treadle Example." src="https://objects-us-east-1.dream.io/mechmotum/treadle-example.jpg" style="width: 50%;" /&gt;
&lt;p class="caption"&gt;&lt;em&gt;Figure 1. A user &amp;quot;treadles&amp;quot; on the Money Maker treadle pump.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;The treadle pump is an inexpensive and portable irrigation tool. According to
International Development Enterprises (IDE), treadle pumps helped farmers in
Bangladesh increase their income by an average of $100 a year. This increase in
profit allowed farmers to invest in larger, more expensive irrigation machines
that further increased crop yields and helped create financial stability
&lt;a class="citation-reference" href="#polak" id="citation-reference-1"&gt;[Polak]&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;A prototype pedal-powered centrifugal water pump was tested by Abe McKay during
his Master’s studies &lt;a class="citation-reference" href="#mckay" id="citation-reference-2"&gt;[McKay]&lt;/a&gt;. Mckay’s tests suggested that this pump’s
efficiency was comparable to that of the commercially available Xylem and Money
Maker treadle pumps. Detailed efficiency data for these treadle pumps are not
available and thus an accurate comparison could not be made until now.&lt;/p&gt;
&lt;p&gt;For our experiment, we gathered efficiency data from the Xylem and Money Maker
treadle pumps and compared them to McKay’s data on the prototype Buffalo pump.
By comparing the efficiency of the Buffalo pump to the commercially available
Xylem and Money Maker pumps, we can evaluate the prototype’s potential for
success as a low cost tool for small scale irrigation.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="methods"&gt;
&lt;h2&gt;Methods&lt;/h2&gt;
&lt;p&gt;McKay had conducted an efficiency test with the centrifugal pump so our goal
was to conduct a similar test with our treadle pumps in order to produce data
that could be compared. We conducted fifteen tests, with three replicates at
each pressure head between 1 and 5 meters. We pumped 20 liters of water for
each test. We measured time using a photoresistor that was covered and
uncovered (on/off) to record the beginning and end of each test. The DAQ
apparatus including photoresistor circuit, sensor wires, and LabJack is shown
in Figure 2 below.&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="DAQ Setup." src="https://objects-us-east-1.dream.io/mechmotum/daq-setup.png" style="width: 50%;" /&gt;
&lt;p class="caption"&gt;&lt;em&gt;Figure 2. The LabJack was kept dry and out of danger behind the treadle pump.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Force sensors were designed using steel plates and two 200 kg rated load cells.
The load cells were mounted between steel plates and then mounted on the
treadle pump lever arms with U-bolts. We calibrated the force sensor using
Olympic weights and a balance scale for reference. The power meter apparatus
consisting of the force sensors and angular rate gyro are shown below in Figure
3.&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="Treadle Pump Setup." src="https://objects-us-east-1.dream.io/mechmotum/treadle-pump-setup.jpg" style="width: 50%;" /&gt;
&lt;p class="caption"&gt;&lt;em&gt;Figure 3. The Xylem treadle pump with force sensor and angular rate gyro attached&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;We measure force and angular rate using the force sensors and the angular rate
gyro respectively. Using our force measurements, we were able to calculate
torque using the equation below:&lt;/p&gt;
&lt;div class="math"&gt;
\begin{equation*}
\tau = F \times r
\end{equation*}
&lt;/div&gt;
&lt;p&gt;where &lt;span class="math"&gt;\(F\)&lt;/span&gt; is the force in Newtons applied to the lever arm perpendicular
to the arm. The radius &lt;span class="math"&gt;\(r\)&lt;/span&gt; is the distance from the point of applied
force to the lever arm’s center of rotation. Using torque and angular rate
measurements from the angular rate gyro, power in watts is calculated using the
equation below:&lt;/p&gt;
&lt;div class="math"&gt;
\begin{equation*}
P = \tau \times \omega
\end{equation*}
&lt;/div&gt;
&lt;p&gt;where torque 𝛕 is in Newton-meters and angular velocity 𝛚 is in
radians per second. Time required to fill the 20 liter bucket was measured and
used to calculate flow rate. Hydraulic power could then be calculated using the
equation:&lt;/p&gt;
&lt;div class="math"&gt;
\begin{equation*}
\textrm{Hydraulic Power} = q \times \rho \times g \times h
\end{equation*}
&lt;/div&gt;
&lt;p&gt;Simplifying for water, where density equals 1 kilogram per liter:&lt;/p&gt;
&lt;div class="math"&gt;
\begin{equation*}
\textrm{Hydraulic Power} = q \times g \times h
\end{equation*}
&lt;/div&gt;
&lt;p&gt;where &lt;span class="math"&gt;\(q\)&lt;/span&gt; is measured in liters per second, &lt;span class="math"&gt;\(g\)&lt;/span&gt; is 9.81 meters per
second squared, and &lt;span class="math"&gt;\(h\)&lt;/span&gt; is vertical pressure head measured in meters.
Efficiency can be calculated using the equation below:&lt;/p&gt;
&lt;div class="math"&gt;
\begin{equation*}
\eta = \frac{\textrm{Hydraulic Power}} {\textrm{Input Power}}
\end{equation*}
&lt;/div&gt;
&lt;p&gt;Hazen efficiency is determined by calculating the friction head loss using the
Hazen-Williams equation:&lt;/p&gt;
&lt;div class="math"&gt;
\begin{equation*}
\textrm{Frictional Head Loss} =
  \frac{\textrm{Pipe Length} \times 10.67 \times (\textrm{flow rate})^{1.852}}
       {(\textrm{Hazen Roughness})^{1.852} \times d^{4.8704}}
\end{equation*}
&lt;/div&gt;
&lt;p&gt;Hydraulic power is adjusted using this estimated friction head. A Hazen
efficiency can then determined.&lt;/p&gt;
&lt;p&gt;Each test began with one person priming the pump in order to achieve consistent
water flow. The collector would deliver the pumped water into an overflow
bucket until the experiment began. At the start of the experiment the treadler
would remove a piece of paper covering the photoresistor. Simultaneously, the
collector would transfer the outlet hose to the 20 L metered collection bucket.
During the data collection, the treadler would attempt to maintain an average
of 100 Watts. This was done by feel only and therefore resulted in some
deviation from the target power. The experiment ended when the collector
signaled to the treadler that 20 L was reached, at which point the
photoresistor was covered and the data collection complete. The data was
collected via a MATLAB program and saved after each trial. 15 trials were
completed: three at each meter interval between 1 and 5 meters.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="results"&gt;
&lt;h2&gt;Results&lt;/h2&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="1m Trials." src="https://objects-us-east-1.dream.io/mechmotum/1m-trials.jpg" /&gt;
&lt;p class="caption"&gt;&lt;em&gt;Figure 4&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="2m Trials." src="https://objects-us-east-1.dream.io/mechmotum/2m-trials.jpg" /&gt;
&lt;p class="caption"&gt;&lt;em&gt;Figure 5&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="3m Trials." src="https://objects-us-east-1.dream.io/mechmotum/3m-trials.jpg" /&gt;
&lt;p class="caption"&gt;&lt;em&gt;Figure 6&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="4m Trials." src="https://objects-us-east-1.dream.io/mechmotum/4m-trials.jpg" /&gt;
&lt;p class="caption"&gt;&lt;em&gt;Figure 7&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="5m Trials." src="https://objects-us-east-1.dream.io/mechmotum/5m-trials.jpg" /&gt;
&lt;p class="caption"&gt;&lt;em&gt;Figure 8&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;The figures 4-8 above show the calculated efficiencies for each pump at
different pressure heads across all trials. The average efficiencies are
graphed in figure 9 below.&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="Average Efficiency." src="https://objects-us-east-1.dream.io/mechmotum/average-efficiency.jpg" /&gt;
&lt;p class="caption"&gt;&lt;em&gt;Figure 9&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Figure 9 shows the efficiency trends across different pressure heads for each
pump. The average efficiency was found by finding the mean across the three
trial tests at each pressure head. The effect that the variation in power may
have had on efficiency was assumed to be negligible. The trendlines and
corresponding equations are shown.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="discussion"&gt;
&lt;h2&gt;Discussion&lt;/h2&gt;
&lt;p&gt;There is a variation in average power within each testing group that must be
acknowledged. Because the average power for each testing group was not held
constant, we must consider the relationship between power and efficiency. When
the trendlines for each testing group are observed, our data does not suggest a
strong relationship between average power and efficiency within a given
pressure head. More data points and a dedicated testing procedure would help
validate this claim, but the observed results are enough to make the assumption
that the effect of any hypothetical correlation is negligible given the range
over which average power varied during our tests. Therefore, the average
efficiencies can be compared between pumps where pressure head is held constant
despite fluctuating average power measurements across trials.&lt;/p&gt;
&lt;p&gt;Figure 9 shows the average efficiencies for each pump at various pressure
heads. The centrifugal Buffalo pump has a negatively sloped trendline whereas
the treadle pumps have positively sloped trendlines when observed between our
range of pressure heads. The Xylem pump surpasses the efficiency of the Buffalo
pump around 4.5 meters pressure head. The Money Maker pump can be predicted to
surpass the efficiency of the Buffalo pump at around 5.5 meters pressure head.
The Xylem and Money Maker pumps share a similar relationship between increased
pressure head and increased efficiency. There is a difference in slope between
the two trendlines of 0.54. Due to shared mechanical properties, all
treadle-type pumps most likely produce similarly sloped trendlines. The
centrifugal Buffalo pump is a completely different design, and thus its
efficiency can be predicted along a completely different trendline.&lt;/p&gt;
&lt;p&gt;The Buffalo pump is determined to be 21% (𝛔 = 6.7%) more efficient at 1
meter pressure head than the Xylem pump, and 32% (𝛔 = 4.9%) more
efficient at the same head when compared to the Money Maker. At 2 meters
pressure head, the Buffalo pump was 17.0% (𝛔 = 2.9%) and 24.7% (𝛔 =
2.4%) more efficient than the Xylem and Money Maker respectively. At 3 meters
head, it was 16.3% (𝛔 = 3.8%) and 26% (𝛔 = 4.1%) more efficient
respectively. At 4 meters, the differences decreased to 2.2% (𝛔 = 4.6%)
and 9.7% (𝛔 = 4.6%). At 5 meters the Xylem pump was 6.8% (𝛔 = 4.9%)
more efficient than the Buffalo pump and the Money Maker was only 2% (𝛔 =
3.7%) less efficient than the Buffalo.&lt;/p&gt;
&lt;p&gt;Until the correlation between power and efficiency can be determined, these
conclusions include an error assumed to be negligible. It is within the best
interest of further research to try and describe this correlation, which may
appear something like this:&lt;/p&gt;
&lt;div class="math"&gt;
\begin{equation*}
\textrm{Efficiency} = C \times \textrm{Power} + B
\end{equation*}
&lt;/div&gt;
&lt;p&gt;For low C values (&amp;lt;&amp;lt;1), our assumption can be considered valid. Our current
assumption is that C=0, where efficiency is not a function of power. It would
also be beneficial to direct further research at determining the range of
pressure heads most frequently encountered in real world irrigation situations.
This information will be critical in determining which human powered water pump
is the most efficient for its given application.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Our research finds that the Buffalo pump is more efficient than the Xylem
treadle pump up to 4.5 meters pressure head, and the Money Maker up to 5.5
meters pressure head. The efficiency advantage of one type of pump over another
will depend largely on pressure head. Figure 9 shows the efficiency trends
between two treadle style pumps and a centrifugal-type water pump.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;References&lt;/strong&gt;&lt;/p&gt;
&lt;table class="docutils citation" frame="void" id="polak" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#citation-reference-1"&gt;[Polak]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;P. Polak, &amp;quot;How IDE Installed 1.5 Million Treadle Pumps in
Bangladesh by Activating the Private Secotr: The Practical Steps,&amp;quot;
International Development Enterprises (IDE), 2000.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils citation" frame="void" id="mckay" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#citation-reference-2"&gt;[McKay]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;A. Mckay. (2018), &amp;quot;The Water Buffalo: Design of a Portable Bicycle
Powered Irrigation Pump for Small-Scale African Farmers&amp;quot; UC Davis, Davis,
California&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;script type='text/javascript'&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML';

    var configscript = document.createElement('script');
    configscript.type = 'text/x-mathjax-config';
    configscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        availableFonts: ['STIX', 'TeX']," +
        "        preferredFont: 'STIX'," +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";

    (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript);
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content><category term="research"></category><category term="efficiency"></category><category term="treadle pump"></category><category term="engineering"></category><category term="biomechanics"></category><category term="appropriate&#10;technology"></category></entry><entry><title>Design of a PID Controller for Controlling The Speed of an Instrumented Ebike</title><link href="https://mechmotum.github.io/blog/ebike-controller-design.html" rel="alternate"></link><published>2018-12-15T00:00:00-08:00</published><updated>2018-12-15T00:00:00-08:00</updated><author><name>Trevor Metz</name></author><id>tag:mechmotum.github.io,2018-12-15:/blog/ebike-controller-design.html</id><summary type="html">&lt;p class="first last"&gt;Blog post on designing a speed controller for an instrumented ebike.&lt;/p&gt;
</summary><content type="html">&lt;div class="section" id="introduction"&gt;
&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;The goal of this project is to design and implement a control system for an
instrumented ebike used in bicycle handling experimentation. To achieve this, a
basic unity feedback control architecture (Figure 1) is employed.&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="Control Architecture." src="https://objects-us-east-1.dream.io/mechmotum/bike-speed-control-01.jpg" style="width: 80%;" /&gt;
&lt;p class="caption"&gt;&lt;em&gt;Figure 1. Control architecture where e is the error between the actual
speed v of the ebike and the desired speed, vd, and V is the DC input
voltage to the ebike plant model. Gc and Gp represent the controller and
plant model respectively.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;The goal of the controller is to track a setpoint speed, within +/- 0.10 m/s,
set by the rider.  To achieve this, a PID controller was tuned using MATLAB’s
Control System Toolbox. The ebike plant model was derived using first
principles and grey box system identification.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="modeling-the-ebike-from-first-principles"&gt;
&lt;h2&gt;Modeling the eBike From First Principles&lt;/h2&gt;
&lt;p&gt;The dynamics of the ebike powertrain and the vehicle itself can be modeled from
first principles. The powertrain of the ebike consists of a standard ebike
conversion kit motor controller and a brushless 3 phase direct drive induction
motor mounted to the rear hub of the bike. A simple diagram of the ebike
drivetrain is shown below in Figure 2.&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="Ebike Drivetrain Diagram." src="https://objects-us-east-1.dream.io/mechmotum/bike-speed-control-02.jpg" style="width: 80%;" /&gt;
&lt;p class="caption"&gt;&lt;em&gt;Figure 2. Diagram of the drivetrain circuit and dynamics.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;In Figure 2, the induction motor is approximated by a model of a DC motor
circuit with resistance &lt;span class="math"&gt;\(R\)&lt;/span&gt;, inductance &lt;span class="math"&gt;\(L\)&lt;/span&gt; and back emf
&lt;span class="math"&gt;\(V_b\)&lt;/span&gt;. The torques &lt;span class="math"&gt;\(T_m\)&lt;/span&gt; and &lt;span class="math"&gt;\(T_p\)&lt;/span&gt; acting on the motor shaft
correspond to motor torque and wheel propulsion torque respectively. The
rotational dynamics of the drivetrain are defined by Euler’s rotation equation.&lt;/p&gt;
&lt;p&gt;A simple equation of motion for the bicycle, modeled as a point mass, is
derived using Newton’s 2nd Law of Motion in the horizontal direction &lt;a class="citation-reference" href="#wilson" id="citation-reference-1"&gt;[Wilson]&lt;/a&gt;.&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="Free Body Diagram of Bicycle." src="https://objects-us-east-1.dream.io/mechmotum/bike-speed-control-03.jpg" style="width: 20%;" /&gt;
&lt;p class="caption"&gt;&lt;em&gt;Figure 3. Free body diagram of the bicycle modeled as a point mass. Fa, Fr
and Fp are the aerodynamic drag, rolling resistance and propulsive forces
respectively.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Together, the vehicle and drivetrain dynamics of the ebike can be shown in a
state space representation with state variables &lt;span class="math"&gt;\(i(t)\)&lt;/span&gt; and &lt;span class="math"&gt;\(x(t)\)&lt;/span&gt;
as seen below.&lt;/p&gt;
&lt;img alt="State Space Representation of the eBike." class="align-center" src="https://objects-us-east-1.dream.io/mechmotum/bike-speed-control-04.jpg" style="width: 55%;" /&gt;
&lt;p&gt;From the state space representation, a transfer function from input DC voltage
&lt;span class="math"&gt;\(V\)&lt;/span&gt; to output speed &lt;span class="math"&gt;\(v\)&lt;/span&gt; is formed:&lt;/p&gt;
&lt;img alt="Plant Model Transfer Function." class="align-center" src="https://objects-us-east-1.dream.io/mechmotum/bike-speed-control-05.jpg" style="width: 80%;" /&gt;
&lt;p&gt;This plant model is a second order transfer function relating an applied DC
voltage input to the ebike’s motor controller to the output speed of the ebike.
This model represents an approximation of the true plant model of the ebike. To
get a more accurate plant model, a grey box system identification procedure
based on measured time response data from the ebike was used.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="performing-system-identification-from-experimental-data"&gt;
&lt;h2&gt;Performing System Identification From Experimental Data&lt;/h2&gt;
&lt;p&gt;To begin the process of system identification, the values of the ebike
drivetrain model parameters and bicycle drag and tire rolling resistance
coefficients were initialized using reasonable approximations found from
internet searches, previous knowledge of the instrumented ebike &lt;a class="citation-reference" href="#moore" id="citation-reference-2"&gt;[Moore]&lt;/a&gt; and
textbook resources &lt;a class="citation-reference" href="#wilson" id="citation-reference-3"&gt;[Wilson]&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In MATLAB, a nonlinear least-squares solver was used to optimize the constants
in the derived plant model of the ebike to match a speed time response measured
from the instrumented ebike. Figure 4, below, shows the curve fitting result.&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="Curve Fitting Results." src="https://objects-us-east-1.dream.io/mechmotum/bike-speed-control-06.jpg" style="width: 80%;" /&gt;
&lt;p class="caption"&gt;&lt;em&gt;Figure 4. Result of the least-squares curve fitting.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Figure 4 shows that the plant model of ebike was reasonably identified using
the least-squares curve fitting method. The resulting ebike plant model is:&lt;/p&gt;
&lt;img alt="Identified Plant Model." class="align-center" src="https://objects-us-east-1.dream.io/mechmotum/bike-speed-control-07.jpg" style="width: 90%;" /&gt;
&lt;/div&gt;
&lt;div class="section" id="controller-design-in-matlab"&gt;
&lt;h2&gt;Controller Design in MATLAB&lt;/h2&gt;
&lt;p&gt;With the plant model of the ebike identified, a PID controller (kp = 68.5, ki =
106, kd = 1.44) was tuned for zero steady state error and reasonable transient
behavior using MATLAB’s Control System Toolbox.&lt;/p&gt;
&lt;p&gt;The closed loop step response (Figure 5) shows that the controller meets the
design goals with zero steady state error, a settling time of 1.56s, and an
overshoot percentage of 10.45%.&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="Closed Loop System Step Response." src="https://objects-us-east-1.dream.io/mechmotum/bike-speed-control-08.jpg" style="width: 80%;" /&gt;
&lt;p class="caption"&gt;&lt;em&gt;Figure 5. Closed Loop System Step Response.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="evaluation-of-controller-robustness"&gt;
&lt;h2&gt;Evaluation of Controller Robustness&lt;/h2&gt;
&lt;p&gt;MATLAB’s Robust Control Toolbox was used to test the robustness of the closed
loop system with regards to uncertainties in the coefficients of the identified
ebike plant model. The constants in the derived ebike plant model were lumped
together forming the following simplified plant model:&lt;/p&gt;
&lt;img alt="Simplified Plant Model." class="align-center" src="https://objects-us-east-1.dream.io/mechmotum/bike-speed-control-09.jpg" style="width: 90%;" /&gt;
&lt;p&gt;The constants &lt;span class="math"&gt;\(a\)&lt;/span&gt;, &lt;span class="math"&gt;\(b\)&lt;/span&gt;, &lt;span class="math"&gt;\(c\)&lt;/span&gt;, and &lt;span class="math"&gt;\(d\)&lt;/span&gt; in the above
transfer function were defined in MATLAB as real-uncertain parameters with
varying percentage based uncertainties about their nominal values. The nominal
values of each coefficient were taken from the result of the system
identification step of the controller design process.  Figure 6, below, shows
the nominal closed loop and open loop system step response with 20 random
samples of the uncertain plant model defined by the uncertain coefficients.&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="Uncertain Step Response." src="https://objects-us-east-1.dream.io/mechmotum/bike-speed-control-10.jpg" style="width: 80%;" /&gt;
&lt;p class="caption"&gt;&lt;em&gt;Figure 6. Step response of the nominal closed loop system with 20 random
samples of the uncertain closed loop step response superimposed on the
plot.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Figure 6 shows that the closed loop system is reasonably robust despite
uncertainty in the plant model. Having this robustness in the control system
means that small changes in the dynamics of the ebike will not cause the
controller to have undesirable performance.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;A simple PID controller used in a unity feedback control architecture was
designed to reduce the steady state error and improve the transient performance
of the speed time response of an instrumented ebike. Using grey box system
identification, the plant model of the ebike was identified and used in the
controller design. A PID tuner app was used to tune the controller constants to
achieve zero steady state gain and favorable transient behavior. Finally, the
robustness of the controller was tested by simulating uncertainties in the
closed loop system.&lt;/p&gt;
&lt;p&gt;The next step in the project is to take the continuous time PID controller and
implement it digitally on the instrumented ebike. Stay tuned for part two:
Implementing a PID Controller on an Instrumented Ebike.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="references"&gt;
&lt;h2&gt;References&lt;/h2&gt;
&lt;table class="docutils citation" frame="void" id="wilson" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;[Wilson]&lt;/td&gt;&lt;td&gt;&lt;em&gt;(&lt;a class="fn-backref" href="#citation-reference-1"&gt;1&lt;/a&gt;, &lt;a class="fn-backref" href="#citation-reference-3"&gt;2&lt;/a&gt;)&lt;/em&gt; Wilson, D., Papadopoulos, J. and Whitt, F. (2004). Bicycling science.
Cambridge, Mass.: MIT Press.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils citation" frame="void" id="moore" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#citation-reference-2"&gt;[Moore]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Moore, J. (2012). Human Control of a Bicycle.
Available at: &lt;a class="reference external" href="http://moorepants.github.io/dissertation/davisbicycle.html"&gt;http://moorepants.github.io/dissertation/davisbicycle.html&lt;/a&gt;
[Accessed 12 Dec. 2018].&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;script type='text/javascript'&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML';

    var configscript = document.createElement('script');
    configscript.type = 'text/x-mathjax-config';
    configscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        availableFonts: ['STIX', 'TeX']," +
        "        preferredFont: 'STIX'," +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";

    (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript);
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content><category term="research"></category><category term="controls"></category><category term="instrumentation"></category><category term="engineering"></category><category term="mechatronics"></category><category term="bicycle"></category></entry><entry><title>Co-awarded $5M to build interactive STEM Open Educational Resources</title><link href="https://mechmotum.github.io/blog/libretexts-grant.html" rel="alternate"></link><published>2018-10-05T00:00:00-07:00</published><updated>2018-10-05T00:00:00-07:00</updated><author><name>Jason K. Moore</name></author><id>tag:mechmotum.github.io,2018-10-05:/blog/libretexts-grant.html</id><summary type="html">&lt;p class="first last"&gt;Lab co-awardees of $5M Department of Education Grant&lt;/p&gt;
</summary><content type="html">&lt;p&gt;An inaugural &lt;a class="reference external" href="https://www.ed.gov/news/press-releases/us-department-education-awards-49-million-grant-university-california-davis-develop-free-open-textbooks-program"&gt;$5M grant&lt;/a&gt; from the Department of Education was awarded to UC
Davis to further the &lt;a class="reference external" href="http://www.libretexts.org"&gt;LibreTexts&lt;/a&gt; project over the next three years. LibreTexts'
mission is to develop free open access textbooks for STEM disciplines. The
grant will support work at UC Davis and 11 other institutions around the
country. The project is led by Prof. Delmar Larsen in the UC Davis Chemistry
department. Jason K. Moore is a co-pi will lead efforts to enable interactive
computation in the text books and develop engineering open educational
resources. For more information see the LibreTexts &lt;a class="reference external" href="https://libretexts.org/pressRelease.html"&gt;press release&lt;/a&gt; and an
&lt;a class="reference external" href="https://www.insidehighered.com/digital-learning/article/2018/10/02/department-education-awards-pilot-oer-grant-uc-davis-open"&gt;article&lt;/a&gt; in Inside Higher Ed.&lt;/p&gt;
</content><category term="news"></category><category term="oer"></category><category term="education"></category><category term="jupyter"></category><category term="textbooks"></category><category term="engineering"></category></entry><entry><title>JOSS Paper On Ski Jump Design Software Published</title><link href="https://mechmotum.github.io/blog/skijumpdesign-published.html" rel="alternate"></link><published>2018-08-20T00:00:00-07:00</published><updated>2018-08-20T00:00:00-07:00</updated><author><name>Jason K. Moore</name></author><id>tag:mechmotum.github.io,2018-08-20:/blog/skijumpdesign-published.html</id><summary type="html">&lt;p class="first last"&gt;Our paper on the ski jump design software is published in the Journal
of Open Source Software.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;The &lt;a class="reference external" href="http://joss.theoj.org"&gt;Journal of Open Source Software&lt;/a&gt; accepted and published our paper
&amp;quot;skijumpdesign: A Ski Jump Design Tool for Specified Equivalent Fall Height&amp;quot;
which describes an open source software library and hosted web app for
designing ski jumps with a specified equivalent fall height. The paper can be
viewed here:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://doi.org/10.21105/joss.00818"&gt;https://doi.org/10.21105/joss.00818&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;If you'd like to check out the web app, click the image below:&lt;/p&gt;
&lt;a class="reference external image-reference" href="http://www.skijumpdesign.info"&gt;&lt;img alt="Screenshot of the application." class="align-center" src="https://objects-us-east-1.dream.io/mechmotum.github.io/skijumpdesign-screenshot.jpg" style="width: 50%;" /&gt;&lt;/a&gt;
&lt;p&gt;Other related information:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Web application: &lt;a class="reference external" href="http://www.skijumpdesign.info"&gt;http://www.skijumpdesign.info&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Software repository: &lt;a class="reference external" href="https://gitlab.com/moorepants/skijumpdesign"&gt;https://gitlab.com/moorepants/skijumpdesign&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Software documentation: &lt;a class="reference external" href="http://skijumpdesign.readthedocs.io"&gt;http://skijumpdesign.readthedocs.io&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content><category term="papers"></category><category term="ski"></category><category term="sports"></category><category term="engineering"></category><category term="safety"></category></entry></feed>