<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Bicycle Laboratorium - education</title><link href="https://mechmotum.github.io/" rel="alternate"/><link href="https://mechmotum.github.io/feeds/education.atom.xml" rel="self"/><id>https://mechmotum.github.io/</id><updated>2021-10-08T00:00:00-07:00</updated><subtitle>E pur si muove</subtitle><entry><title>LibreTexts Jupyter Integration Wrapup</title><link href="https://mechmotum.github.io/blog/libretexts-wrapup.html" rel="alternate"/><published>2021-10-08T00:00:00-07:00</published><updated>2021-10-08T00:00:00-07:00</updated><author><name>Jason K. Moore</name></author><id>tag:mechmotum.github.io,2021-10-08:/blog/libretexts-wrapup.html</id><summary type="html">&lt;div class="figure align-center"&gt;
&lt;img alt="LibreTexts and Jupyter Logos" src="https://objects-us-east-1.dream.io/mechmotum/libretexts-plus-jupyter.png" /&gt;
&lt;/div&gt;
&lt;p&gt;As of September 30th we have wrapped up our work integrating Jupyter based
computing tools into the &lt;a class="reference external" href="https://www.libretexts.org"&gt;LibreTexts&lt;/a&gt; platform. This work was part of a three
year $5M grant from the U.S. Department of Education (DoE) to enhance open
access textbooks called &lt;a class="reference external" href="https://www.ed.gov/news/press-releases/us-department-education-awards-49-million-grant-university-california-davis-develop-free-open-textbooks-program"&gt;Open Textbooks Pilot Program&lt;/a&gt; (CFDA No. 84 …&lt;/p&gt;</summary><content type="html">&lt;div class="figure align-center"&gt;
&lt;img alt="LibreTexts and Jupyter Logos" src="https://objects-us-east-1.dream.io/mechmotum/libretexts-plus-jupyter.png" /&gt;
&lt;/div&gt;
&lt;p&gt;As of September 30th we have wrapped up our work integrating Jupyter based
computing tools into the &lt;a class="reference external" href="https://www.libretexts.org"&gt;LibreTexts&lt;/a&gt; platform. This work was part of a three
year $5M grant from the U.S. Department of Education (DoE) to enhance open
access textbooks called &lt;a class="reference external" href="https://www.ed.gov/news/press-releases/us-department-education-awards-49-million-grant-university-california-davis-develop-free-open-textbooks-program"&gt;Open Textbooks Pilot Program&lt;/a&gt; (CFDA No. 84.116T).&lt;/p&gt;
&lt;p&gt;This blog post serves as a report on the outcomes from the portion of the grant
I was responsible for as a co-principal investigator. Overall, I think we were
quite successful. LibreTexts users are creating textbooks with interactive
computational elements (10+ textbooks), we've served hundreds of students with
our JupyterHub, and we've trained 12 undergraduate students in full stack
development, system administration, and site reliability engineering with many
of them now in professional positions making use of those skills.&lt;/p&gt;
&lt;div class="section" id="project-goals"&gt;
&lt;h2&gt;Project Goals&lt;/h2&gt;
&lt;p&gt;The overall goals of the DoE grant were multifold and we contributed to one
small chunk. Our project was part of &lt;em&gt;&amp;quot;Thrust 3: Next Generation Technology -
Interactive Visualizations, Automated Assessment, Annotations, Database
Integration, &amp;amp; Technological Synergy&amp;quot;&lt;/em&gt;. Here is what I proposed we would do in
the grant proposal:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;3C: Interactive Figure Editor (Jason K. Moore).&lt;/p&gt;
&lt;p&gt;While the CalcPlot3D application provides powerful, simple-to-use,
specialized 3D visualizations, many LibreTexts authors also desire arbitrary
interactive visualizations illustrating concepts in any scientific domain.
It is known that quality figures enhance learning when adjunct to text
regardless if the figures are static, dynamic, or interactive,[18,40] but
research demonstrating whether interactivity improves learning is nascent.
In computer science education, there is evidence that interactive
visualizations of computer algorithms improve learning when they are self
paced and of high quality[41–43] but may hamper learning if poorly
designed.[44,45] There is recent evidence that interactivity is especially
beneficial for lower performing students.[46] Cutting edge interactive
visualizations demonstrate how concepts are learned through exploration [47]
and modern publishing platforms are adopting interactive figures for high
level scientific communication (Authorea)[48] as well as for the public
(e.g.  New York Times). This will enable LibreText to become a platform for
research into the benefits of interactive figures in addition to providing
authors with infinite interactive visualization possibilities to convey
concepts (see Figure 4 for examples). To do so, we will implement general
functionality for authors to easily include any type of interactive figure
through a new &amp;quot;interactive figure editor&amp;quot; that relies on the Jupyter
interactive widget system, ipywidgets.[49]&lt;/p&gt;
&lt;p&gt;Jupyter is a popular open source web application that allows users to create
and share interactive documents that contain equations, visualizations,
narrative text, and the execution of code.[50] LibreTexts authors will be
able to write high level code in the Python programming language in the
LibreTexts editing interface to generate figures. On page save, the Python
code will be sent to an external server where it will be executed in a
secure container using Jupyter to generate an entry in an open access
database of versioned interactive Javascript figures.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;By the time the grant period started, the specific goals solidified into three
primary aims and two ancillary aims:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Primary&lt;/strong&gt;&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Allow textbook authors and readers to execute code that produces passive and
interactive figures&lt;/li&gt;
&lt;li&gt;Allow any reader of a LibreTexts textbook page to execute code interactively&lt;/li&gt;
&lt;li&gt;Add Jupyter enabled textbooks and portions of textbooks to LibreTexts&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Ancillary&lt;/strong&gt;&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Provide a JupyterHub for LibreTexts and UC Davis users&lt;/li&gt;
&lt;li&gt;Train students in full stack development, system administration, and site
reliability engineering&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Below, each section describes the various things we produced to meet these
goals. Developing a system like this from scratch is an enormous task, so it is
important to note that we built everything off of the strong open source
foundation of the greater Jupyter community and various other connected
projects.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="uc-davis-kubernetes-cluster"&gt;
&lt;h2&gt;UC Davis Kubernetes Cluster&lt;/h2&gt;
&lt;p&gt;We decided to build and run our own &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Bare-metal_server"&gt;bare metal&lt;/a&gt; &lt;a class="reference external" href="https://kubernetes.io/"&gt;Kubernetes&lt;/a&gt; computing
cluster.  We chose to do this instead of using cloud services because the 5-10
year cost projection seemed to be more favorable. We also had the expertise and
existing hardware available to pilot the system. After two build and test
iterations, we now have a 19 node cluster that runs JupyterHub and BinderHub on
top of Kubernetes for UC Davis and LibreTexts users. The cluster has several
notable features:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Puppet based deployment that allows us to  tear down and rebuild the cluster
with one command&lt;/li&gt;
&lt;li&gt;Monitoring and alerts via Prometheus and Grafana&lt;/li&gt;
&lt;li&gt;Large redundant ZFS data storage node&lt;/li&gt;
&lt;li&gt;High availability entry point server pair&lt;/li&gt;
&lt;li&gt;Custom user abuse sensors and process killers&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="UCD cluster racks." src="https://objects-us-east-1.dream.io/mechmotum/ucd-kube-cluster.png" /&gt;
&lt;p class="caption"&gt;The cluster humming away in the server room.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="jupyterhub"&gt;
&lt;h2&gt;JupyterHub&lt;/h2&gt;
&lt;p&gt;We run JupyterHub on the cluster that defaults to the latest JupyterLab
interface for interacting with the available programming languages. The
JupyterHub is accessible at both &lt;a class="reference external" href="https://jupyter.libretexts.org"&gt;https://jupyter.libretexts.org&lt;/a&gt; and
&lt;a class="reference external" href="https://jupyterhub.ucdavis.edu"&gt;https://jupyterhub.ucdavis.edu&lt;/a&gt;. Anyone with a UC Davis email address can log in
and make use of the hub. We've served over 400 users over the last couple of
years, most from various UC Davis and LibreTexts courses. We developed a &lt;a class="reference external" href="https://jupyterhub.ucdavis.edu/hub/faq"&gt;FAQ&lt;/a&gt;
that provides instructions for more advanced use. We also created a section in
the LibreTexts &lt;a class="reference external" href="https://chem.libretexts.org/Courses/Remixer_University/LibreTexts_Construction_Guide/05%3A_Interactive_Elements"&gt;construction guide&lt;/a&gt; that provides guidance specifically for
LibreTexts users and authors.&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="LibreTexts UC Davis JupyterHub Login Screen" src="https://objects-us-east-1.dream.io/mechmotum/libretexts-jupyterhub-login-page.png" /&gt;
&lt;p class="caption"&gt;LibreTexts UC Davis JupyterHub Login Screen&lt;/p&gt;
&lt;/div&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="Author construction guide section about Jupyter integration" src="https://objects-us-east-1.dream.io/mechmotum/libretexts-jupyter-guide.png" /&gt;
&lt;p class="caption"&gt;Author construction guide section about Jupyter integration&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="custom-docker-image"&gt;
&lt;h2&gt;Custom Docker Image&lt;/h2&gt;
&lt;p&gt;The default &lt;a class="reference external" href="https://github.com/jupyterhub/repo2docker"&gt;repo2docker&lt;/a&gt; based docker image for our our hub includes a large
set of software. We manage the software dependencies using APT and &lt;a class="reference external" href="https://github.com/mamba-org/mamba"&gt;Mamba&lt;/a&gt;, with
most packages installed via Mamba from the &lt;a class="reference external" href="https://conda-forge.org/"&gt;conda-forge&lt;/a&gt; channel. Managing an
image with a large set of software packages in a single environment has been
rather difficult due to hard-to-solve version compatibilities, relying on
packages that languish in maintenance, user desire for different versions of
some packages, packages not being available in conda-forge, slow build times,
and large docker image sizes. We've wrestled with these issues for three years,
but things are reasonably smooth at this point. New images are immediately
cached on all of our cluster nodes so that user load times are snappy and the
vast majority of needed software is pre-installed.&lt;/p&gt;
&lt;p&gt;Our repo2docker build specs for the image can be found here:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/LibreTexts/default-env"&gt;https://github.com/LibreTexts/default-env&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This image is a nice starting image for many scientific computing situations as
it includes Python, R, Julia, Octave, C++, and Sage in the console and
notebooks as well as RStudio server access to R.&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="JupyterLab Interface" src="https://objects-us-east-1.dream.io/mechmotum/libretexts-jupyterhub-jupyterlab-launch.png" /&gt;
&lt;p class="caption"&gt;JupyterLab Interface&lt;/p&gt;
&lt;/div&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="RStudio Interface" src="https://objects-us-east-1.dream.io/mechmotum/libretexts-rstudio.png" /&gt;
&lt;p class="caption"&gt;RStudio Interface&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="ckeditor-thebe-plugin"&gt;
&lt;h2&gt;CKEditor Thebe Plugin&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/executablebooks/thebe"&gt;Thebe&lt;/a&gt; is a JavaScript application that enables live Jupyter code cells to be
integrated into an arbitrary HTML page. Viewers of the HTML page can interact
with the cells by editing and executing them. Once executed the output can be
simple text output or advanced Javascript based interactive visualizations.
Thebe was originally developed as part of Europe's &lt;a class="reference external" href="https://opendreamkit.org/"&gt;OpenDreamKit&lt;/a&gt; project and
ties into the Jupyter ecosystem. There are some alternatives to Thebe, but they
offered essentially the same features. Because of this we more-or-less flipped
a coin and chose to make use of Thebe in LibreTexts. LibreTexts uses the
CKEditor for WYSIWYG editing of textbook pages. Once we settled on using Thebe
for LibreTexts pages, we developed a plugin for &lt;a class="reference external" href="https://ckeditor.com/"&gt;CKEditor&lt;/a&gt; that allows page
authors to edit and execute code cells. The plugin can be found here:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/LibreTexts/ckeditor-binder-plugin"&gt;https://github.com/LibreTexts/ckeditor-binder-plugin&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The plugin allows authors to:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Insert code cells and run them from CKEditor to check their execution.&lt;/li&gt;
&lt;li&gt;Embed the code cell with or without the output of the cell.&lt;/li&gt;
&lt;li&gt;Embed the code cell with or without the code of the cell displayed to
readers.&lt;/li&gt;
&lt;li&gt;Set the cells to uneditable by the LibreTexts readers.&lt;/li&gt;
&lt;/ul&gt;
&lt;center&gt;
&lt;iframe width="560" height="315"
src="https://www.youtube.com/embed/dIwZ-QQ8xSs" title="YouTube video player"
frameborder="0" allow="accelerometer; autoplay; clipboard-write;
encrypted-media; gyroscope; picture-in-picture" allowfullscreen&gt;&lt;/iframe&gt;
&lt;p&gt;Video showing how to use the plugin on LibreTexts&lt;/p&gt;
&lt;/center&gt;&lt;p&gt;LibreTexts page authors can get started with the above video and the
&lt;a class="reference external" href="https://chem.libretexts.org/Courses/Remixer_University/LibreTexts_Construction_Guide/05%3A_Interactive_Elements/5.02%3A_Jupyter_Notebooks_(Executable_Programming_Code_and_Figures)"&gt;instructions&lt;/a&gt; in the guide.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="thebe-improvements"&gt;
&lt;h2&gt;Thebe Improvements&lt;/h2&gt;
&lt;p&gt;After selecting Thebe and developing the CKEditor plugin we discovered that
&lt;a class="reference external" href="https://github.com/jupyter-widgets/ipywidgets"&gt;ipywidgets&lt;/a&gt; did not fully function with Thebe. We had planned to use ipywidgets
to offer LibreTexts readers interaction with figures and visualization using
GUI widgets (sliders, buttons, input boxes, etc.). We set out to remedy this
and began contributing to Thebe. In the fall of 2020, we organized a &lt;a class="reference external" href="https://jupytercon.com/sprint/"&gt;sprint&lt;/a&gt;
for Thebe during JupyterCon which helped breathe some life into the project.
With the help of the original Thebe developer, &lt;a class="reference external" href="https://executablebooks.org"&gt;Executable Book Project&lt;/a&gt;
members, &lt;a class="reference external" href="https://curvenote.com/"&gt;Curvenote&lt;/a&gt; project members, and JupyterCon sprint attendees we knocked
out a number of outstanding issues (see the &lt;a class="reference external" href="https://github.com/executablebooks/thebe/projects/1"&gt;Github project&lt;/a&gt; for details).
Since the sprint, there have been regular contributions to the repository and
we've made three releases of Thebe that have added a number of import new
features and bug fixes. Most importantly we recently merged the fix to fully
enable ipywidgets support. Here are some of the major improvements made during
and since the sprint:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Improved the documentation, including examples of more advanced cell outputs&lt;/li&gt;
&lt;li&gt;Thebe now uses JupyterLab 3.0 APIs&lt;/li&gt;
&lt;li&gt;Added a configuration for read-only cells&lt;/li&gt;
&lt;li&gt;Improved unit testing infrastructure&lt;/li&gt;
&lt;li&gt;Thebe now persists binder sessions across pages on the same domain&lt;/li&gt;
&lt;li&gt;A &amp;quot;Restart &amp;amp; Run All&amp;quot; button is now available on each cell&lt;/li&gt;
&lt;li&gt;Each cell has a &amp;quot;busy indicator&amp;quot; to give the user feedback from the server&lt;/li&gt;
&lt;li&gt;Enabled general ipywidgets functionality&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="Example of an ipywidget controlling a matplotlib figure in Thebe." src="https://objects-us-east-1.dream.io/mechmotum/thebe-ipywidgets.gif" style="height: 600px;" /&gt;
&lt;p class="caption"&gt;Example of an ipywidget controlling a matplotlib figure in Thebe.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;You can see examples many of the rich Jupyter outputs on this LibreTexts page:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://query.libretexts.org/Sandboxes/jupyterteam_at_ucdavis.edu"&gt;https://query.libretexts.org/Sandboxes/jupyterteam_at_ucdavis.edu&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="supporting-classes"&gt;
&lt;h2&gt;Supporting Classes&lt;/h2&gt;
&lt;p&gt;We piloted the JupyterHub and LibreTexts in several courses over the last three
years:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;GEL 56: Introduction to Geophysics, GEL 161: Geophysical Field Methods (Prof.
Magali Billen, UC Davis)&lt;/li&gt;
&lt;li&gt;GEL 160: Geological Data Analysis (Prof. Max Rudolph, UC Davis)&lt;/li&gt;
&lt;li&gt;GEL 298 (Profs. Sarah Stewart &amp;amp; Max Rudolph, UC Davis)&lt;/li&gt;
&lt;li&gt;STS 101: Introduction to Data Studies (Prof. Lindsay Nicole Poirier)&lt;/li&gt;
&lt;li&gt;ENG 122: Introduction to Mechanical Vibrations, MAE 223: Multibody Dynamics
(Prof. Jason K. Moore, UC Davis)&lt;/li&gt;
&lt;li&gt;Cheminformatics OLCC (Prof. Robert Belford et al., University of Arkansas at
Little Rock)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The cheminformatics course was a collaboration among several universities and
partners. This published paper details more about that effort:&lt;/p&gt;
&lt;blockquote&gt;
Kim et al. (2020), Teaching Cheminformatics through a Collaborative
Intercollegiate Online Chemistry Course (OLCC), Journal of Chemical
Education, &lt;a class="reference external" href="https://doi.org/10.1021/acs.jchemed.0c01035"&gt;https://doi.org/10.1021/acs.jchemed.0c01035&lt;/a&gt;&lt;/blockquote&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="Conference poster about the cheminformatics project." src="https://objects-us-east-1.dream.io/mechmotum/libretexts-cheminformatics-poster.png" /&gt;
&lt;p class="caption"&gt;Conference poster about the cheminformatics project.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="ngshare"&gt;
&lt;h2&gt;ngshare&lt;/h2&gt;
&lt;p&gt;During our efforts to get professors to adopt the hub at UC Davis, we found out
that many wanted to use &lt;a class="reference external" href="https://github.com/jupyter/nbgrader"&gt;nbgrader&lt;/a&gt; for auto-grading of Jupyter notebooks. But
nbgrader was only built for servers that had a standard shared user space
storage with a UNIX permission model. Thus, nbgrader could not function in a
JupyterHub running on a distributed system like Kubernetes. Computer science
professor, Christopher Nitta, and I proposed a computer science capstone BSc
project and attracted a talented group of students. This group invented
&lt;strong&gt;ngshare&lt;/strong&gt;, which solves the problem by running a data exchange database on a
Kubernetes pod that can be swapped out for nbgrader's traditional shared disk
space. This resulted in three code repositories with the software required to
run the service:&lt;/p&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;&lt;a class="reference external" href="https://github.com/LibreTexts/ngshare"&gt;ngshare&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Primary repository containing the ngshare application.&lt;/dd&gt;
&lt;dt&gt;&lt;a class="reference external" href="https://github.com/LibreTexts/ngshare-helm-repo"&gt;ngshare-helm-repo&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;A ready made Helm chart for deploying to kubernetes.&lt;/dd&gt;
&lt;dt&gt;&lt;a class="reference external" href="https://github.com/LibreTexts/ngshare_exchange"&gt;ngshare_exchange&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Exchange used to run ngshare on single user space systems (non distributed
systems).&lt;/dd&gt;
&lt;/dl&gt;
&lt;center&gt;
&lt;iframe width="560" height="315"
src="https://www.youtube.com/embed/SEJCaqD7xXQ" title="YouTube video player"
frameborder="0" allow="accelerometer; autoplay; clipboard-write;
encrypted-media; gyroscope; picture-in-picture" allowfullscreen&gt;&lt;/iframe&gt;
&lt;p&gt;Demo video of ngshare&lt;/p&gt;
&lt;/center&gt;&lt;/div&gt;
&lt;div class="section" id="libretexts-textbooks-using-jupyter-integration"&gt;
&lt;h2&gt;LibreTexts Textbooks Using Jupyter Integration&lt;/h2&gt;
&lt;p&gt;There are at least 10 textbooks now on LibreTexts that make use of the Jupyter
integration for a variety of different programming languages.&lt;/p&gt;
&lt;p&gt;Python&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://geo.libretexts.org/Courses/University_of_California_Davis/GEL_056:_Introduction_to_Geophysics"&gt;Introduction to Geophysics&lt;/a&gt; (Magali Billen, University of California, Davis)&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://eng.libretexts.org/Courses/Delta_College/Introduction_to_Programming_Concepts_-_Python"&gt;Introduction to Programming Concepts - Python&lt;/a&gt; (Chuck Severance, University of Michigan)&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://math.libretexts.org/Bookshelves/Linear_Algebra/Matrix_Algebra_with_Computational_Applications_(Colbry)"&gt;Matrix Algebra with Computational Applications&lt;/a&gt; (Dirk Colbry, Michigan State University)&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://eng.libretexts.org/Bookshelves/Introduction_to_Engineering/EGR_1010:_Introduction_to_Engineering_for_Engineers_and_Scientists"&gt;Introduction to Engineering for Engineers and Scientists&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://eng.libretexts.org/Bookshelves/Computer_Science/Programming_Languages/Book%3A_Python_for_Everybody_(Severance)"&gt;Python for Everybody&lt;/a&gt; (Chuck Severance, University of Michigan)&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://chem.libretexts.org/Ancillary_Materials/Interactive_Applications/Jupyter_Notebooks"&gt;Chemistry Interactive Applications&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="Example interactive robot arm simulator from Matrix Algebra with Computational Applications (Colbry)" src="https://objects-us-east-1.dream.io/mechmotum/libretexts-robot-sim.png" /&gt;
&lt;p class="caption"&gt;Example interactive robot arm simulator from Matrix Algebra with
Computational Applications (Colbry)&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;R&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://chem.libretexts.org/Courses/Intercollegiate_Courses/Cheminformatics_OLCC_(2019)"&gt;Cheminformatics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://stats.libretexts.org/Bookshelves/Introductory_Statistics/Book:_Visual_Statistics_Use_R_(Shipunov)"&gt;Visual Statistics Use R&lt;/a&gt; (Alexey Shipunov, Minot State University)&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://stats.libretexts.org/Bookshelves/Applied_Statistics/Book:_Answering_Questions_with_Data_-__Introductory_Statistics_for_Psychology_Students_(Crump)"&gt;Answering Questions with Data - Introductory Statistics for Psychology Students&lt;/a&gt; (Matthew J. C. Crump, Brooklyn College of CUNY)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Julia&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://math.libretexts.org/Bookshelves/Scientific_Computing_Simulations_and_Modeling/Book:_Scientific_Computing_(Staab)"&gt;Scientific Computing&lt;/a&gt; (Peter Staab, Fitchburg State University)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Octave&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://eng.libretexts.org/Bookshelves/Industrial_and_Systems_Engineering/Book:_Introduction_to_Control_Systems_(Iqbal)"&gt;Introduction to Control Systems&lt;/a&gt; (Kamran Iqbal, University of Arkansas at Little Rock)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Shell, Python, R&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://chem.libretexts.org/Courses/Intercollegiate_Courses/Internet_of_Science_Things_(2020)"&gt;Internet of Science Things&lt;/a&gt; (Robert Belford, University of Arkansas at Little Rock)&lt;/li&gt;
&lt;/ul&gt;
&lt;center&gt;
&lt;iframe width="560" height="315"
src="https://www.youtube.com/embed/gA9s0NQRVzY" title="YouTube video player"
frameborder="0" allow="accelerometer; autoplay; clipboard-write;
encrypted-media; gyroscope; picture-in-picture" allowfullscreen&gt;&lt;/iframe&gt;
&lt;p&gt;Three of the book authors (Belford, Billen, Iqbal) present their use of
Jupyter in LibreTexts.&lt;/p&gt;
&lt;/center&gt;&lt;/div&gt;
&lt;div class="section" id="outreach"&gt;
&lt;h2&gt;Outreach&lt;/h2&gt;
&lt;p&gt;We did a number of outreach talks. This was important for disseminating what we
had done, but also in helping the students develop their presenting skills and
connecting them to the communities of practice. We presented at Jupyter Open
Studio (2019), SacPy (2020), OpenEd Week (2020), Women in Data (2020), and the
National Workshop on Data Education (2020).&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="Celine Presenting at SacPy" src="https://objects-us-east-1.dream.io/mechmotum/celine-sacpy.jpg" style="width: 600px;" /&gt;
&lt;p class="caption"&gt;Hao, Tannavee, and Celine presenting at the SacPy meetup in 2019.&lt;/p&gt;
&lt;/div&gt;
&lt;center&gt;
&lt;iframe width="560" height="315"
src="https://www.youtube.com/embed/l-OVteC4PpA" title="YouTube video player"
frameborder="0" allow="accelerometer; autoplay; clipboard-write;
encrypted-media; gyroscope; picture-in-picture" allowfullscreen&gt;&lt;/iframe&gt;
&lt;p&gt;OpenEd Week Webinar&lt;/p&gt;
&lt;/center&gt;&lt;/div&gt;
&lt;div class="section" id="the-team"&gt;
&lt;h2&gt;The Team&lt;/h2&gt;
&lt;p&gt;It is important to point out that all of the work to bring Jupyter to
LibreTexts was done by a group of amazing undergraduate students over the last
three years. Richard Feltstykket and I mentored them and couldn't have asked
for a better group. Overall, we had 12 students work from 2 quarters to a whole
year on the project. They developed their teamwork process and onboarded new
students every other quarter. Many of the the students particpated during the
height of the COVID 19 pandemic. I have been thoroughly impressed with them and
their work. They came to the project with minimal to no knowledge about the
assortment of tools and skills that they needed to solve the presented
problems. The skillset needed for them to succeed was very broad, from building
servers all the way up the stack to frontend Javascript app development. The
students vacuumed up the knowledge, learned the skills, and it wasn't before
long that they all knew way more than their two mentors (which is the agenda of
all good mentors). As far as I can tell, this has paid off for many of them.
Some have taken positions doing very similar work to what they did in this
project. And outside of the work, the students led us through an assortment of
online games during our quarterly social breaks. I'll have nightmares about
Jackbox Trivia Murder Party for some time to come :). Without further ado, here
is it the team that made all of this magic happen:&lt;/p&gt;
&lt;table border="1" class="table docutils align-center" style="width: 48%"&gt;
&lt;colgroup&gt;
&lt;col width="33%" /&gt;
&lt;col width="33%" /&gt;
&lt;col width="33%" /&gt;
&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;&lt;img alt="" class="first last" src="https://objects-us-east-1.dream.io/mechmotum/libretexts-headshot-celine.png" /&gt;
&lt;/td&gt;
&lt;td&gt;&lt;img alt="" class="first last" src="https://objects-us-east-1.dream.io/mechmotum/libretexts-headshot-hao.jpg" /&gt;
&lt;/td&gt;
&lt;td&gt;&lt;img alt="" class="first last" src="https://objects-us-east-1.dream.io/mechmotum/libretexts-headshot-henry.jpg" /&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Celine Liang (now &amp;#64; Facebook)&lt;/td&gt;
&lt;td&gt;Hao Huang (now &amp;#64; Zillow)&lt;/td&gt;
&lt;td&gt;Henry Agnew (now &amp;#64; UC San Diego)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;img alt="" class="first last" src="https://objects-us-east-1.dream.io/mechmotum/libretexts-headshot-kevin-k.png" /&gt;
&lt;/td&gt;
&lt;td&gt;&lt;img alt="" class="first last" src="https://objects-us-east-1.dream.io/mechmotum/libretexts-headshot-kevin-r.png" /&gt;
&lt;/td&gt;
&lt;td&gt;&lt;img alt="" class="first last" src="https://objects-us-east-1.dream.io/mechmotum/libretexts-headshot-mandeepika.jpg" /&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Kevin Krausse (now &amp;#64; Ekata)&lt;/td&gt;
&lt;td&gt;Kevin Rong (now &amp;#64; Zoox)&lt;/td&gt;
&lt;td&gt;Mandeepika Sani (UC Davis)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;img alt="" class="first last" src="https://objects-us-east-1.dream.io/mechmotum/libretexts-headshot-noah.png" /&gt;
&lt;/td&gt;
&lt;td&gt;&lt;img alt="" class="first last" src="https://objects-us-east-1.dream.io/mechmotum/libretexts-headshot-patrick.jpg" /&gt;
&lt;/td&gt;
&lt;td&gt;&lt;img alt="" class="first last" src="https://objects-us-east-1.dream.io/mechmotum/libretexts-headshot-tannavee.png" /&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Lyla Sanders (UC Davis)&lt;/td&gt;
&lt;td&gt;Patrick Mackle (now &amp;#64; DocuSign)&lt;/td&gt;
&lt;td&gt;Tannavee Kumar (now &amp;#64; Tempus Labs)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;img alt="" class="first last" src="https://objects-us-east-1.dream.io/mechmotum/libretexts-headshot-tim.png" /&gt;
&lt;/td&gt;
&lt;td&gt;&lt;img alt="" class="first last" src="https://objects-us-east-1.dream.io/mechmotum/libretexts-headshot-xiaochen.png" /&gt;
&lt;/td&gt;
&lt;td&gt;&lt;img alt="" class="first last" src="https://objects-us-east-1.dream.io/mechmotum/libretexts-headshot-luigi.png" /&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Tim Stewart (UC Davis)&lt;/td&gt;
&lt;td&gt;Xiaochen Zeng (now &amp;#64; Tencent)&lt;/td&gt;
&lt;td&gt;Xin Luigi Chen (now &amp;#64; VMware)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Additionally, students Kevin Rong, Lawrence Lee, Eric Li, Abigail Almanza
co-developed ngshare.&lt;/p&gt;
&lt;p&gt;Congratulations on a job well done!&lt;/p&gt;
&lt;p&gt;We also had tons of help and support from a number of folks. Special thanks
goes out to: Bob Belford &amp;amp; team, Chris Holdgraf, Christopher Nitta, Delmar
Larsen, Hongfei Wang, Lindsay Nicole Poirier, Max Rudolph, Michael Casper
Lewis, Magali Billen, Min Ragan-Kelley, Paul Ivanov, Sarah Stewart, Steve
Purves, Tim Head, Tom Neubarth, Yuvi Panda, and likely others that I am
forgetting.&lt;/p&gt;
&lt;p&gt;And I give the most special thanks to Richard Feltstykket for being an amazing
partner in this project. We couldn't have pulled it off without his extensive
knowledge and resources regarding the cluster development and system
administration. Richard had some major things to deal with outside of work
during these three years but he never showed any slowing down or loss of
enthusiasm. He has my full admiration. I'll miss working with you Richard,
hopefully we can start up something new in the future! The project is in great
hands.&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="Lab pizza social" src="https://objects-us-east-1.dream.io/mechmotum/lab-pizza-outing.png" /&gt;
&lt;p class="caption"&gt;Pre-pandemic pizza social with the team. From the left around the table:
Celine, Michael, Trevor, Henry, Jason, Hao, Luigi, Tannavee.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="the-future"&gt;
&lt;h2&gt;The Future&lt;/h2&gt;
&lt;p&gt;The future for the system and tools we've developed as a part of this grant
look good. Richard Feltstykket is taking the project forward with LibreText's
support. The cluster, JupyterHub, and LibreTexts page integration will continue
to support a variety of instructors, courses, and students. The next big step
is to scale up use for courses at UC Davis and LibreTexts participating
universities. I certainly hope to see things grow now that it is all running
smoothly.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="resources"&gt;
&lt;h2&gt;Resources&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="https://mechmotum.github.io/research/librtexts-jupyter.html"&gt;Lab project page&lt;/a&gt;&lt;/p&gt;
&lt;div class="section" id="code-repositories"&gt;
&lt;h3&gt;Code repositories&lt;/h3&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;&lt;a class="reference external" href="https://github.com/LibreTexts/ckeditor-binder-plugin"&gt;ckeditor-binder-plugin&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;CKEditor plugin that adds a button to add Jupyter code cells via Thebe.&lt;/dd&gt;
&lt;dt&gt;&lt;a class="reference external" href="https://github.com/LibreTexts/ckeditor-query-plugin"&gt;ckeditor-query-plugin&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;CKEditor plugin to add buttons for LibreTexts' Query and Adapt systems.&lt;/dd&gt;
&lt;dt&gt;&lt;a class="reference external" href="https://github.com/LibreTexts/default-env"&gt;default-env&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Our custom JupyterHub repo2docker spec.&lt;/dd&gt;
&lt;dt&gt;&lt;a class="reference external" href="https://github.com/LibreTexts/galaxy-vagrant"&gt;galaxy-vagrant&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Vagrant setup for testing our galaxy cluster&lt;/dd&gt;
&lt;dt&gt;&lt;a class="reference external" href="https://github.com/LibreTexts/jupyterhub-templates"&gt;jupyterhub-templates&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;JupyterHub HTML templates that add the About and FAQ pages.&lt;/dd&gt;
&lt;dt&gt;&lt;a class="reference external" href="https://github.com/LibreTexts/jupyterteam_widget"&gt;jupyterteam_widget&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Example Jupyter widget used for learning how Jupyter widgets work.&lt;/dd&gt;
&lt;dt&gt;&lt;a class="reference external" href="https://github.com/LibreTexts/labextension-libretexts-faq"&gt;labextension-libretexts-faq&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;JupyterLab extension that adds an FAQ link in the menu bar.&lt;/dd&gt;
&lt;dt&gt;&lt;a class="reference external" href="https://github.com/LibreTexts/metalc/"&gt;metalc&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Primary documentation and issue tracker for the project.&lt;/dd&gt;
&lt;dt&gt;&lt;a class="reference external" href="https://github.com/LibreTexts/ngshare"&gt;ngshare&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Primary repository containing the ngshare application.&lt;/dd&gt;
&lt;dt&gt;&lt;a class="reference external" href="https://github.com/LibreTexts/ngshare_exchange"&gt;ngshare_exchange&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Exchange used to run ngshare on single user space systems (non distributed&lt;/dd&gt;
&lt;dt&gt;&lt;a class="reference external" href="https://github.com/LibreTexts/ngshare-helm-repo"&gt;ngshare-helm-repo&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;A ready made Helm chart for deploying to kubernetes.&lt;/dd&gt;
&lt;dt&gt;&lt;a class="reference external" href="https://github.com/LibreTexts/protogalaxy"&gt;protogalaxy&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Puppet module bootstrapping highly available Kubernetes cluster using
kubeadm, keepalived and HAProxy&lt;/dd&gt;
&lt;dt&gt;&lt;a class="reference external" href="https://github.com/LibreTexts/widget-testing"&gt;widget-testing&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Extensive tests for various advanced Jupyter cell outputs in Thebe and
LibreTexts.&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class="section" id="prior-blog-posts"&gt;
&lt;h3&gt;Prior blog posts&lt;/h3&gt;
&lt;p&gt;The students wrote (almost-)quarterly blog posts throughout the project
duration. These have more details on the various topics discussed above. Here
are all of the prior posts:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://mechmotum.github.io/blog/libretexts-grant.html"&gt;Grant Award Announcement&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://mechmotum.github.io/blog/jupyter-winter-2019.html"&gt;Winter 2019 Update&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://mechmotum.github.io/blog/jupyter-summer-2019.html"&gt;Summer 2019 Update&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://mechmotum.github.io/blog/sacpy-slideck-2019.html"&gt;SacPy Talk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://mechmotum.github.io/blog/libretexts-jupyter-plugin.html"&gt;Spring 2020 Update&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://mechmotum.github.io/blog/jupyter-summer-2020.html"&gt;Summer 2020 Update&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://mechmotum.github.io/blog/jupyter-fall-2020.html"&gt;Fall 2020 Update&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://mechmotum.github.io/blog/jupyter-summer-2021.html"&gt;Summer 2021 Update&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
</content><category term="education"/><category term="jupyter"/><category term="libretexts"/><category term="computation"/><category term="education"/><category term="oer"/><category term="textbooks"/></entry><entry><title>JupyterTeam Progress Summer 2021</title><link href="https://mechmotum.github.io/blog/jupyter-summer-2021.html" rel="alternate"/><published>2021-09-08T00:00:00-07:00</published><updated>2021-09-08T00:00:00-07:00</updated><author><name>Lyla Sanders</name></author><id>tag:mechmotum.github.io,2021-09-08:/blog/jupyter-summer-2021.html</id><summary type="html">&lt;p class="first last"&gt;Blog post on the progress made by JupyterTeam since winter 2020 through summer 2021&lt;/p&gt;
</summary><content type="html">&lt;div class="section" id="improvements-and-progress"&gt;
&lt;h2&gt;Improvements and Progress&lt;/h2&gt;
&lt;p&gt;Since winter quarter of 2020, the JupyterTeam has fixed a long standing issue
where Thebe, the JavaScript package that we use to display and run code on
libretexts.org, would not properly work with the entire interactive Jupyter
widget ecosystem. By migrating from the Jupyter HTML Manager package to the Lab
Manager, we are now able to run all ipywidget interactive widgets, which
greatly expands the possibilities for textbook authors.&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="IPyWidgets Used in Thebe" src="https://objects-us-east-1.dream.io/mechmotum/thebe-ipywidgets.gif" style="height: 600px;" /&gt;
&lt;p class="caption"&gt;Example of an ipywidget controlling a matplotlib figure in Thebe.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;In terms of cluster reliability, we have added a second router to be highly
available with the already existing one; If the master router fails for any
reason, then the backup one will take its place until the master comes back
online. Furthermore, we configured the routers to act as TFTP servers so that
they we may use Ubuntu netboot to load Ubuntu on all nodes from scratch. As
compared to the previous method, this way is more effective and utilizes
existing infastructure better.&lt;/p&gt;
&lt;p&gt;We completed the migration of our default-env computing environment to
JupyterLab 3.0, which includes new features which are great for widgets and
their JavaScript extensions. Additionally, we added a new Adapt plugin to
supplement our already existing Query plugin on libretexts.org.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="in-the-works"&gt;
&lt;h2&gt;In the Works&lt;/h2&gt;
&lt;p&gt;For the future, we are planning to develop a Ceph cluster to replace our
NFS-client-provisioner as the storage solution for users on the JupyterHub. We
also intend to extend the cluster with GPU nodes and provide more specialized
computing enviornments.  Feel free to use our Binder plugin on &lt;a class="reference external" href="https://libretexts.org/"&gt;libretexts.org&lt;/a&gt;, and check out our &lt;a class="reference external" href="https://jupyterhub.ucdavis.edu"&gt;JupyterHub&lt;/a&gt; if you are a UC Davis member!&lt;/p&gt;
&lt;/div&gt;
</content><category term="education"/><category term="oer"/><category term="education"/><category term="jupyter"/><category term="textbooks"/><category term="libretexts"/></entry><entry><title>JupyterTeam Progress Fall 2020</title><link href="https://mechmotum.github.io/blog/jupyter-fall-2020.html" rel="alternate"/><published>2021-01-14T00:00:00-08:00</published><updated>2021-01-14T00:00:00-08:00</updated><author><name>Lyla Sanders</name></author><id>tag:mechmotum.github.io,2021-01-14:/blog/jupyter-fall-2020.html</id><summary type="html">&lt;p class="first last"&gt;Blog post on the progress made by JupyterTeam over the fall of 2020&lt;/p&gt;
</summary><content type="html">&lt;div class="section" id="summary"&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;During the fall quarter of 2020 the JupyterTeam attended JupyterCon and was
able to make improvements to Thebe which our &lt;a class="reference external" href="https://github.com/LibreTexts/ckeditor-binder-plugin"&gt;CKEditor Binder Plugin&lt;/a&gt; depends on.
Furthermore, we expanded LibreTexts's CKEditor with a new Query Plugin to
enable authors to embed interactive problems into their textbook pages for
readers to solve. Finally, we went through most of the process of migrating the
Flock kubernetes cluster to Galaxy, which contains many improvements.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="jupytercon-2020"&gt;
&lt;h2&gt;JupyterCon 2020&lt;/h2&gt;
&lt;p&gt;Jupyter Team attended a JupyterCon sprint to improve &lt;a class="reference external" href="https://github.com/executablebooks/thebe/"&gt;Thebe&lt;/a&gt;, an open source project which we
use to insert executable code blocks into LibreTexts textbook pages.&lt;/p&gt;
&lt;p&gt;Additions to Thebe made by the team include:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Documenting how to display various &lt;a class="reference external" href="https://github.com/jupyter-widgets/ipywidgets/"&gt;ipywidgets&lt;/a&gt; in Thebe code blocks.
Without including scripts such as &lt;a class="reference external" href="https://requirejs.org/"&gt;RequireJS&lt;/a&gt; and
&lt;a class="reference external" href="https://fontawesome.com/v4.7.0/"&gt;Font Awesome 4&lt;/a&gt;, many ipywidgets would
not display properly. Some example pages for widgets created include &lt;a class="reference external" href="https://thebe.readthedocs.io/en/latest/examples/bqplot_example.html"&gt;bqplot&lt;/a&gt;,
&lt;a class="reference external" href="https://thebe.readthedocs.io/en/latest/examples/ipyleaflet_example.html"&gt;ipyleaflet&lt;/a&gt;,
and &lt;a class="reference external" href="https://thebe.readthedocs.io/en/latest/examples/plotly-example.html"&gt;plotly&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/executablebooks/thebe/pull/274"&gt;Adding a read-only option to code blocks&lt;/a&gt;, allowing users to
disable editing on rendered code blocks.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/executablebooks/thebe/pull/266"&gt;Persisting Binder sessions across pages&lt;/a&gt;, which decreases the
time to connect to a Binder pod if a user has already requested a previous
session.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/executablebooks/thebe/pull/297"&gt;Simplifying Jest tests&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We plan to continue working with Thebe in order to improve how it inserts and
displays interactive JupyterLab widgets.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="ckeditor-query-plugin"&gt;
&lt;h2&gt;CKEditor Query Plugin&lt;/h2&gt;
&lt;p&gt;The &lt;a class="reference external" href="https://github.com/LibreTexts/ckeditor-query-plugin"&gt;CKEditor Query Plugin&lt;/a&gt; is a plugin added to
the LibreTexts text editor, CKEditor. The plugin allows textbook authors to
embed interactive problems into HTML pages. Just like with our CKEditor Binder
Plugin, the Query Plugin adds a small icon to CKEditor so that authors may add
answerable problems into their textbooks.  The plugin works by simply embedding
a LibreTexts Javascript template into the HTML code which constitutes the
webpage. This plugin is completely operational and deployed on libretexts.org.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="cluster-migration"&gt;
&lt;h2&gt;Cluster Migration&lt;/h2&gt;
&lt;p&gt;During the winter break, the Jupyter team migrated the previous Flock cluster
to the new Galaxy cluster. This involved various changes in networking,
hardware, and Jupyterhub.&lt;/p&gt;
&lt;p&gt;The first step was to make sure that all of the physical computers were
properly wired to each other. At the end of it all, we were able to
reconsolidate our Flock and protogalaxy clusters to where we now have 17 nodes
online. These new Galaxy nodes are running high availability programs like
metallb and HAproxy to preserve the availability of our Libretexts services and
Kubernetes control-planes which is a great improvement over the previous Flock
cluster.&lt;/p&gt;
&lt;p&gt;We improved cluster management by setting up Ubuntu cloudinit to boot the nodes
and install a Puppet agent from which we are able to configure and install all
the processes we need using a Puppet server. This creates consistency across
our nodes and makes it easier to refresh the state of the cluster if something
goes massively wrong. Both of these features were lacking in the Flock cluster
and using them now makes it much easier to remotely manage these nodes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="looking-foward"&gt;
&lt;h2&gt;Looking Foward&lt;/h2&gt;
&lt;p&gt;While there are still a few &lt;a class="reference external" href="https://github.com/LibreTexts/metalc/issues/14#issuecomment-753696732"&gt;remaining objectives&lt;/a&gt; to
complete the setup of the Galaxy cluster, our services such as JupyterHub and
BinderHub are all online and available to the public.  In fact, all UC Davis
students and faculty have now been authorized to access jupyter.libretexts.org
without needing manual permission from us to do so. We intend to continue to
expand the availability of these Jupyter services, with our next target being a
JupyterHub for high preformance computing.&lt;/p&gt;
&lt;/div&gt;
</content><category term="education"/><category term="oer"/><category term="education"/><category term="jupyter"/><category term="textbooks"/><category term="libretexts"/></entry><entry><title>JupyterTeam Progress Summer 2020</title><link href="https://mechmotum.github.io/blog/jupyter-summer-2020.html" rel="alternate"/><published>2020-10-13T00:00:00-07:00</published><updated>2020-10-13T00:00:00-07:00</updated><author><name>Lyla Sanders</name></author><id>tag:mechmotum.github.io,2020-10-13:/blog/jupyter-summer-2020.html</id><summary type="html">&lt;p class="first last"&gt;Blog post on the progress made by JupyterTeam over the summer of 2020&lt;/p&gt;
</summary><content type="html">&lt;div class="section" id="summary"&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;Over the summer sessions of 2020, the JupyterTeam was able to
restructure the default-env image used by our &lt;a class="reference external" href="https://jupyter.libretexts.org/hub/login"&gt;JupyterHub
deployment&lt;/a&gt; so that it is
built by
&lt;a class="reference external" href="https://repo2docker.readthedocs.io/en/latest/"&gt;repo2docker&lt;/a&gt;,
allowing us to finally make use of our own &lt;a class="reference external" href="https://binder.libretexts.org/"&gt;Binder
deployment&lt;/a&gt; as the backend for the
&lt;a class="reference external" href="https://github.com/LibreTexts/ckeditor-binder-plugin"&gt;CKEditor Binder
plugin&lt;/a&gt; on
&lt;a class="reference external" href="https://libretexts.org/"&gt;Libretexts.org&lt;/a&gt;. This resolves the
remaining issues mentioned in the JupyterTeam's &lt;a class="reference external" href="https://mechmotum.github.io/blog/libretexts-jupyter-plugin.html#future"&gt;previous blog
post&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Additionally, we began bare-metal development on the new Galaxy
Kubernetes cluster building off of experiences with the first &lt;a class="reference external" href="https://mechmotum.github.io/blog/jupyter-summer-2019.html"&gt;flock
cluster&lt;/a&gt;
and improving on it. We also made numerous miscallaneous improvements
including a new Grafana alert setup, a more detailed FAQ page for our
JupyterHub as well as completing some much needed cluster upgrades.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="default-env-2-0"&gt;
&lt;h2&gt;default-env 2.0&lt;/h2&gt;
&lt;p&gt;A long standing complication with our previous &lt;a class="reference external" href="https://github.com/LibreTexts/default-env/tree/1.13/rich-default"&gt;rich default
default-env&lt;/a&gt;
image was that it was built using only a single, cluttered Dockerfile
and environment.yml. This led to the files being &lt;a class="reference external" href="https://github.com/LibreTexts/metalc/issues/121"&gt;quite
long&lt;/a&gt; and &lt;a class="reference external" href="https://github.com/LibreTexts/metalc/issues/130"&gt;difficult
to maintain&lt;/a&gt;. One of
the advantages of moving to a &lt;a class="reference external" href="https://github.com/LibreTexts/default-env/tree/2.0.1"&gt;repo2docker compatible
environment&lt;/a&gt; is
that it separates our image building files into more &lt;a class="reference external" href="https://repo2docker.readthedocs.io/en/latest/config_files.html"&gt;logical
parts&lt;/a&gt;.
Using repo2docker, we no longer have to include a Dockerfile and our
current environment is able to automate away much of what we previously
had to do using docker commands.&lt;/p&gt;
&lt;p&gt;Additionally, the new &lt;a class="reference external" href="https://github.com/LibreTexts/default-env"&gt;default-env
2.0&lt;/a&gt; is properly equipped
to handle &lt;a class="reference external" href="https://docs.conda.io/projects/conda/en/latest/user-guide/tasks/manage-environments.html"&gt;custom conda
environments&lt;/a&gt;.
Not only does this enable users to install their own persistent packages
on the Hub, but it also permitted us to &lt;a class="reference external" href="https://github.com/LibreTexts/metalc/issues/151"&gt;reduce the conda
channels&lt;/a&gt; necessary
to build the image down to just conda-forge/defaults and those provided
by repo2docker. Additionally, repo2docker now uses an alternative
dependency solver named &lt;a class="reference external" href="https://github.com/mamba-org/mamba"&gt;mamba&lt;/a&gt;
which reduces our conda environment build times (one part of the image
building process) down to only a few seconds. We further sought to
improve the maintainability of default-env 2.0 by including only the top
level dependencies for all of our desired packages to avoid listing
redundancies.&lt;/p&gt;
&lt;p&gt;Finally, we've fully overhauled the &lt;a class="reference external" href="https://jupyter.libretexts.org/hub/faq"&gt;LibreTexts FAQ page for
JupyterHub&lt;/a&gt; to explain these
default env changes, provide information on creating conda environments,
and more. A small
&lt;a class="reference external" href="https://github.com/LibreTexts/labextension-libretexts-faq"&gt;extension&lt;/a&gt;
was added to the JupyterLab interface so that users can directly access
the FAQ through the 'help' tab or in the Jupyter Launcher. To do this,
we consolidated the
&lt;a class="reference external" href="https://github.com/LibreTexts/jupyterhub-templates"&gt;jupyter-templates&lt;/a&gt;
and &lt;a class="reference external" href="https://github.com/LibreTexts/jupyterhub-images"&gt;jupyter-images&lt;/a&gt;
repositories into just jupyter-templates, and &lt;em&gt;all&lt;/em&gt; html pages are now
jinja templates. You can read more about the specifics from the
jupyter-templates &lt;a class="reference external" href="https://github.com/LibreTexts/jupyterhub-templates/blob/master/README.md"&gt;README.md
file&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="ckeditor-binder-plugin-and-our-kubernetes-binderhub-deployment"&gt;
&lt;h2&gt;CKEditor Binder plugin and our Kubernetes BinderHub deployment&lt;/h2&gt;
&lt;p&gt;The &lt;a class="reference external" href="https://github.com/LibreTexts/ckeditor-binder-plugin"&gt;CKEditor Binder
plugin&lt;/a&gt; helps
provide kernels to executable code cells on Libretexts.org using
&lt;a class="reference external" href="https://github.com/jupyterhub/binderhub"&gt;BinderHub&lt;/a&gt; as a backend.
While the plugin has been working for a while now and it does enable
JupyterLab-esque features on LibreTexts, the code cells would &lt;a class="reference external" href="https://github.com/LibreTexts/metalc/issues/83"&gt;often
take many minutes to load and
execute&lt;/a&gt;, if they
ever did at all. Furthermore, Binder uses repo2docker to build images
which meant that we could not use our own default-env repository as the
programming environment. As a result, we had to point CKEditor towards
external repositories where we had no control over the exact packages in
the environment. Two changes were made to fix this; we created
default-env 2.0 as outlined above, and we also brought our BinderHub
Kubernetes deployment into operation.&lt;/p&gt;
&lt;p&gt;The improvements of using our own default-env 2.0 and BinderHub in
CKEditor Binder plugin represent a huge benefit for LibreTexts. Now that
we can adjust the packages and kernels provided on LibreTexts with our
default-env 2.0, we can include additional &lt;a class="reference external" href="https://chem.libretexts.org/Courses/Remixer_University/LibreTexts_Construction_Guide/05%3A_Interactive_Elements"&gt;interactive
widgets&lt;/a&gt;
and exercise greater version control over the programming environment.
Switching to a locally maintained BinderHub allows us to cache the
images which are built by Binder on that node, dramatically increasing
loading speeds when executing code cells on LibreTexts. Pressing &amp;quot;run&amp;quot;
will now take no more than 20 seconds to connect to a Binder provided
kernel whereas before it often took minutes or longer due to the
inconsistent availability of mybinder.org. This drastic decrease in load
times makes the plugin much more accessible for both authors and
readers.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="galaxy-cluster"&gt;
&lt;h2&gt;Galaxy Cluster&lt;/h2&gt;
&lt;p&gt;The primary objectives for the new Galaxy cluster are high availability
and maintainability. Part of how we achieve high availability is by
using &lt;a class="reference external" href="https://github.com/kubernetes/kubeadm/blob/master/docs/ha-considerations.md#options-for-software-load-balancing"&gt;Keepalived and
HAproxy&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Keepalived runs as a static Kubernetes pod on each control-plane node
and it manages a virtual IP for the kube-apiserver that all of the
Kubernetes worker nodes communicate with. If the control-plane node
currently holding this Keepalived virtual IP goes down, Keepalived will
pass the virtual IP on to one of our remaining control-plane nodes so
that the rest of the Kubernetes cluster can still communicate with the
kube-apiserver.&lt;/p&gt;
&lt;p&gt;After Keepalived receives a kube-apiserver request, HAproxy (also
running as a static pod on each control-plane node) will load-balance
the request onto whichever control-plane node is chosen according to a
&lt;a class="reference external" href="https://avinetworks.com/glossary/round-robin-load-balancing/"&gt;round robin
algorithm&lt;/a&gt;.
If we did not use HAproxy, any kube-apiserver request received through
the Keepalived virtual IP would automatically be routed to that same
control-plane node, leaving the other control-plane nodes to just sit
there and do nothing. Load-balancing with HAproxy takes better advantage
of our available hardware and lowers the kube-apiserver load on any
given node.&lt;/p&gt;
&lt;p&gt;To improve the maintainability of this cluster, we use
&lt;a class="reference external" href="https://puppet.com/docs/puppet/6.18/puppet_index.html"&gt;Puppet&lt;/a&gt; to
setup Kubernetes and administrate our entire bare-metal cluster.
Although there already exists a &lt;a class="reference external" href="https://github.com/puppetlabs/puppetlabs-kubernetes"&gt;Puppet module for bootstrapping
Kubernetes&lt;/a&gt;, our
high availability setup has specific demands which required a &lt;a class="reference external" href="https://github.com/LibreTexts/protogalaxy"&gt;new
Puppet module&lt;/a&gt; to be
written. The Protogalaxy Puppet module bootstraps all of the necessary
components for Kubernetes using kubeadm like kubelet, kubelctl, and also
configures Keepalived and HAproxy as static pods. You can read more
about the module on its
&lt;a class="reference external" href="https://github.com/LibreTexts/protogalaxy/blob/master/README.md"&gt;README&lt;/a&gt;
page.&lt;/p&gt;
&lt;p&gt;Finally, we have a &lt;a class="reference external" href="https://github.com/LibreTexts/metalc/blob/master/docs/Galaxy-Control-Repo.md"&gt;Puppet
control-repo&lt;/a&gt;
which employs the ProtoGalaxy module and configures all the
non-Kubernetes components of our Galaxy cluster. Our goal is to use this
control-repo to completely reset the cluster state to a working version
in the case that something massively breaks. This would greatly improve
the maintainability of Galaxy cluster.&lt;/p&gt;
&lt;p&gt;As of now, we currently only have a development Galaxy cluster with no
public availability. We repurposed chicks11-18 from the Flock cluster
with brand new SSDs and then booted them up using IPMI. We also used
IPMI to install Ubuntu on all of these nodes because we do not have
physical access to the cluster in the midst of Covid-19.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="flock-cluster-upgrades-improvements"&gt;
&lt;h2&gt;Flock Cluster Upgrades/Improvements&lt;/h2&gt;
&lt;p&gt;At the beginning of summer, the original flock cluster went totally down
because our &lt;a class="reference external" href="https://v1-18.docs.kubernetes.io/docs/tasks/administer-cluster/kubeadm/kubeadm-certs/"&gt;kubeadm
certificates&lt;/a&gt;
expired. The reason for this was that our cluster was very behind on
Ubuntu and Kubernetes upgrades; the kube-apiserver and kubelet were on
v1.12 while the latest release was v1.18 at the time. One of the first
things we did was to upgrade the flock cluster across all the nodes, and
they now sit at a neat v1.19 for kubelet/kube-apiserver and v18.04.5 for
Ubuntu. Furthermore, we established a policy of upgrading the cluster
every 4 months so that the certificates do not meet their yearly
expiration date as they did before.&lt;/p&gt;
&lt;p&gt;Other improvements were made as well. Kubernetes
&lt;a class="reference external" href="https://cert-manager.io/docs/installation/kubernetes/"&gt;cert-manager&lt;/a&gt;
has been upgraded to v1, and &lt;a class="reference external" href="https://v3.helm.sh/"&gt;helm&lt;/a&gt; has also
been migrated over to v3. Our Grafana alerts setup has been recrafted so
that we no longer have to manually reinput our dashboards if the pod
goes down. We also enabled IPMI interfaces on all the nodes, affording
us remote adminstration tools in light of Covid-19.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="future-plans"&gt;
&lt;h2&gt;Future Plans&lt;/h2&gt;
&lt;p&gt;Our top priorities moving forward are to enhance the executable code
cell features of LibreTextsand continue development on the Galaxy
cluster. We would like to fix the current issues with ipywidgets and
other interactive plotting features currently exhibited by our CKEditor
Binder plugin. To complement this, we must bring cell-to-cell
communcation to the plugin so that adjusting the output of one cell
(such as a slider) can redraw the output of a previous cell just as it
would in JupyterLab.&lt;/p&gt;
&lt;p&gt;For the Galaxy cluster, we need to find a way to read the authentication
process of Hub users so that we can tag their pod and send them to the
high performance computing setup as needed. We will also need to
construct the physical computer setup for Galaxy, just as was done for
Flock cluster over a year ago. Stay tuned for more updates!&lt;/p&gt;
&lt;/div&gt;
</content><category term="education"/><category term="oer"/><category term="education"/><category term="jupyter"/><category term="textbooks"/><category term="engineering"/><category term="libretexts"/></entry><entry><title>Developing a LibreTexts Editor Plugin For Inserting Executable Code Blocks</title><link href="https://mechmotum.github.io/blog/libretexts-jupyter-plugin.html" rel="alternate"/><published>2020-06-22T00:00:00-07:00</published><updated>2020-06-22T00:00:00-07:00</updated><author><name>Hao Huang</name></author><id>tag:mechmotum.github.io,2020-06-22:/blog/libretexts-jupyter-plugin.html</id><summary type="html">&lt;p class="first last"&gt;Blog post on creating a CKEditor plugin which could insert
executable code blocks&lt;/p&gt;
</summary><content type="html">&lt;div class="section" id="background"&gt;
&lt;h2&gt;Background&lt;/h2&gt;
&lt;p&gt;During the end of the Fall Quarter 2019 and Winter Quarter 2020, we focused on
building a &lt;a class="reference external" href="https://github.com/LibreTexts/ckeditor-binder-plugin"&gt;CKEditor Binder Plugin&lt;/a&gt; to be used on the
&lt;a class="reference external" href="https://libretexts.org"&gt;LibreTexts&lt;/a&gt; website to allow textbook authors to
insert executable code blocks. We intend for both textbook authors and readers
to have the ability to edit and run code blocks efficiently, making online
educational content more interactive.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="build-process"&gt;
&lt;h2&gt;Build Process&lt;/h2&gt;
&lt;p&gt;We started the project by &lt;a class="reference external" href="https://docs.google.com/document/d/1eV08l_4djKJ7bc8r0LPbD5bp3QT7mHTZgABUleH15H0/edit?usp=sharing"&gt;surveying&lt;/a&gt;
LibreTexts authors and readers on their most requested features.&lt;/p&gt;
&lt;div class="section" id="binderhub"&gt;
&lt;h3&gt;BinderHub&lt;/h3&gt;
&lt;p&gt;On the backend, the CKEditor Binder plugin utilizes a project called &lt;a class="reference external" href="https://binderhub.readthedocs.io/en/latest/"&gt;BinderHub&lt;/a&gt; to run code blocks. BinderHub
is developed as part of the Jupyter project and gives custom computing
environments based on a list of requirements specified through a GitHub
repository.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="thebelab"&gt;
&lt;h3&gt;Thebelab&lt;/h3&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/minrk/thebelab"&gt;Thebelab&lt;/a&gt; and  &lt;a class="reference external" href="https://github.com/ines/juniper"&gt;Juniper&lt;/a&gt; are two examples of projects which can
insert code blocks into HTML pages and running them by requesting a kernel from
a computing backend like BinderHub. We found that Juniper had some better deign
elements; however, Thebelab was more actively maintained.  We deliberated on
which project to incorporate into our plugin, and decided to use Thebelab since
the recent commits indicated that any possible need for help would be more
promptly met. To incorporate some of the streamlined design elements of
Juniper, we planned on adding syntax highlighting.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="creating-the-plugin"&gt;
&lt;h3&gt;Creating the plugin&lt;/h3&gt;
&lt;p&gt;Our plugin is based on the &lt;a class="reference external" href="https://ckeditor.com/docs/ckeditor4/latest/"&gt;CKEditor 4&lt;/a&gt;, an open source “what you see
is what you get” text editor. This is the editor authors use on the LibreTexts
website.&lt;/p&gt;
&lt;p&gt;Our approach to this plugin is to make use of a &lt;a class="reference external" href="https://ckeditor.com/docs/ckeditor4/latest/guide/widget_sdk_intro.html"&gt;widget&lt;/a&gt;, on
the editor which allows us to place all the HTML elements of Thebelab together
as one unit. In other words the widget is a component made out of multiple
separate elements that are grouped together for easy formatting and movement;
however, individual parts can be altered independently. This allows for the
CKEditor instance to easily enforce the elements. Additionally, we created a
&lt;a class="reference external" href="https://ckeditor.com/docs/ckeditor4/latest/guide/dev_howtos_dialog_windows.html"&gt;dialog window&lt;/a&gt;
for each code block so that users can modify each block whenever they want.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="mindtouch-specific-settings"&gt;
&lt;h3&gt;Mindtouch Specific Settings&lt;/h3&gt;
&lt;p&gt;One of the challenges we faced was working around Mindtouch, which sometimes
caused the plugin to function in unexpected ways. For reference, Mindtouch is
the web based wiki software that Libretexts uses and it uses a CKEditor. An
example of an obstacle we faced was that Mindtouch seemed to apply its own CSS
to the plugin.  This caused text overflow, addition of characters to the end of
each line, etc.  In order to resolve this, we added our own &lt;a class="reference external" href="https://github.com/LibreTexts/ckeditor-binder-plugin/tree/staging/src/styles"&gt;styling&lt;/a&gt;
to the plugin. If one wishes to use the CKEditor plugin on their own pages,
they can remove the extra styling in the folder.&lt;/p&gt;
&lt;p&gt;Another difference was JavaScript conflict. When we were trying to support
Jupyter Widgets, we found that it depended on Require.js. However, adding
Require.js to Mindtouch would break all the JQuery plugins. In order to fix all
the JavaScript conflicts, we created registerPlugin.js to include all Mindtouch
specific JavaScript code.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="including-different-programming-languages"&gt;
&lt;h3&gt;Including different programming languages&lt;/h3&gt;
&lt;p&gt;During development, we used &lt;a class="reference external" href="https://github.com/binder-examples"&gt;environments developed by the Jupyter project&lt;/a&gt;. Using their Binder environments helped
us test and include different languages in our editor. Eventually we will
utilize, we would utilize the same &lt;a class="reference external" href="https://github.com/libretexts/default-env"&gt;default environment&lt;/a&gt; in our JupyterHub for our
editor. This default environment contains many packages that are commonly used
and requested by students and faculty.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="github-actions"&gt;
&lt;h3&gt;Github Actions&lt;/h3&gt;
&lt;p&gt;We made use of Github Actions to automate two important tasks. After each push
on Github, it will trigger our custom linter to ensure code quality and
consistency. Additionally, if we push any code to the master branch, it will
trigger an automatic deploy to production.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="ckeditor-capabilities"&gt;
&lt;h2&gt;CKEditor Capabilities&lt;/h2&gt;
&lt;p&gt;Currently authors publishing on the LibreTexts platform have the option to
insert executable code blocks using &lt;tt class="docutils literal"&gt;Octave&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;SageMath&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;Julia&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;R&lt;/tt&gt;,
&lt;tt class="docutils literal"&gt;Python&lt;/tt&gt;, and &lt;tt class="docutils literal"&gt;C++&lt;/tt&gt;. There is a possibility that other languages may be
added in the future. Authors can choose to either copy and paste their code
into the text editor, or directly code in the text editor as they would any
other one. To ensure that it is easy for the author as well as the reader of
the textbook to view the contents within the code block, as described in the
aforementioned section, syntax highlighting is made available via
&lt;tt class="docutils literal"&gt;CodeMirror&lt;/tt&gt; for all the languages except &lt;tt class="docutils literal"&gt;SageMath&lt;/tt&gt; which is not supported
by &lt;tt class="docutils literal"&gt;CodeMirror&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;It is important to note that we suggest authors &lt;tt class="docutils literal"&gt;run&lt;/tt&gt; the sample &lt;tt class="docutils literal"&gt;Hello
World&lt;/tt&gt; print statement first to get the kernel started, once that is
successful, code can be added in the dialog box. For &lt;tt class="docutils literal"&gt;C++&lt;/tt&gt;, if the code has
already been &lt;tt class="docutils literal"&gt;run&lt;/tt&gt;, but the author wants to make any changes, they will need
to &lt;tt class="docutils literal"&gt;restart&lt;/tt&gt; the kernel in order to avoid an &lt;tt class="docutils literal"&gt;Interpreter Error&lt;/tt&gt; as any
variables will be assigned more than once in &lt;tt class="docutils literal"&gt;Binder&lt;/tt&gt; which is not allowed in
&lt;tt class="docutils literal"&gt;C++&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;Packages and libraries can be exported as they normally would; however, if an
author finds that a specific package or library that they would like to use is
not currently available they can make a request to have it added by either
sending an &lt;a class="reference external" href="mailto:jupyterteam&amp;#64;ucdavis.edu"&gt;email to the Jupyter Team&lt;/a&gt;, linked in
the dialog box, or &lt;a class="reference external" href="https://github.com/LibreTexts/ckeditor-binder-plugin/issues"&gt;open an issue&lt;/a&gt; .&lt;/p&gt;
&lt;p&gt;Once the author is ready to insert the code block into their textbook page,
they have the option to either 'Insert with code and output,' 'Insert with code
only,' or 'Insert with output only.' Selection of any of these choices depends
on how the author intends to communicate the information provided in the code
block. If the code block has already been inserted into the page, and the
author wants to make any changes, they can simply double click on that section
and the dialog box will pop back up.&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="GIF depicting an example page made using CKEditor" src="https://objects-us-east-1.dream.io/mechmotum/example-libretexts-jupyter-page.gif" style="width: 100%;" /&gt;
&lt;p class="caption"&gt;&lt;em&gt;Figure 1: Example of what and author can do with CKEditor, and what the output will look like&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="future"&gt;
&lt;h2&gt;Future&lt;/h2&gt;
&lt;p&gt;As mentioned before, a long term goal is to use &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;default-env&lt;/span&gt;&lt;/tt&gt; for the
packages, this is the same environment that is used for the LIbreTexts-UCD
JupyterHub, and by&lt;/p&gt;
&lt;p&gt;using this, authors will have a greater selection of packages and libraries to
choose from, and it will also be easier for us to maintain. We also want to
improve the execution time of the code blocks, as currently requesting a kernel
involves downloading an image from DockerHub and creating a Docker container.&lt;/p&gt;
&lt;/div&gt;
</content><category term="education"/><category term="oer"/><category term="education"/><category term="jupyter"/><category term="textbooks"/><category term="engineering"/><category term="libretexts"/></entry><entry><title>Slidedeck From Our Recent SacPy Talk</title><link href="https://mechmotum.github.io/blog/sacpy-slideck-2019.html" rel="alternate"/><published>2019-11-17T00:00:00-08:00</published><updated>2019-11-17T00:00:00-08:00</updated><author><name>Jason K. Moore</name></author><id>tag:mechmotum.github.io,2019-11-17:/blog/sacpy-slideck-2019.html</id><summary type="html">&lt;p class="first last"&gt;Our slides from our November SacPy talk.&lt;/p&gt;
</summary><content type="html">&lt;iframe
src="https://docs.google.com/presentation/d/e/2PACX-1vQpprGVUh86uBUcpdQO-BD9-HQc0zit0vhf2O3z8Izs4aeYKcb8FxSX8gc43CeVM0-x_5JhIj03vRM0/embed?start=false&amp;loop=false&amp;delayms=3000"
frameborder="0" width="960" height="569" allowfullscreen="true"
mozallowfullscreen="true" webkitallowfullscreen="true"&gt;&lt;/iframe&gt;&lt;div class="figure align-center"&gt;
&lt;img alt="Celine presenting at SacPy." src="https://objects-us-east-1.dream.io/mechmotum/celine-sacpy.jpg" style="width: 800px;" /&gt;
&lt;p class="caption"&gt;Celine presenting at SacPy.&lt;/p&gt;
&lt;/div&gt;
</content><category term="education"/><category term="oer"/><category term="education"/><category term="jupyter"/><category term="textbooks"/><category term="engineering"/><category term="python"/></entry><entry><title>Creating a Kubernetes Bare-Metal Cluster for JupyterHub</title><link href="https://mechmotum.github.io/blog/jupyter-summer-2019.html" rel="alternate"/><published>2019-11-01T00:00:00-07:00</published><updated>2019-11-01T00:00:00-07:00</updated><author><name>Xin Luigi Chen</name></author><id>tag:mechmotum.github.io,2019-11-01:/blog/jupyter-summer-2019.html</id><summary type="html">&lt;p class="first last"&gt;Blog post on setting up JupyterHub on a Kubernetes bare-metal cluster&lt;/p&gt;
</summary><content type="html">&lt;div class="section" id="background"&gt;
&lt;h2&gt;Background&lt;/h2&gt;
&lt;p&gt;During the spring quarter and summer sessions, we focused on creating a
Kubernetes bare-metal cluster to deploy JupyterHub, BinderHub, and other
services.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="virtual-machine-cluster"&gt;
&lt;h2&gt;Virtual Machine Cluster&lt;/h2&gt;
&lt;p&gt;During spring quarter, Kevin and Celine worked on creating the bare metal
Kubernetes cluster. We first created a cluster of virtual machines (VMs) A
Linux test server served as the master node and host machine, while virtual
machines served as the child nodes. We used Vagrant to create these child nodes
and Ansible to provision them.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/LibreTexts/metalc/tree/master/dev-env"&gt;This folder in our main repository&lt;/a&gt; contains
instructions for setting up this development environment.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="bare-metal-cluster"&gt;
&lt;h2&gt;Bare-Metal Cluster&lt;/h2&gt;
&lt;p&gt;Our original bare-metal cluster consists of one master node named chick0 and 11
children named chick1 through chick10 sequentially. It also contains a
management node called rooster, which acts as a DHCP server, a TFTP server for
NetBoot and a proxy between the Internet and the Kubernetes cluster. The
Kubernetes cluster is under a private network, so the only way to access the
Kubernetes cluster is by connecting through rooster.&lt;/p&gt;
&lt;p&gt;The following diagram describes our networking setup.&lt;/p&gt;
&lt;img alt="Kubernetes diagram of cluster" src="https://objects-us-east-1.dream.io/mechmotum/kubediagram.png" style="width: 600px;" /&gt;
&lt;p&gt;The private network is under the &lt;tt class="docutils literal"&gt;10.0.0.0/8&lt;/tt&gt;. Kubernetes uses this network
for its resources to communicate.  Rooster has a public IP address of
&lt;tt class="docutils literal"&gt;128.120.136.26&lt;/tt&gt;, which serves multiple services based on the domain name
entered by the user.&lt;/p&gt;
&lt;p&gt;All servers are connected to a smart switch. The ZFS server is also connected
to the switch and provides persistent storage of JupyterHub users' files.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://wiki.debian.org/PXEBootInstall#Preface"&gt;PXEBoot&lt;/a&gt; used a preseed
file and a DHCP server to install Ubuntu Server 18.04 on the servers more
efficiently. Each new server pulls the preseed and installation files via a
TFTP server set up on rooster.&lt;/p&gt;
&lt;p&gt;As done in the development environment, the nodes were provisioned using
&lt;a class="reference external" href="https://github.com/LibreTexts/metalc/tree/master/ansible/playbooks"&gt;Ansible scripts&lt;/a&gt;.
Unlike the development environment, the bare-metal cluster &lt;a class="reference external" href="https://medium.com/&amp;#64;jain.sm/flannel-vs-calico-a-battle-of-l2-vs-l3-based-networking-5a30cd0a3ebd"&gt;uses Calico instead
of Flannel&lt;/a&gt;
for pod networking. This was chosen because Calico doesn't require software
bridges or IP tunneling like Flannel does. When communicating from pod to pod,
Flannel requires the pod's IP to be &amp;quot;packaged&amp;quot; in another IP (IP tunneling) to
send to the other pod. Calico, on the other hand, uses BGP protocol and
conserves the original pod IP.&lt;/p&gt;
&lt;p&gt;When we first setup our bare-metal cluster, we used rooster for our storage
needs by running a NFS server on it. Once we started getting ready for
production, we decided that we needed a more robust and redundant option for
our storage needs. With that in mind, we met with Mike and Dean, folks from the
Bioinformatics Core at the Genome Center here at UC Davis, to discuss the best
storage setup for our needs. After a couple of meetings, we came to the
conclusion that a ZFS setup would make the most sense, this decision was
reached mostly because of factors such as hardware already available and the
experience on ZFS that Dean and Mike brought to the table.&lt;/p&gt;
&lt;p&gt;Thanks to a retired ZFS server called the 'Hyperserver', we didn't have to
spend time and money ordering parts for our design. The 'Hyperserver' was quite
fitting of its name as it was a behemoth compared to the other nodes that we
were used to working with. The 'Hyperserver' was a 4U rack with enough slots in
the front to fit 24 drives, and 12 additional slots in the back for more. With
the help of Mike and Dean, we updated the firmware on the motherboard, drives,
and IPMI controller before we installed 24 storage drives in the front, and 2
RAID1 OS drives, 2 zil caches and 2 hot spares in the back. We used 4 stripes
of 6 drives each with raidz2 for our data storage drives, the goal was to
maximize speed and redundancy.  With raidz2, each stripe could lose a maximum
of 2 disks at once and the ZFS would still work. We then hooked up the ZFS to
our smart-switch where the Kubernetes network lives.  We made use of the
10Gib/s intel network card with a short range transceiver and 10M copper wire.
After we finished setting the ZFS server up, we renamed it to 'hen' to go along
with our naming theme for our cluster. Anyone can check out our extensive
&lt;a class="reference external" href="https://github.com/LibreTexts/metalc/blob/master/docs/Bare-Metal/ZFS.md"&gt;documentation&lt;/a&gt;
for more information regarding how we setup our ZFS.&lt;/p&gt;
&lt;p&gt;For security, we mainly followed the guide, &lt;a class="reference external" href="https://github.com/imthenachoman/How-To-Secure-A-Linux-Server"&gt;How to Secure a Linux Server&lt;/a&gt; written by
GitHub user &lt;a class="reference external" href="https://github.com/imthenachoman"&gt;iamthenachoman&lt;/a&gt;. Using the
guide, we implemented SSHing into rooster using only an SSH public/private key
pair, cleaned up short keys and UFW rules, and added intrusion detection for
iptables, SSH, and rootkits. You could find more information on our security
implementation in &lt;a class="reference external" href="https://github.com/LibreTexts/metalc/blob/master/docs/Bare-Metal/baremetal.md#securing-the-cluster"&gt;this section&lt;/a&gt;
of our documentation.&lt;/p&gt;
&lt;p&gt;Later, we added more chicks and upgraded the RAM of almost all chicks. We
increased the number of worker nodes from 10 to 18, and upgraded the RAM on
most chicks from 16GB to 64GB. These efforts prepared the cluster for handling
new classes in the fall quarter.&lt;/p&gt;
&lt;p&gt;Our &lt;a class="reference external" href="https://github.com/LibreTexts/metalc/blob/master/docs/Bare-Metal/baremetal.md"&gt;documentation&lt;/a&gt;
details our setup further and describes the actions taken to build the cluster
from scratch.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="customizing-jupyterhub"&gt;
&lt;h2&gt;Customizing JupyterHub&lt;/h2&gt;
&lt;p&gt;We made many modifications to JupyterHub, including redesigning the website,
adding new default environments, and more.&lt;/p&gt;
&lt;p&gt;JupyterHub pages is customizable using the &lt;a class="reference external" href="https://jinja.palletsprojects.com/en/2.10.x/templates/"&gt;Jinja2 templating system&lt;/a&gt; .  There are two
ways to add custom HTML files to JupyterHub (as described in &lt;a class="reference external" href="https://discourse.jupyter.org/t/customizing-jupyterhub-on-kubernetes/1769"&gt;this Discourse
post&lt;/a&gt;):&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Through &lt;a class="reference external" href="https://kubernetes.io/docs/concepts/workloads/pods/init-containers/"&gt;InitContainers&lt;/a&gt; that
pull repositories of template files before the hub starts,&lt;/li&gt;
&lt;li&gt;Or through mounting &lt;a class="reference external" href="https://kubernetes.io/docs/tasks/configure-pod-container/configure-pod-configmap/"&gt;ConfigMaps&lt;/a&gt;
to the template file directory.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We chose the former option and have repositories for &lt;a class="reference external" href="https://github.com/LibreTexts/jupyterhub-templates"&gt;custom HTML files&lt;/a&gt; and &lt;a class="reference external" href="https://github.com/LibreTexts/jupyterhub-images"&gt;additional images&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This is a screenshot of how the login page looks now.&lt;/p&gt;
&lt;img alt="Screenshot of the redesigned JupyterHub login page" src="https://objects-us-east-1.dream.io/mechmotum/jupyterhubscreenshot.png" style="width: 600px;" /&gt;
&lt;p&gt;Additionally, more spawner options are included. We modified the default
environment to include many packages requested by professors and students. The
Dockerfile for the default environment is maintained in &lt;a class="reference external" href="https://github.com/LibreTexts/default-env"&gt;this repository&lt;/a&gt;.  The environment includes
Python 2 and 3, Octave, R, Julia, and SageMath.  The default environment mainly
installs software and packages via apt and conda for security reasons.&lt;/p&gt;
&lt;img alt="Screenshot of the redesigned JupyterHub spawner page" src="https://objects-us-east-1.dream.io/mechmotum/jupyterhubspawner.png" style="width: 600px;" /&gt;
&lt;p&gt;The default environment includes Python 2 and 3, Octave, R, Julia, and
SageMath.  Note that SageMath requires Python 2, so changing the Python path
inside the SageMath configuration files is required. &lt;a class="reference external" href="https://bytesofcomputerwisdom.home.blog/2019/03/31/jupyter-notebook-running-the-wrong-python-version/"&gt;This article&lt;/a&gt;
contains more information on how this was accomplished. This fix is automated
in the Dockerfile.&lt;/p&gt;
&lt;p&gt;RStudio is also offered alongside JupyterLab, since deploying web applications
using packages such as &lt;tt class="docutils literal"&gt;shiny&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;shiny-dashboard&lt;/span&gt;&lt;/tt&gt; require RStudio and do
not run in Jupyter Notebooks.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="interesting-nuggets"&gt;
&lt;h2&gt;Interesting Nuggets&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Our Nginx server serves as a proxy to direct packets from public ips to ips
that metallb assigns to services on our cluster. When we setup HTTPS for
JupyterHub, Nginx started complaing as it would try to decrypt the traffic
meant for JupyterHub. We solved the problem by using the stream block, which
streams packet to the backend without trying to decrypt anything.&lt;/li&gt;
&lt;li&gt;A service on the cluster can be connected to a ingress controller(for example
Nginx) to make it accessible from outside the cluster. The ingress controller
is not to be confused with the Nginx proxy that we have running outside the
cluster, an ingress controller is a service running on Kubernetes that allows
host or URL based HTTP routing from outside the cluster to services on the
cluster.&lt;/li&gt;
&lt;li&gt;cert-manager is a very useful helm chart that can be deployed on Kubernetes
to automatically manage and issue TLS certificates from various issuing
sources. This alongside an ingress controller like Nginx can be a very useful
setup.&lt;/li&gt;
&lt;li&gt;Grafana and Prometheus is a good solution for setting up basic monitoring and
alerting on a Kubernetes cluster. They currently have a bug that erases all
the saved data when the Grafana pod is deleted for some reason. A workaround
is to save the json of the dashboards.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="future"&gt;
&lt;h2&gt;Future&lt;/h2&gt;
&lt;p&gt;In the future, we plan to create another cluster including, but not limited, to
the following:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Having multiple master nodes and using two HAproxy servers instead of a
single Nginx server to avoid single points of failure.&lt;/li&gt;
&lt;li&gt;Assigning GPU's to different users.&lt;/li&gt;
&lt;li&gt;Assigning different networks based on organization.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="education"/><category term="oer"/><category term="education"/><category term="jupyter"/><category term="textbooks"/><category term="engineering"/><category term="libretexts"/></entry><entry><title>Creating Linux Servers for JupyterHub</title><link href="https://mechmotum.github.io/blog/jupyter-winter-2019.html" rel="alternate"/><published>2019-05-03T00:00:00-07:00</published><updated>2019-05-03T00:00:00-07:00</updated><author><name>Celine Liang</name></author><id>tag:mechmotum.github.io,2019-05-03:/blog/jupyter-winter-2019.html</id><summary type="html">&lt;p class="first last"&gt;Blog post on setting up JupyterHub for a future computing cluster&lt;/p&gt;
</summary><content type="html">&lt;div class="section" id="background"&gt;
&lt;h2&gt;Background&lt;/h2&gt;
&lt;p&gt;As part of the &lt;a class="reference external" href="libretexts-grant.rst"&gt;$5M grant&lt;/a&gt; awarded to the LibreTexts
project last year, our team had two goals: to integrate Jupyter into the
LibreTexts website and to create a computing cluster running JupyterHub to
serve LibreTexts and UC Davis users. This quarter, we focused on researching
how to create the cluster through building test servers.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="virtual-machine-environment"&gt;
&lt;h2&gt;Virtual Machine Environment&lt;/h2&gt;
&lt;p&gt;The first step in our journey to building a cluster was to familiarize
ourselves with how to setup a single server. It was crucial for us to really
understand all the details on how to setup a single server, as we would need
the knowledge to setup each and every single node in the cluster. We decided to
use VirtualBox as our starting playground so we had an easily disposable
environments to learn from.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="raid1-and-lvm"&gt;
&lt;h2&gt;RAID1 and LVM&lt;/h2&gt;
&lt;p&gt;We started adding more features to the installations that we would eventually
use in our cluster configuration. We started by adding a software RAID1 to our
installations to familiarize ourselves with the process, and then we moved on
to adding LVM too.&lt;/p&gt;
&lt;p&gt;Redundant Array of Independent Disks, also known as RAID, provides multiple
ways of orchestrating and synchronizing multiple hard drives in a computer
network to establish reliable data storage within the network. We decided to
use RAID1, which consists of an exact copy of a set of data on two or more
disks. We chose RAID1 because it allows us to switch a drive while the server
is live, in case a drive fails.&lt;/p&gt;
&lt;p&gt;Logical Volume Manager, also known as LVM, is a device mapper target that
provides logical volume management for the Linux kernel. The benefits of using
LVM is the ability to use and manage &amp;quot;dynamic partitions&amp;quot;. When using LVM
&amp;quot;partitions&amp;quot;, known just as logical volumes, we can manage them very easily
through the command line if we wanted to either create additional partitions,
or resize/delete any existing partitions.&lt;/p&gt;
&lt;p&gt;While installing Ubuntu Live Server 18.04 with RAID1, we ran into an issue
where the server failed to start. According to the &lt;a class="reference external" href="https://wiki.ubuntu.com/BionicBeaver/ReleaseNotes#Server_installer"&gt;Ubuntu 18.04.02 Release
Notes&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The next generation Subiquity server installer, brings the comfortable live
session and speedy install of Ubuntu Desktop to server users at last.&lt;/p&gt;
&lt;p&gt;N.B., If you require multipath, full-disk encryption, or the ability to
re-using existing partitions, you will want to continue to use the alternate
installer which can be downloaded from
&lt;a class="reference external" href="http://cdimage.ubuntu.com/releases/18.04/release/"&gt;http://cdimage.ubuntu.com/releases/18.04/release/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;As of 18.04.1, the Subiquity server installer now supports LVM, RAID, vlans,
and bonds.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;After some researching, we learned however that &lt;a class="reference external" href="https://bugs.launchpad.net/subiquity/+bug/1785332"&gt;a bug&lt;/a&gt; from the Ubuntu Live
Server image caused the installer to fail to mount the boot partition,
preventing the installation of Ubuntu on RAID1. We instead used this &lt;a class="reference external" href="http://cdimage.ubuntu.com/releases/18.04.2/release/ubuntu-18.04.2-server-amd64.iso"&gt;alternate
installer (non-live server image file)&lt;/a&gt;
to successfully install Ubuntu Server 18.04 with RAID1 on the virtual machines.&lt;/p&gt;
&lt;p&gt;When installing Ubuntu Server with RAID1 and LVM on our virtual machines, we
did not allot enough space on our hard disks for the operating system and
JupyterHub combined. We determined that in total, the operating system and
JupyterHub required about 15 GB of storage. To be safe, we now recommend to
create two 20 GB virtual hard disks for setting up JupyterHub.&lt;/p&gt;
&lt;p&gt;Our individual setups varied between each test server. In one successful setup,
each hard disk contained two partitions. One partition contained 2.0 GB and was
mounted on &lt;tt class="docutils literal"&gt;/boot&lt;/tt&gt; as the boot partition. The other partition contained 19.5
GB, serving as primary storage.&lt;/p&gt;
&lt;p&gt;We plan to have a stack of Ubuntu 18, RAID1, and LVM as our standard setup for
each node in the cluster.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="jupyterhub-bare-metal"&gt;
&lt;h2&gt;JupyterHub Bare-Metal&lt;/h2&gt;
&lt;p&gt;Our next step was trying to setup a bare-metal verion of JupyterHub in our
virtual machines.  We followed the instructions provided in the repository,
&lt;a class="reference external" href="https://github.com/mechmotum/jupyterhub-deploy-teaching"&gt;jupyterhub-deploy-teaching&lt;/a&gt;, to install
JupyterHub on our virtual machines and connect to it through the browser. The
repository is a &amp;quot;light fork&amp;quot; from the JupyterHub's &lt;a class="reference external" href="https://github.com/jupyterhub/jupyterhub-deploy-teaching"&gt;original
jupyterhub-deploy-teaching&lt;/a&gt; repository,
intended for UC Davis usage.&lt;/p&gt;
&lt;p&gt;We ran into a few issues during the installation process.  The Ansible script
in the repository was missing some required installations.  The package
&lt;cite&gt;python3-distutils&lt;/cite&gt; is required by JupyterHub but was not installed. The
package was a part of Ubuntu 16.04, so the Ansible script did not need to
specify installing &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;python3-disutils&lt;/span&gt;&lt;/tt&gt; previously. This was fixed in the
Ansible Playbook via &lt;a class="reference external" href="https://github.com/mechmotum/jupyterhub-deploy-teaching/commit/51b070a9ae3223d1919ec56323411ef455d642e5"&gt;this commit&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;We also encountered Conda errors while installing JupyterHub. We suspect that
this is due to the submodules from the &lt;a class="reference external" href="https://github.com/UDST/ansible-conda/tree/f26ac9f82bb96035d9d96a1531d62456c959229d"&gt;ansible-conda&lt;/a&gt;
repository, which are fixed by running their updates in our automatic
configuration and deploying script, &lt;tt class="docutils literal"&gt;setup.sh&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;After succeeding in setting up JupyterHub on our virtual machines, we
incorporated the changes into the configuration files and completed
&lt;tt class="docutils literal"&gt;setup.sh&lt;/tt&gt; to automate the installation process, testing it to make sure that
it worked. The script &lt;tt class="docutils literal"&gt;setup.sh&lt;/tt&gt; automates the following configuration tasks:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Adds submodules from the &lt;a class="reference external" href="https://github.com/UDST/ansible-conda/tree/f26ac9f82bb96035d9d96a1531d62456c959229d"&gt;ansible-conda&lt;/a&gt;
repository.&lt;/li&gt;
&lt;li&gt;Adds the current user to as an admin and user.&lt;/li&gt;
&lt;li&gt;Generates a proxy_auth_token and inputs it into the configuration file.&lt;/li&gt;
&lt;li&gt;Generates a self-signed SSL certificate and cookie secret.&lt;/li&gt;
&lt;li&gt;Names the &lt;cite&gt;hosts&lt;/cite&gt; and &lt;cite&gt;jupyter_hosts&lt;/cite&gt; files properly from &lt;cite&gt;hosts.example&lt;/cite&gt;
and &lt;cite&gt;jupyter_hosts.example&lt;/cite&gt; respectively.&lt;/li&gt;
&lt;li&gt;Runs Ansible Playbook.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Users can now save time by running the script to configure and deploy
JupyterHub, rather than complete the above tasks manually. Using the script
should be less error-prone compared to the manual setup.&lt;/p&gt;
&lt;/div&gt;
</content><category term="education"/><category term="oer"/><category term="education"/><category term="jupyter"/><category term="textbooks"/><category term="engineering"/><category term="libretexts"/></entry></feed>